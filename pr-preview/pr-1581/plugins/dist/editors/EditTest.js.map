{"version":3,"file":"EditTest.js","sourceRoot":"","sources":["../../src/editors/EditTest.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAG9E,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,UAAU;IAAhD;;QAKI,cAAS,GAAG,CAAC,CAAC,CAAC;IA0FnB,CAAC;IAxFG,MAAM;QACJ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEtB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAExD,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvD,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEvC,MAAM,KAAK,GAAG,YAAY,CAAC;YACzB,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,OAAO;SACd,CAAC,CAAA;QACF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC3B,CAAC;IAED,MAAM;QACJ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEtB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC;QAErE,IAAI,MAAM,EAAE;YACV,MAAM,KAAK,GAAG,YAAY,CAAC;gBACzB,IAAI,EAAE,MAAM;aACb,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,IAAI;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC;QAErE,IAAI,MAAM,EAAE;YACV,MAAM,KAAK,GAAG,YAAY,CAAC;gBACzB,OAAO,EAAE,MAAM;gBACf,UAAU,EAAE;oBACV,IAAI,EAAE,uBAAuB;iBAC9B;aACF,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,SAAS;QACP,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC;QAErE,IAAI,MAAM,EAAE;YAEV,MAAM,KAAK,GAAG,YAAY,CAAC;gBACvB;oBACE,OAAO,EAAE,MAAM;oBACf,UAAU,EAAE;wBACV,MAAM,EAAE,YAAY;qBACrB;iBACF;gBACD;oBACE,OAAO,EAAE,MAAM;oBACf,UAAU,EAAE;wBACV,MAAM,EAAE,YAAY;qBACrB;iBACF;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;;gDAI+B,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE;gDACnB,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE;8CACrB,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;mDACZ,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE;;;OAGlE,CAAC;IACJ,CAAC;;AAEM,eAAM,GAAG,GAAG,CAAA;;;;;;;;IAQnB,CAAC;AA3FD;IADC,QAAQ,EAAE;qCACO;AAElB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CACZ","sourcesContent":["import { newEditEvent } from '@openscd/core';\nimport { css, html, LitElement, property, TemplateResult } from 'lit-element';\n\n\nexport default class EditTest extends LitElement {\n    /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n    @property()\n    doc!: XMLDocument;\n    @property({ type: Number })\n    editCount = -1;\n\n    create(): void {\n      console.log('Create');\n\n      const substation = this.doc.querySelector('Substation');\n\n      const element = this.doc.createElement('VoltageLevel');\n      element.setAttribute('name', 'Test_1');\n\n      const event = newEditEvent({\n        parent: substation,\n        node: element\n      })\n      this.dispatchEvent(event)\n    }\n\n    remove(): void {\n      console.log('Remove');\n\n      const testVL = this.doc.querySelector('VoltageLevel[name=\"Test_1\"]');\n\n      if (testVL) {\n        const event = newEditEvent({\n          node: testVL\n        });\n        this.dispatchEvent(event);\n      }\n    }\n\n    edit(): void {\n      const testVL = this.doc.querySelector('VoltageLevel[name=\"Test_1\"]');\n\n      if (testVL) {\n        const event = newEditEvent({\n          element: testVL,\n          attributes: {\n            test: 'new attribute created'\n          }\n        });\n        this.dispatchEvent(event);\n      }\n    }\n\n    multiedit(): void {\n      const testVL = this.doc.querySelector('VoltageLevel[name=\"Test_1\"]');\n\n      if (testVL) {\n\n        const event = newEditEvent([\n            {\n              element: testVL,\n              attributes: {\n                event1: 'new data 1'\n              }\n            },\n            {\n              element: testVL,\n              attributes: {\n                event2: 'new data 2'\n              }\n            }\n        ]);\n        this.dispatchEvent(event);\n      }\n    }\n  \n    render(): TemplateResult {\n      return html`\n        <div class=\"edit\">\n          <h2>Edittest</h2>\n          <div>\n            <mwc-button label=\"Create\" @click=${() => this.create()}></mwc-button>\n            <mwc-button label=\"Remove\" @click=${() => this.remove()}></mwc-button>\n            <mwc-button label=\"Edit\" @click=${() => this.edit()}></mwc-button>\n            <mwc-button label=\"Multiedit\" @click=${() => this.multiedit()}></mwc-button>\n          </div>\n        </div>\n      `;\n    }\n\n    static styles = css`\n    :host {\n      width: 100vw;\n    }\n\n    .edit {\n        padding: 48px;\n    }\n  }`;\n}"]}