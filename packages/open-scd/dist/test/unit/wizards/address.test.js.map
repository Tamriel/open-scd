{"version":3,"file":"address.test.js","sourceRoot":"","sources":["../../../../test/unit/wizards/address.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../src/addons/Wizards.js';\n\nimport { WizardSelect } from '../../../src/wizard-select.js';\nimport { WizardTextField } from '../../../src/wizard-textfield.js';\nimport {\n  Create,\n  Delete,\n  getValue,\n  isCreate,\n  isDelete,\n  Wizard,\n  WizardInputElement,\n} from '../../../src/foundation.js';\nimport {\n  contentGseOrSmvWizard,\n  updateAddress,\n} from '../../../src/wizards/address.js';\n\nfunction addressContent(\n  inputs: WizardInputElement[]\n): Record<string, string | null> {\n  const addressContent: Record<string, string | null> = {};\n\n  addressContent['MAC-Address'] = getValue(\n    inputs.find(i => i.label === 'MAC-Address')!\n  );\n  addressContent['APPID'] = getValue(inputs.find(i => i.label === 'APPID')!);\n  addressContent['VLAN-ID'] = getValue(\n    inputs.find(i => i.label === 'VLAN-ID')!\n  );\n  addressContent['VLAN-PRIORITY'] = getValue(\n    inputs.find(i => i.label === 'VLAN-PRIORITY')!\n  );\n\n  return addressContent;\n}\n\ndescribe('address', () => {\n  let doc: XMLDocument;\n  let element: Wizards;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n    doc = await fetch('/test/testfiles/wizards/gsecontrol.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('renderGseSmvAddress', () => {\n    beforeEach(async () => {\n      const gse = doc.querySelector(\n        'GSE[ldInst=\"CircuitBreaker_CB1\"][cbName=\"GCB\"]'\n      )!;\n\n      const hasInstType = Array.from(gse.querySelectorAll('Address > P')).some(\n        pType => pType.getAttribute('xsi:type')\n      );\n\n      const attributes: Record<string, string | null> = {};\n      ['MAC-Address', 'APPID', 'VLAN-ID', 'VLAN-PRIORITY'].forEach(key => {\n        if (!attributes[key])\n          attributes[key] =\n            gse.querySelector(`Address > P[type=\"${key}\"]`)?.innerHTML.trim() ??\n            null;\n      });\n\n      const wizard = [\n        {\n          title: 'title',\n          content: contentGseOrSmvWizard({ hasInstType, attributes }),\n        },\n      ];\n\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n    });\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).to.equalSnapshot();\n    }).timeout(5000);\n  });\n\n  describe('updateAddress', () => {\n    let gse: Element;\n    let inputs: WizardInputElement[];\n    let wizard: Wizard;\n\n    describe('with exiting address element', () => {\n      beforeEach(async () => {\n        gse = doc.querySelector(\n          'GSE[ldInst=\"CircuitBreaker_CB1\"][cbName=\"GCB\"]'\n        )!;\n\n        const hasInstType = Array.from(\n          gse.querySelectorAll('Address > P')\n        ).some(pType => pType.getAttribute('xsi:type'));\n\n        const attributes: Record<string, string | null> = {};\n        ['MAC-Address', 'APPID', 'VLAN-ID', 'VLAN-PRIORITY'].forEach(key => {\n          if (!attributes[key])\n            attributes[key] =\n              gse\n                .querySelector(`Address > P[type=\"${key}\"]`)\n                ?.innerHTML.trim() ?? null;\n        });\n\n        wizard = [\n          {\n            title: 'asdas',\n            content: contentGseOrSmvWizard({ hasInstType, attributes }),\n          },\n        ];\n        element.workflow.push(() => wizard);\n        await element.requestUpdate();\n        inputs = Array.from(element.wizardUI.inputs);\n        await element.requestUpdate();\n      });\n\n      it('does not update a Address element when no attribute has changed', () => {\n        const actions = updateAddress(gse, addressContent(inputs), false);\n        expect(actions).to.be.empty;\n      });\n\n      it('update a Address element when VLAN ID gets created', async () => {\n        const input = <WizardTextField>inputs[2];\n        const type = input.label;\n        const newValue = 'newValue';\n\n        input.maybeValue = newValue;\n        await input.requestUpdate();\n\n        const actions = updateAddress(gse, addressContent(inputs), false);\n        expect(actions.length).to.equal(2);\n        expect(actions[0]).to.satisfy(isDelete);\n        expect(actions[1]).to.satisfy(isCreate);\n        const oldElement = <Element>(<Delete>actions[0]).old.element;\n        const newElement = <Element>(<Create>actions[1]).new.element;\n        expect(\n          oldElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n        ).to.be.undefined;\n        expect(\n          newElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n        ).to.equal(newValue);\n        expect(\n          newElement.querySelector(`P[type=\"${type}\"]`)\n        ).to.not.have.attribute('xsi:type', `tP_${type}`);\n      });\n\n      it('update a Address element when at least one attribute changes', async () => {\n        for (const rawInput of inputs) {\n          const input =\n            rawInput instanceof WizardTextField\n              ? <WizardTextField>rawInput\n              : <WizardSelect>rawInput;\n\n          const type = input.label;\n          const newValue = 'newValue';\n          const oldValue = input.value || undefined;\n\n          input.maybeValue = newValue;\n          await input.requestUpdate();\n\n          const actions = updateAddress(gse, addressContent(inputs), false);\n          expect(actions.length).to.equal(2);\n          expect(actions[0]).to.satisfy(isDelete);\n          expect(actions[1]).to.satisfy(isCreate);\n          const oldElement = <Element>(<Delete>actions[0]).old.element;\n          const newElement = <Element>(<Create>actions[1]).new.element;\n          expect(\n            oldElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(oldValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(newValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)\n          ).to.not.have.attribute('xsi:type', `tP_${type}`);\n        }\n      });\n\n      it('update a Address element when status of instType has changed', async () => {\n        for (const rawInput of inputs) {\n          const input =\n            rawInput instanceof WizardTextField\n              ? <WizardTextField>rawInput\n              : <WizardSelect>rawInput;\n\n          const type = input.label;\n          const newValue = input.value;\n          const oldValue = input.value || undefined;\n\n          input.maybeValue = newValue;\n          await input.requestUpdate();\n\n          const actions = updateAddress(gse, addressContent(inputs), true);\n          expect(actions.length).to.equal(2);\n          expect(actions[0]).to.satisfy(isDelete);\n          expect(actions[1]).to.satisfy(isCreate);\n          const oldElement = <Element>(<Delete>actions[0]).old.element;\n          const newElement = <Element>(<Create>actions[1]).new.element;\n          expect(\n            oldElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(oldValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(newValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)\n          ).to.have.attribute('xsi:type', `tP_${type}`);\n        }\n      });\n    });\n\n    describe('with missing address element', () => {\n      beforeEach(async () => {\n        gse = doc.querySelector(\n          'GSE[ldInst=\"CircuitBreaker_CB1\"][cbName=\"GCB2\"]'\n        )!;\n\n        const hasInstType = Array.from(\n          gse.querySelectorAll('Address > P')\n        ).some(pType => pType.getAttribute('xsi:type'));\n\n        const attributes: Record<string, string | null> = {};\n        ['MAC-Address', 'APPID', 'VLAN-ID', 'VLAN-PRIORITY'].forEach(key => {\n          if (!attributes[key])\n            attributes[key] =\n              gse\n                .querySelector(`Address > P[type=\"${key}\"]`)\n                ?.innerHTML.trim() ?? null;\n        });\n\n        wizard = [\n          {\n            title: 'asdas',\n            content: contentGseOrSmvWizard({ hasInstType, attributes }),\n          },\n        ];\n        element.workflow.push(() => wizard);\n        await element.requestUpdate();\n        inputs = Array.from(element.wizardUI.inputs);\n        await element.requestUpdate();\n      });\n\n      it('creates a Address element when at least one attribute changes', async () => {\n        for (const rawInput of inputs) {\n          const input =\n            rawInput instanceof WizardTextField\n              ? <WizardTextField>rawInput\n              : <WizardSelect>rawInput;\n\n          if (input.maybeValue === null) {\n            input.nullSwitch?.click();\n            await input.requestUpdate();\n          }\n\n          const type = input.label;\n          const newValue = 'newValue';\n          input.value = newValue;\n          await input.requestUpdate();\n\n          const actions = updateAddress(gse, addressContent(inputs), false);\n          expect(actions.length).to.equal(1);\n          expect(actions[0]).to.satisfy(isCreate);\n          const newElement = <Element>(<Create>actions[0]).new.element;\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(newValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)\n          ).to.not.have.attribute('xsi:type', `tP_${type}`);\n        }\n      });\n\n      it('update a Address element when status of instType has changed', async () => {\n        for (const rawInput of inputs) {\n          const input =\n            rawInput instanceof WizardTextField\n              ? <WizardTextField>rawInput\n              : <WizardSelect>rawInput;\n\n          if (input.maybeValue === null) {\n            input.nullSwitch?.click();\n            await input.requestUpdate();\n          }\n\n          const type = input.label;\n          const newValue = input.value;\n\n          input.value = newValue;\n          await input.requestUpdate();\n          const actions = updateAddress(gse, addressContent(inputs), true);\n          expect(actions.length).to.equal(1);\n          expect(actions[0]).to.satisfy(isCreate);\n          const newElement = <Element>(<Create>actions[0]).new.element;\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)?.textContent?.trim()\n          ).to.equal(newValue);\n          expect(\n            newElement.querySelector(`P[type=\"${type}\"]`)\n          ).to.have.attribute('xsi:type', `tP_${type}`);\n        }\n      });\n    });\n  });\n});\n"]}