{"version":3,"file":"substation.test.js","sourceRoot":"","sources":["../../../../test/unit/wizards/substation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../src/addons/Wizards.js';\n\nimport { WizardTextField } from '../../../src/wizard-textfield.js';\nimport {\n  ComplexAction,\n  isSimple,\n  WizardInputElement,\n} from '../../../src/foundation.js';\n\nimport {\n  executeWizardCreateAction,\n  expectReplaceAction,\n  expectUpdateAction,\n  expectWizardNoUpdateAction,\n  fetchDoc,\n  setWizardTextFieldValue,\n} from './test-support.js';\nimport { updateNamingAttributeWithReferencesAction } from '../../../src/wizards/foundation/actions.js';\nimport {\n  createAction,\n  createSubstationWizard,\n  substationEditWizard,\n} from '../../../src/wizards/substation.js';\n\ndescribe('Wizards for SCL element Substation', () => {\n  let doc: XMLDocument;\n  let substation: Element;\n  let element: Wizards;\n  let inputs: WizardInputElement[];\n\n  describe('edit existing Substation', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/substation.scd');\n      substation = doc.querySelector('Substation[name=\"Sub1\"]')!;\n\n      element = await fixture(\n        html`<oscd-wizards .host=${document}></oscd-wizards>`\n      );\n      const wizard = substationEditWizard(substation);\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n      inputs = Array.from(element.wizardUI.inputs);\n    });\n\n    it('update name should be updated in document', async function () {\n      await setWizardTextFieldValue(<WizardTextField>inputs[0], 'OtherSub1');\n\n      const complexAction = updateNamingAttributeWithReferencesAction(\n        substation,\n        'substation.action.updatesubstation'\n      )(inputs, element.wizardUI);\n      expect(complexAction.length).to.equal(1);\n      expect(complexAction[0]).to.not.satisfy(isSimple);\n\n      const simpleActions = (<ComplexAction>complexAction[0]).actions;\n      expect(simpleActions.length).to.equal(7);\n\n      expectUpdateAction(\n        simpleActions[0],\n        'Substation',\n        'name',\n        'Sub1',\n        'OtherSub1'\n      );\n      expectReplaceAction(\n        simpleActions[1],\n        'Terminal',\n        'substationName',\n        'Sub1',\n        'OtherSub1'\n      );\n    });\n\n    it('update description should be updated in document', async function () {\n      await setWizardTextFieldValue(\n        <WizardTextField>inputs[1],\n        'Some description'\n      );\n\n      const complexAction = updateNamingAttributeWithReferencesAction(\n        substation,\n        'substation.action.updatesubstation'\n      )(inputs, element.wizardUI);\n      expect(complexAction.length).to.equal(1);\n      expect(complexAction[0]).to.not.satisfy(isSimple);\n\n      const simpleActions = (<ComplexAction>complexAction[0]).actions;\n      expect(simpleActions.length).to.equal(1);\n\n      expectUpdateAction(\n        simpleActions[0],\n        'Substation',\n        'desc',\n        'Substation 1',\n        'Some description'\n      );\n    });\n\n    it('when no fields changed there will be no update action', async function () {\n      expectWizardNoUpdateAction(\n        updateNamingAttributeWithReferencesAction(\n          substation,\n          'substation.action.updatesubstation'\n        ),\n        element.wizardUI,\n        inputs\n      );\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).dom.to.equalSnapshot();\n    });\n  });\n\n  describe('add new Substation', () => {\n    let parent: Element;\n\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/substation.scd');\n      parent = doc.querySelector('SCL')!;\n\n      element = await fixture(\n        html`<oscd-wizards .host=${document}></oscd-wizards>`\n      );\n      const wizard = createSubstationWizard(parent);\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n      inputs = Array.from(element.wizardUI.inputs);\n    });\n\n    it('create new Substation', async function () {\n      await setWizardTextFieldValue(<WizardTextField>inputs[0], 'NewSub');\n\n      const createAC = executeWizardCreateAction(\n        createAction(parent),\n        element.wizardUI,\n        inputs\n      );\n      expect(createAC.new.element).to.have.attribute('name', 'NewSub');\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).dom.to.equalSnapshot();\n    });\n  });\n});\n"]}