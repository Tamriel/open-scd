{"version":3,"file":"ldevice.test.js","sourceRoot":"","sources":["../../../../test/unit/wizards/ldevice.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../src/addons/Wizards.js';\n\nimport { WizardTextField } from '../../../src/wizard-textfield.js';\nimport {\n  WizardInputElement,\n  createUpdateAction,\n  getValue,\n} from '../../../src/foundation.js';\nimport { editLDeviceWizard } from '../../../src/wizards/ldevice.js';\nimport {\n  fetchDoc,\n  setWizardTextFieldValue,\n  expectUpdateAction,\n} from './test-support.js';\n\ndescribe('Wizards for SCL element LDevice', () => {\n  let doc: XMLDocument;\n  let ied: Element;\n  let services: Element;\n  let ldevice: Element;\n  let element: Wizards;\n  let inputs: WizardInputElement[];\n\n  beforeEach(async () => {\n    doc = await fetchDoc('/test/testfiles/wizards/ied.scd');\n    ied = doc.querySelector('IED[name=\"IED3\"]')!;\n    services = ied.querySelector('Services')!;\n    ldevice = ied.querySelectorAll('AccessPoint > Server > LDevice')[0];\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n    const wizard = editLDeviceWizard(ldevice);\n    element.workflow.push(() => wizard);\n    await element.requestUpdate();\n    inputs = Array.from(element.wizardUI.inputs);\n  });\n\n  it('contains a wizard-textfield with a non-empty \"inst\" value', async () => {\n    expect(\n      (<WizardTextField[]>inputs).find(textField => textField.label == 'ldInst')\n        ?.value\n    ).to.be.equal(ldevice.getAttribute('inst'));\n  });\n  it('contains a wizard-textfield with an empty \"desc\" value', async () => {\n    expect(\n      (<WizardTextField[]>inputs).find(textField => textField.label == 'desc')\n        ?.value\n    ).to.be.equal('');\n  });\n  it('contains a wizard-textfield with an empty \"ldName\" value', async () => {\n    expect(\n      (<WizardTextField[]>inputs).find(textField => textField.label == 'ldName')\n        ?.value\n    ).to.be.equal('');\n  });\n\n  describe('Allowing/Disallowing ldName editing', () => {\n    it('ConfLdName should not be present and therefore ldName should be readonly', async function () {\n      expect(services.querySelector('ConfLdName')).to.not.exist;\n      expect(<WizardTextField>inputs[0]).to.have.attribute('readonly');\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).dom.to.equalSnapshot();\n    });\n\n    it('ConfLdName should be present in IED1 and therefore ldName should not be readonly', async function () {\n      ied = doc.querySelector('IED[name=\"IED1\"]')!;\n      services = ied.querySelector('Services')!;\n      ldevice = ied.querySelectorAll('AccessPoint > Server > LDevice')[0];\n      element = await fixture(\n        html`<oscd-wizards .host=${document}></oscd-wizards>`\n      );\n      const wizard = editLDeviceWizard(ldevice);\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n      inputs = Array.from(element.wizardUI.inputs);\n\n      expect(services.querySelector('ConfLdName')).to.exist;\n      expect(<WizardTextField>inputs[0]).to.not.have.attribute('readonly');\n\n      describe('Modify ldName', () => {\n        it('should be registered as an update action', async () => {\n          const newValue = 'LDevice1';\n          const ldeviceTextField = (<WizardTextField[]>inputs).find(\n            textField => textField.label == 'ldName'\n          )!;\n\n          expect(ldeviceTextField?.value).to.be.equal('');\n          await setWizardTextFieldValue(ldeviceTextField, newValue);\n\n          const ldNameVal = getValue(inputs.find(i => i.label === 'ldName')!)!;\n          expect(ldNameVal).to.not.be.equal(ldevice.getAttribute('ldName'));\n\n          const simpleAction = createUpdateAction(ldevice, {\n            ldName: ldNameVal,\n          });\n\n          expectUpdateAction(\n            simpleAction,\n            ldevice.tagName,\n            ldeviceTextField.label,\n            null,\n            newValue\n          );\n        });\n      });\n    });\n  });\n});\n"]}