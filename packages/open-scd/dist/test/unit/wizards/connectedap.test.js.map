{"version":3,"file":"connectedap.test.js","sourceRoot":"","sources":["../../../../test/unit/wizards/connectedap.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport '../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../src/addons/Wizards.js';\n\nimport { Checkbox } from '@material/mwc-checkbox';\n\nimport { WizardTextField } from '../../../src/wizard-textfield.js';\nimport {\n  ComplexAction,\n  Delete,\n  isCreate,\n  isDelete,\n  isSimple,\n  Create,\n  WizardInputElement,\n} from '../../../src/foundation.js';\nimport { editConnectedApWizard } from '../../../src/wizards/connectedap.js';\n\ndescribe('Wizards for SCL element ConnectedAP', () => {\n  let doc: XMLDocument;\n  let element: Wizards;\n  let inputs: WizardInputElement[];\n  let input: WizardInputElement | undefined;\n  let primaryAction: HTMLElement;\n\n  let actionEvent: SinonSpy;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n\n    actionEvent = spy();\n    window.addEventListener('editor-action', actionEvent);\n  });\n\n  describe('include an edit wizard that', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2003.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      const wizard = editConnectedApWizard(doc.querySelector('ConnectedAP')!);\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n\n      inputs = Array.from(element.wizardUI.inputs);\n\n      primaryAction = <HTMLElement>(\n        element.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('does not edit any P element with unchanged wizard inputs', async () => {\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.not.have.been.called;\n    });\n\n    it('triggers a complex editor action to update P elements(s)', async () => {\n      input = <WizardTextField>inputs.find(input => input.label === 'IP');\n      input.value = '192.168.210.158';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      expect(actionEvent).to.be.calledOnce;\n      expect(actionEvent.args[0][0].detail.action).to.not.satisfy(isSimple);\n    });\n\n    it('triggers a complex action as combination of delete and create with prior existing Address field', async () => {\n      input = <WizardTextField>inputs.find(input => input.label === 'IP');\n      input.value = '192.168.210.158';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      const complexAction = <ComplexAction>actionEvent.args[0][0].detail.action;\n      expect(complexAction.actions).to.have.lengthOf(2);\n      expect(complexAction.actions[0]).to.satisfy(isDelete);\n      expect(complexAction.actions[1]).to.satisfy(isCreate);\n    });\n\n    it('triggers a complex action being a pure create with prior missing Address field', async () => {\n      doc\n        .querySelector<Element>('ConnectedAP')\n        ?.removeChild(doc.querySelector<Element>('ConnectedAP > Address')!);\n\n      input = <WizardTextField>inputs.find(input => input.label === 'IP');\n      input.value = '192.168.210.158';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      const complexAction = <ComplexAction>actionEvent.args[0][0].detail.action;\n      expect(complexAction.actions).to.have.lengthOf(1);\n      expect(complexAction.actions[0]).to.satisfy(isCreate);\n    });\n\n    it('properly updates a P element of type IP', async () => {\n      input = <WizardTextField>inputs.find(input => input.label === 'IP');\n      input.value = '192.168.210.158';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      const complexAction = <ComplexAction>actionEvent.args[0][0].detail.action;\n\n      const oldAddress = <Element>(\n        (<Delete>complexAction.actions[0]).old.element\n      );\n      const newAddress = <Element>(\n        (<Create>complexAction.actions[1]).new.element\n      );\n\n      expect(\n        oldAddress.querySelector<Element>('P[type=\"IP\"]')?.textContent\n      ).to.equal('192.168.210.111');\n      expect(\n        newAddress.querySelector<Element>('P[type=\"IP\"]')?.textContent\n      ).to.equal('192.168.210.158');\n    });\n\n    it('adds type restrictions with selected option type restriction', async () => {\n      (<Checkbox>(\n        element.wizardUI.shadowRoot?.querySelector('#typeRestriction')\n      )).checked = true;\n      await element.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      const complexAction = <ComplexAction>actionEvent.args[0][0].detail.action;\n\n      const oldAddress = <Element>(\n        (<Delete>complexAction.actions[0]).old.element\n      );\n      const newAddress = <Element>(\n        (<Create>complexAction.actions[1]).new.element\n      );\n\n      const oldIP = oldAddress.querySelector<Element>('P[type=\"IP\"]');\n      const newIP = newAddress.querySelector<Element>('P[type=\"IP\"]');\n\n      expect(\n        oldIP?.getAttributeNS(\n          'http://www.w3.org/2001/XMLSchema-instance',\n          'type'\n        )\n      ).to.not.exist;\n      expect(\n        newIP?.getAttributeNS(\n          'http://www.w3.org/2001/XMLSchema-instance',\n          'type'\n        )\n      ).to.exist;\n    });\n  });\n});\n"]}