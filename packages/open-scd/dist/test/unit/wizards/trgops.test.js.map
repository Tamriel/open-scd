{"version":3,"file":"trgops.test.js","sourceRoot":"","sources":["../../../../test/unit/wizards/trgops.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport '../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../src/addons/Wizards.js';\n\nimport {\n  isReplace,\n  Replace,\n  WizardInputElement,\n} from '../../../src/foundation.js';\nimport { WizardSelect } from '../../../src/wizard-select.js';\nimport { editTrgOpsWizard } from '../../../src/wizards/trgops.js';\n\ndescribe('Wizards for SCL TrgOps element', () => {\n  let element: Wizards;\n  let trgOps: Element;\n  let inputs: WizardInputElement[];\n\n  let primaryAction: HTMLElement;\n\n  let actionEvent: SinonSpy;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n    trgOps = <Element>(\n      new DOMParser().parseFromString(\n        `<TrgOps dchg=\"true\" gi=\"false\"></TrgOps>`,\n        'application/xml'\n      ).documentElement\n    );\n\n    actionEvent = spy();\n    window.addEventListener('editor-action', actionEvent);\n  });\n\n  describe('define an edit wizard that', () => {\n    beforeEach(async () => {\n      const wizard = editTrgOpsWizard(trgOps);\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n\n      inputs = Array.from(element.wizardUI.inputs);\n      await element.requestUpdate();\n\n      primaryAction = <HTMLElement>(\n        element.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).dom.to.equalSnapshot();\n    }).timeout(5000);\n\n    it('does not update the TrgOps element with no changed attributes', async () => {\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent.notCalled).to.be.true;\n    });\n\n    it('updates the TrgOps element with changed dchg attribute', async () => {\n      const input = <WizardSelect>inputs[0];\n      input.maybeValue = 'false';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.be.calledOnce;\n\n      const action = actionEvent.args[0][0].detail.action;\n      expect(action).to.satisfy(isReplace);\n\n      const updateAction = <Replace>action;\n      expect(updateAction.old.element).to.have.attribute('dchg', 'true');\n      expect(updateAction.new.element).to.have.attribute('dchg', 'false');\n    });\n\n    it('updates the TrgOps element with changed qchg attribute', async () => {\n      const input = <WizardSelect>inputs[1];\n      input.nullSwitch?.click();\n      input.maybeValue = 'false';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.be.calledOnce;\n\n      const action = actionEvent.args[0][0].detail.action;\n      expect(action).to.satisfy(isReplace);\n\n      const updateAction = <Replace>action;\n      expect(updateAction.old.element).to.not.have.attribute('qchg');\n      expect(updateAction.new.element).to.have.attribute('qchg', 'false');\n    });\n\n    it('updates the TrgOps element with changed dupd attribute', async () => {\n      const input = <WizardSelect>inputs[2];\n      input.nullSwitch?.click();\n      input.maybeValue = 'true';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.be.calledOnce;\n\n      const action = actionEvent.args[0][0].detail.action;\n      expect(action).to.satisfy(isReplace);\n\n      const updateAction = <Replace>action;\n      expect(updateAction.old.element).to.not.have.attribute('dupd');\n      expect(updateAction.new.element).to.have.attribute('dupd', 'true');\n    });\n\n    it('updates the TrgOps element with changed gi attribute', async () => {\n      const input = <WizardSelect>inputs[4];\n      input.maybeValue = 'true';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.be.calledOnce;\n\n      const action = actionEvent.args[0][0].detail.action;\n      expect(action).to.satisfy(isReplace);\n\n      const updateAction = <Replace>action;\n      expect(updateAction.old.element).to.have.attribute('gi', 'false');\n      expect(updateAction.new.element).to.have.attribute('gi', 'true');\n    });\n\n    it('updates the TrgOps element with changed period attribute', async () => {\n      const input = <WizardSelect>inputs[3];\n      input.nullSwitch?.click();\n      input.maybeValue = 'true';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n      expect(actionEvent).to.be.calledOnce;\n\n      const action = actionEvent.args[0][0].detail.action;\n      expect(action).to.satisfy(isReplace);\n\n      const updateAction = <Replace>action;\n      expect(updateAction.old.element).to.not.have.attribute('period');\n      expect(updateAction.new.element).to.have.attribute('period', 'true');\n    });\n  });\n});\n"]}