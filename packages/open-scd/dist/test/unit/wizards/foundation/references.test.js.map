{"version":3,"file":"references.test.js","sourceRoot":"","sources":["../../../../../test/unit/wizards/foundation/references.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  expectDeleteAction,\n  expectReplaceAction,\n  expectUpdateTextValue,\n  fetchDoc,\n} from '../test-support.js';\nimport {\n  deleteReferences,\n  updateReferences,\n} from '../../../../src/wizards/foundation/references.js';\nimport { expect } from '@open-wc/testing';\n\ndescribe('Update reference for ', () => {\n  let doc: XMLDocument;\n\n  describe('element without Reference Info (ConductingEquipment)', () => {\n    const ceName = 'QA1';\n    let conductingEquipment: Element;\n\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/ied.scd');\n      conductingEquipment = doc.querySelector(\n        `ConductingEquipment[name=\"${ceName}\"]`\n      )!;\n    });\n\n    it('will update no references to ConductingEquipment', function () {\n      const updateActions = updateReferences(\n        conductingEquipment,\n        ceName,\n        'Other CE Name'\n      );\n      expect(updateActions.length).to.equal(0);\n    });\n\n    it('will delete no references to ConductingEquipment', function () {\n      const updateActions = deleteReferences(conductingEquipment);\n      expect(updateActions.length).to.equal(0);\n    });\n  });\n\n  describe('element without Name Attribute (Value)', () => {\n    let connectAP: Element;\n\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/ied.scd');\n      connectAP = doc.querySelector(\n        `ConnectedAP[iedName=\"IED1\"][apName=\"P1\"]`\n      )!;\n    });\n\n    it('will update no references to ConnectedAP', function () {\n      const updateActions = updateReferences(connectAP, null, 'New Name');\n      expect(updateActions.length).to.equal(0);\n    });\n\n    it('will delete no references to ConnectedAP', function () {\n      const updateActions = deleteReferences(connectAP);\n      expect(updateActions.length).to.equal(0);\n    });\n  });\n\n  describe('IED update Val element', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/iedRename.scd');\n    });\n  });\n\n  describe('IED', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/ied.scd');\n    });\n\n    it('will update all references to IED IED1', function () {\n      const oldName = 'IED1';\n      const newName = 'NewIED1';\n      const ied = doc.querySelector(`IED[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(ied, oldName, newName);\n      expect(updateActions.length).to.equal(9);\n\n      expectReplaceAction(\n        updateActions[0],\n        'Association',\n        'iedName',\n        oldName,\n        newName\n      );\n      expectReplaceAction(\n        updateActions[1],\n        'ClientLN',\n        'iedName',\n        oldName,\n        newName\n      );\n    });\n\n    it('will update all references to IED IED2', function () {\n      const oldName = 'IED2';\n      const newName = 'NewIED2';\n      const ied = doc.querySelector(`IED[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(ied, oldName, newName);\n      expect(updateActions.length).to.equal(8);\n\n      expectUpdateTextValue(updateActions[6], 'GSEControl', oldName, newName);\n      expectUpdateTextValue(\n        updateActions[7],\n        'SampledValueControl',\n        oldName,\n        newName\n      );\n    });\n\n    it('will update all references to IED Pub and checks for correct Val elements', function () {\n      const oldName = 'Pub';\n      const newName = 'NewPub';\n      const ied = doc.querySelector(`IED[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(ied, oldName, newName);\n      expect(updateActions.length).to.equal(5);\n\n      const input1 = updateActions[0].old.element;\n      const input2 = updateActions[1].old.element;\n      const input3 = updateActions[2].old.element;\n      const input4 = updateActions[3].old.element;\n\n      expect(input1.getAttribute('srcCBName')).to.be.equal(null);\n      expect(input2.getAttribute('srcCBName')).to.be.equal(null);\n      expect(input3.getAttribute('srcCBName')).to.be.equal('cb1');\n      expect(input4.getAttribute('srcCBName')).to.be.equal('cb1');\n\n      const valSuffix3 =\n        input3.getAttribute('srcLDInst') +\n        '/' +\n        input3.getAttribute('srcLNClass') +\n        '.' +\n        input3.getAttribute('srcCBName');\n\n      expectUpdateTextValue(\n        updateActions[4],\n        'DAI',\n        oldName + valSuffix3,\n        newName + valSuffix3\n      );\n    });\n\n    it('will delete all references to IED IED1', function () {\n      const name = 'IED1';\n      const ied = doc.querySelector(`IED[name=\"${name}\"]`)!;\n\n      const updateActions = deleteReferences(ied);\n      expect(updateActions.length).to.equal(9);\n\n      expectDeleteAction(updateActions[0], 'Association');\n      expectDeleteAction(updateActions[1], 'ClientLN');\n    });\n\n    it('will delete all references to IED IED2', async function () {\n      const name = 'IED2';\n      const ied = doc.querySelector(`IED[name=\"${name}\"]`)!;\n\n      const updateActions = deleteReferences(ied);\n      expect(updateActions.length).to.equal(8);\n\n      expectDeleteAction(updateActions[6], 'GSEControl');\n      expectDeleteAction(updateActions[7], 'SampledValueControl');\n    });\n  });\n\n  describe('Substation', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/references.scd');\n    });\n\n    it('will update all references to Substation AA1', function () {\n      const oldName = 'AA1';\n      const newName = 'NewAA1';\n      const substation = doc.querySelector(`Substation[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(substation, oldName, newName);\n      expect(updateActions.length).to.equal(48);\n\n      expectReplaceAction(\n        updateActions[0],\n        'Terminal',\n        'substationName',\n        oldName,\n        newName\n      );\n    });\n  });\n\n  describe('VoltageLevel', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/references.scd');\n    });\n\n    it('will update all references to VoltageLevel \"J1\"', function () {\n      const oldName = 'J1';\n      const newName = 'J1 UPD';\n      const voltageLevel = doc.querySelector(\n        `VoltageLevel[name=\"${oldName}\"]`\n      )!;\n\n      const updateActions = updateReferences(voltageLevel, oldName, newName);\n      expect(updateActions.length).to.equal(48);\n\n      expectReplaceAction(\n        updateActions[0],\n        'Terminal',\n        'voltageLevelName',\n        oldName,\n        newName\n      );\n    });\n  });\n\n  describe('Bay', () => {\n    beforeEach(async () => {\n      doc = await fetchDoc('/test/testfiles/wizards/references.scd');\n    });\n\n    it('will update all references to BusBar \"BusBar A\"', function () {\n      const oldName = 'BusBar A';\n      const newName = 'BusBar A UPD';\n      const bay = doc.querySelector(`Bay[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(bay, oldName, newName);\n      expect(updateActions.length).to.equal(6);\n\n      expectReplaceAction(\n        updateActions[0],\n        'Terminal',\n        'bayName',\n        oldName,\n        newName\n      );\n    });\n\n    it('will update all references to Bay \"Bay A\"', function () {\n      const oldName = 'Bay A';\n      const newName = 'Bay A UPD';\n      const bay = doc.querySelector(`Bay[name=\"${oldName}\"]`)!;\n\n      const updateActions = updateReferences(bay, oldName, newName);\n      expect(updateActions.length).to.equal(8);\n\n      expectReplaceAction(\n        updateActions[0],\n        'Terminal',\n        'bayName',\n        oldName,\n        newName\n      );\n    });\n  });\n});\n"]}