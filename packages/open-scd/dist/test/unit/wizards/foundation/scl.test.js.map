{"version":3,"file":"scl.test.js","sourceRoot":"","sources":["../../../../../test/unit/wizards/foundation/scl.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport {\n  uniqueAppId,\n  uniqueMacAddress,\n} from '../../../../src/wizards/foundation/scl.js';\n\nfunction incrementMac(oldMac: string): string {\n  const mac = oldMac.split('-').join('');\n  //destination MAC in IEC61850 always starts with 01:0C:CD:...\n  const newMac = '0' + (parseInt(mac, 16) + 1).toString(16).toUpperCase();\n  return newMac.match(/.{1,2}/g)!.join('-');\n}\n\nfunction createMacs(serviceType: 'SMV' | 'GOOSE'): string[] {\n  const maxMac =\n    serviceType === 'GOOSE' ? '01-0C-CD-01-01-FF' : '01-0C-CD-04-01-FF';\n  const startMac =\n    serviceType === 'GOOSE' ? '01-0C-CD-01-00-00' : '01-0C-CD-04-00-00';\n\n  const macs: string[] = [];\n\n  let mac = startMac;\n  while (mac !== maxMac) {\n    macs.push(mac);\n    mac = incrementMac(mac);\n  }\n\n  macs.push(maxMac);\n\n  return macs;\n}\n\nfunction incrementAppId(oldAppId: string): string {\n  return (parseInt(oldAppId, 16) + 1)\n    .toString(16)\n    .toUpperCase()\n    .padStart(4, '0');\n}\n\nfunction createAppIds(): string[] {\n  const maxAppId = 'FFFF';\n  const startAppId = '0001';\n\n  const appIds: string[] = [];\n\n  let appId = startAppId;\n  while (appId !== maxAppId) {\n    appIds.push(appId);\n    appId = incrementAppId(appId);\n  }\n\n  appIds.push(maxAppId);\n\n  return appIds;\n}\n\ndescribe('SCL specific functions', () => {\n  describe('define a function to get unique GSE MAC addres', () => {\n    describe('with all MAC address in use', () => {\n      const gseElementString = `<SubNetwork>${createMacs('GOOSE').map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return null with no unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'GOOSE')).to.be.null);\n    });\n\n    describe('with available MAC address', () => {\n      const macs = createMacs('GOOSE');\n      macs.splice(4, 5);\n      const gseElementString = `<SubNetwork>${macs.map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return the first available first unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'GOOSE')).to.equal('01-0C-CD-01-00-04'));\n    });\n\n    describe('with one available MAC address', () => {\n      const macs = createMacs('GOOSE');\n      macs.pop();\n      const gseElementString = `<SubNetwork>${macs.map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return the first availablefirst unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'GOOSE')).to.equal('01-0C-CD-01-01-FF'));\n    });\n  });\n\n  describe('define a function to get unique SMV MAC addres', () => {\n    describe('with all MAC address in use', () => {\n      const smvElementString = `<SubNetwork>${createMacs('SMV').map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        smvElementString,\n        'application/xml'\n      );\n\n      it('return null with no unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'SMV')).to.be.null);\n    });\n\n    describe('with available MAC address', () => {\n      const macs = createMacs('SMV');\n      macs.splice(10, 5);\n      const gseElementString = `<SubNetwork>${macs.map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return the first available unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'SMV')).to.equal('01-0C-CD-04-00-0A'));\n    });\n\n    describe('with one available MAC address', () => {\n      const macs = createMacs('SMV');\n      macs.pop();\n      const gseElementString = `<SubNetwork>${macs.map(\n        mac =>\n          `<ConnectedAP><Address><P type=\"MAC-Address\">${mac}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return the first available unique MAC', () =>\n        expect(uniqueMacAddress(doc, 'SMV')).to.equal('01-0C-CD-04-01-FF'));\n    });\n  });\n\n  describe('define a function to get unique APPID', () => {\n    describe('with available APPID', () => {\n      const appIds = createAppIds();\n      appIds.splice(10, 5);\n      const gseElementString = `<SubNetwork>${appIds.map(\n        appId =>\n          `<ConnectedAP><Address><P type=\"APPID\">${appId}</P></Address></ConnectedAP>`\n      )}</SubNetwork>`;\n      const doc = new DOMParser().parseFromString(\n        gseElementString,\n        'application/xml'\n      );\n\n      it('return the first available unique APPID', () => {\n        expect(uniqueAppId(doc)).to.equal('000B');\n      });\n    });\n  });\n});\n"]}