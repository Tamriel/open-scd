{"version":3,"file":"finder.test.js","sourceRoot":"","sources":["../../../../../test/unit/wizards/foundation/finder.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { getDataModelChildren } from '../../../../src/wizards/foundation/finder.js';\n\ndescribe('data model nodes child getter', () => {\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/wizards/fcda.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('returns empty array for invalid tag', () => {\n    const parent = doc.querySelector('IED')!;\n    expect(getDataModelChildren(parent)).to.be.empty;\n  });\n\n  it('returns direct children for a Server', () => {\n    const parent = doc.querySelector('Server')!;\n    expect(getDataModelChildren(parent)).to.not.be.empty;\n    expect(getDataModelChildren(parent)[0]).to.have.attribute(\n      'inst',\n      'CircuitBreaker_CB1'\n    );\n    expect(getDataModelChildren(parent)[1]).to.have.attribute('inst', 'Meas');\n  });\n\n  it('returns direct children for a LDevice', () => {\n    const parent = doc.querySelector('LDevice')!;\n    expect(getDataModelChildren(parent)).to.not.be.empty;\n    expect(getDataModelChildren(parent)[0]).to.have.attribute(\n      'lnClass',\n      'LLN0'\n    );\n    expect(getDataModelChildren(parent)[1]).to.have.attribute(\n      'lnClass',\n      'XCBR'\n    );\n  });\n\n  it('returns referenced children for LN/LN0', () => {\n    const parent = doc.querySelector('LN')!;\n    expect(getDataModelChildren(parent).length).to.equal(1);\n    expect(getDataModelChildren(parent)[0]).to.have.attribute('name', 'Pos');\n  });\n\n  it('returns referenced children for DO', () => {\n    const parent = doc.querySelector('DO')!;\n    expect(getDataModelChildren(parent).length).to.equal(3);\n    expect(getDataModelChildren(parent)[0]).to.have.attribute('name', 'stVal');\n    expect(getDataModelChildren(parent)[1]).to.have.attribute('name', 'q');\n    expect(getDataModelChildren(parent)[2]).to.have.attribute('name', 't');\n  });\n\n  it('returns referenced children for SDO', () => {\n    const parent = doc.querySelector('SDO')!;\n    expect(getDataModelChildren(parent).length).to.equal(1);\n    expect(getDataModelChildren(parent)[0]).to.have.attribute('name', 'cVal');\n  });\n\n  it('returns referenced children for DA', () => {\n    const parent = doc.querySelector(\n      'DOType[id=\"OpenSCD_CMV_db_i_MagAndAng\"]>DA'\n    )!;\n    expect(getDataModelChildren(parent).length).to.equal(1);\n    expect(getDataModelChildren(parent)[0]).to.have.attribute('name', 'mag');\n  });\n\n  it('returns referenced children for BDA', () => {\n    const parent = doc.querySelector(\n      'DAType[id=\"OpenSCD_Vector_I_w_Ang\"]>BDA'\n    )!;\n    expect(getDataModelChildren(parent).length).to.equal(1);\n    expect(getDataModelChildren(parent)[0]).to.have.attribute('name', 'i');\n  });\n\n  it('returns empty array for leaf node', () => {\n    const parent = doc.querySelector('DOType[id=\"Dummy.XCBR1.Pos\"]>DA')!;\n    expect(getDataModelChildren(parent)).to.be.empty;\n  });\n});\n"]}