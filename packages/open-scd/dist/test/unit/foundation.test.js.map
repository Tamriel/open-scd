{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../test/unit/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport {\n  cloneElement,\n  ComplexAction,\n  depth,\n  EditorAction,\n  find,\n  findControlBlocks,\n  findFCDAs,\n  getChildElementsByTagName,\n  getNameAttribute,\n  getReference,\n  getSclSchemaVersion,\n  getUniqueElementName,\n  identity,\n  invert,\n  isCreate,\n  isDelete,\n  isMove,\n  isReplace,\n  isSame,\n  isSimple,\n  newActionEvent,\n  newLnInstGenerator,\n  newPendingStateEvent,\n  newWizardEvent,\n  SCLTag,\n  tags,\n  minAvailableLogicalNodeInstance,\n} from '../../src/foundation.js';\n\nimport { MockAction } from './mock-actions.js';\n\ndescribe('foundation', () => {\n  let scl1: Element;\n  let scl2: Element;\n\n  let substation: Element;\n  let ied: Element;\n  let communication: Element;\n  let bay: Element;\n  let privateSection: Element;\n  let privateElement: Element;\n  let publicElement: Element;\n\n  beforeEach(async () => {\n    scl1 = (\n      await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'))\n    ).documentElement;\n    scl2 = (\n      await fetch('/test/testfiles/valid2003.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'))\n    ).documentElement;\n\n    substation = scl1.querySelector('Substation')!;\n    ied = scl1.querySelector('IED')!;\n    communication = scl1.querySelector('Communication')!;\n    bay = scl1.querySelector('Bay')!;\n    privateSection = bay.querySelector('Private')!;\n    privateElement = privateSection.firstElementChild!;\n    publicElement = bay.children.item(1)!;\n  });\n  describe('EditorAction', () => {\n    it('consists of four disjunct simple types', () => {\n      expect(MockAction.cre).to.satisfy(isCreate);\n      expect(MockAction.del).to.satisfy(isDelete);\n      expect(MockAction.mov).to.satisfy(isMove);\n      expect(MockAction.upd).to.satisfy(isReplace);\n      isReplace;\n      expect(MockAction.cre).to.satisfy(isSimple);\n      expect(MockAction.del).to.satisfy(isSimple);\n      expect(MockAction.mov).to.satisfy(isSimple);\n      expect(MockAction.upd).to.satisfy(isSimple);\n\n      expect(MockAction.cre).to.not.satisfy(isDelete);\n      expect(MockAction.cre).to.not.satisfy(isMove);\n      expect(MockAction.cre).to.not.satisfy(isReplace);\n      isReplace;\n      expect(MockAction.del).to.not.satisfy(isCreate);\n      expect(MockAction.del).to.not.satisfy(isMove);\n      expect(MockAction.del).to.not.satisfy(isReplace);\n      isReplace;\n      expect(MockAction.mov).to.not.satisfy(isCreate);\n      expect(MockAction.mov).to.not.satisfy(isDelete);\n      expect(MockAction.mov).to.not.satisfy(isReplace);\n      isReplace;\n      expect(MockAction.upd).to.not.satisfy(isCreate);\n      expect(MockAction.upd).to.not.satisfy(isDelete);\n      expect(MockAction.upd).to.not.satisfy(isMove);\n    });\n\n    it('consists of one complex type', () => {\n      expect(MockAction.complex).to.not.satisfy(isSimple);\n\n      expect(MockAction.complex).to.not.satisfy(isCreate);\n      expect(MockAction.complex).to.not.satisfy(isDelete);\n      expect(MockAction.complex).to.not.satisfy(isMove);\n      expect(MockAction.complex).to.not.satisfy(isReplace);\n    });\n    isReplace;\n\n    describe('invert', () => {\n      it('turns Create into Delete and vice versa', () => {\n        expect(invert(MockAction.cre)).to.satisfy(isDelete);\n        expect(invert(MockAction.del)).to.satisfy(isCreate);\n      });\n\n      it('turns Move into Move', () => {\n        expect(invert(MockAction.mov)).to.satisfy(isMove);\n      });\n\n      it('turns Update into Update', () => {\n        expect(invert(MockAction.upd)).to.satisfy(isReplace);\n      });\n      isReplace;\n\n      it('inverts components of complex actions in reverse order', () => {\n        const action = MockAction.complex;\n        const inverse = <ComplexAction>invert(action);\n\n        action.actions.forEach((element, index) =>\n          expect(\n            inverse.actions[inverse.actions.length - index - 1]\n          ).to.deep.equal(invert(action.actions[index]))\n        );\n      });\n\n      it('throws on unknown Action type', () => {\n        const invalid = <EditorAction>(<unknown>'Not an action!');\n        expect(() => invert(invalid)).to.throw();\n      });\n    });\n\n    describe('ActionEvent', () => {\n      it('bears an EditorAction in its detail', () => {\n        expect(newActionEvent(MockAction.mov))\n          .property('detail')\n          .property('action')\n          .to.satisfy(isMove);\n      });\n    });\n  });\n\n  describe('PendingStateEvent', () => {\n    it('bears a void Promise in its detail', () => {\n      expect(newPendingStateEvent(Promise.resolve()))\n        .property('detail')\n        .property('promise')\n        .to.be.a('promise');\n    });\n  });\n\n  describe('WizardEvent', () => {\n    it('optionally bears a wizard factory in its detail', () => {\n      expect(newWizardEvent()).property('detail').property('wizard').to.be.null;\n      expect(newWizardEvent([]))\n        .property('detail')\n        .property('wizard')\n        .to.be.a('function');\n    });\n\n    it('allows to dispatch dynamic wizards', () => {\n      expect(newWizardEvent(() => []))\n        .property('detail')\n        .property('wizard')\n        .to.be.a('function');\n    });\n  });\n\n  describe('isSame', () => {\n    it('is true of any two SCL Elements', () => {\n      expect(isSame(scl1, scl2)).to.be.true;\n    });\n\n    it('is true of any two Header Elements', () => {\n      expect(\n        isSame(scl1.querySelector('Header')!, scl2.querySelector('Header')!)\n      ).to.be.true;\n    });\n\n    it('is true of any two Communication Elements', () => {\n      expect(\n        isSame(\n          scl1.querySelector('Communication')!,\n          scl2.querySelector('Communication')!\n        )\n      ).to.be.true;\n    });\n\n    it('is true of any two DataTypeTemplates Elements', () => {\n      expect(\n        isSame(\n          scl1.querySelector('DataTypeTemplates')!,\n          scl2.querySelector('DataTypeTemplates')!\n        )\n      ).to.be.true;\n    });\n\n    it('is true of identical private sections', () => {\n      expect(isSame(privateSection, privateSection)).to.be.true;\n    });\n\n    it('is false of any private elements', () => {\n      expect(isSame(privateElement, privateElement)).to.be.false;\n      expect(isSame(privateElement, publicElement)).to.be.false;\n    });\n\n    it('is true of any one Element and itself', () => {\n      expect(isSame(substation, substation)).to.be.true;\n      expect(isSame(ied, ied)).to.be.true;\n      expect(isSame(bay, bay)).to.be.true;\n      expect(isSame(communication, communication)).to.be.true;\n    });\n\n    it('is false of elements with different tagNames', () => {\n      expect(isSame(substation, ied)).to.be.false;\n      expect(isSame(substation, bay)).to.be.false;\n      expect(isSame(bay, communication)).to.be.false;\n      expect(isSame(communication, ied)).to.be.false;\n    });\n\n    it('is true of elements with equal nonempty id attributes', () => {\n      expect(\n        isSame(\n          scl1.querySelector('LNodeType[id=\"Dummy.LLN0\"]')!,\n          scl2.querySelector('LNodeType[id=\"Dummy.LLN0\"]')!\n        )\n      ).to.be.true;\n    });\n\n    it('is false of elements with unequal id attributes', () => {\n      expect(\n        isSame(\n          scl1.querySelector('LNodeType[id=\"Dummy.LLN0\"]')!,\n          scl1.querySelector('LNodeType[id=\"Dummy.LLN0.two\"]')!\n        )\n      ).to.be.false;\n    });\n  });\n  describe('identity', () => {\n    it('returns NaN for any private element', () => {\n      expect(identity(privateElement)).to.be.NaN;\n    });\n    it('returns parent identity for singleton identities', () => {\n      Object.entries(tags).forEach(([tag, data]) => {\n        if (data.identity !== tags['Server'].identity) return;\n\n        const element = scl1.querySelector(tag);\n        if (element) {\n          expect(identity(element)).to.equal(identity(element.parentElement!));\n        }\n      });\n    });\n    it('returns valid identity for special identities', () => {\n      const expectations: Partial<Record<string, string>> = {\n        Hitem: '1\\t143',\n        Terminal: 'AA1>E1>COUPLING_BAY>QC11>AA1/E1/COUPLING_BAY/L2',\n        'Bay>LNode': 'IED2 CBSW/ LPHD 1',\n        KDC: 'IED1>IED1 P1',\n        LDevice: 'IED1>>CircuitBreaker_CB1',\n        IEDName:\n          'IED1>>CircuitBreaker_CB1>GCB>IED2 P1 CircuitBreaker_CB1/ CSWI 1',\n        FCDA: 'IED1>>CircuitBreaker_CB1>GooseDataSet1>CircuitBreaker_CB1/ XCBR 1.Pos stVal (ST)',\n        ExtRef: 'IED1>>Disconnectors>DC CSWI 1>intAddr[0]',\n        'ExtRef:not([iedName])': 'IED1>>Disconnectors>DC CSWI 1>stVal-t[0]',\n        LN: 'IED1>>CircuitBreaker_CB1> XCBR 1',\n        ClientLN:\n          'IED2>>CBSW> XSWI 1>ReportCb>IED1 P1 CircuitBreaker_CB1/ XCBR 1',\n        DAI: 'IED1>>CircuitBreaker_CB1> XCBR 1>Pos>ctlModel',\n        SDI: 'IED1>>CircuitBreaker_CB1>CB CSWI 2>Pos>pulseConfig',\n        Val: 'IED1>>CircuitBreaker_CB1> XCBR 1>Pos>ctlModel> 0',\n        ConnectedAP: 'IED1 P1',\n        GSE: 'CircuitBreaker_CB1 GCB',\n        SMV: 'MU01 MSVCB01',\n        PhysConn: 'IED1 P1>RedConn',\n        P: 'IED1 P1>IP [0]',\n        EnumVal: '#Dummy_ctlModel>0',\n        ProtNs: '#Dummy.LLN0.Mod.SBOw>8-MMS\\tIEC 61850-8-1:2003',\n      };\n\n      Object.keys(expectations).forEach(key => {\n        const element = scl1.querySelector(key);\n        expect(identity(element!)).to.equal(expectations[key]);\n      });\n    });\n    it('returns valid identity for naming identities', () => {\n      Object.entries(tags).forEach(([tag, data]) => {\n        if (data.identity !== tags['Substation'].identity) return;\n\n        const element = scl1.querySelector(tag);\n        if (element) {\n          expect(identity(element)).to.equal(\n            identity(element.parentElement!) +\n              (element.parentElement?.tagName === 'SCL' ? '' : '>') +\n              element.getAttribute('name')\n          );\n        }\n      });\n    });\n  });\n\n  describe('find', () => {\n    it('returns null for the identity NaN', () => {\n      const element = scl1.querySelector('Assotiation');\n      const ident = identity(element!);\n      expect(find(scl1, 'Assotiation', ident)).to.equal(null);\n    });\n    it('returns correct element for all tags except IEDName and ProtNs', () => {\n      Object.keys(tags).forEach(tag => {\n        const element = Array.from(scl1.querySelectorAll(tag)).filter(\n          item => !item.closest('Private')\n        )[0];\n        if (element && tag !== 'IEDName' && tag !== 'ProtNs')\n          expect(element)\n            .to.satisfy((element: Element) =>\n              element.isEqualNode(find(scl1, tag, identity(element)))\n            )\n            .and.to.equal(find(scl1, tag, identity(element)));\n      });\n    });\n  });\n\n  describe('getReference', () => {\n    it('returns correct reference for already existing elements', () => {\n      Object.keys(tags)\n        .filter(tag => tags[<SCLTag>tag].children.length > 0)\n        .forEach(tag => {\n          const element = Array.from(scl1.querySelectorAll(tag)).filter(\n            item => !item.closest('Private')\n          )[0];\n\n          if (\n            !element ||\n            element.tagName === 'Services' ||\n            element.tagName === 'SettingGroups'\n          )\n            return;\n\n          const children = Array.from(element.children);\n          const childTags = new Set(children.map(child => child.tagName));\n\n          for (const childTag of childTags) {\n            expect(getReference(element, <SCLTag>childTag)).to.equal(\n              children.find(child => child.tagName === childTag)\n            );\n          }\n        });\n    });\n\n    it('returns correct reference for LNode element', () => {\n      const scl = new DOMParser().parseFromString(\n        `<Bay>\n          <Private>testprivate</Private>\n          <ConductingEquipment name=\"QA1\"></ConductingEquipment>\n        </Bay>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl, 'LNode')).to.equal(\n        scl.querySelector('ConductingEquipment')\n      );\n      const scl2 = new DOMParser().parseFromString(\n        `<Bay>\n          <Private>testprivate</Private>\n          <PowerTransformer name=\"pTrans\"></PowerTransformer>\n          <ConductingEquipment name=\"QA1\"></ConductingEquipment>\n        </Bay>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl2, 'LNode')).to.equal(\n        scl2.querySelector('PowerTransformer')\n      );\n    });\n    it('returns correct reference for Substation element', () => {\n      const scl = new DOMParser().parseFromString(\n        `<SCL>\n          <Header></Header>\n          <IED name=\"IED\"></IED>\n          <DataTypeTemplates></DataTypeTemplates>\n        </SCL>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl, 'Substation')).to.equal(\n        scl.querySelector('IED')\n      );\n    });\n    it('returns correct reference for VoltageLevel element', () => {\n      const scl = new DOMParser().parseFromString(\n        `<Substation>\n          <Private></Private>\n          <LNode></LNode>\n        </Substation>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl, 'VoltageLevel')).to.be.null;\n    });\n    it('returns correct reference for Bay element', () => {\n      const scl = new DOMParser().parseFromString(\n        `<VoltageLevel>\n          <Private></Private>\n          <Function></Function>\n        </VoltageLevel>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl, 'Bay')).to.equal(scl.querySelector('Function'));\n    });\n    it('returns correct reference for ConductingEquipment element', () => {\n      const scl = new DOMParser().parseFromString(\n        `<Bay>\n          <Private></Private>\n          <ConnectivityNode></ConnectivityNode>\n        </Bay>`,\n        'application/xml'\n      ).documentElement;\n      expect(getReference(scl, 'ConductingEquipment')).to.equal(\n        scl.querySelector('ConnectivityNode')\n      );\n    });\n  });\n\n  describe('findControlBlocks', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/comm-map.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n    it('returns an Set of controlBlocks connected to the ExtRef', () => {\n      const extRef = doc.querySelector(\n        ':root > IED[name=\"IED2\"] > AccessPoint > Server > LDevice[inst=\"CircuitBreaker_CB1\"] ExtRef'\n      )!;\n      expect(findControlBlocks(extRef).size).to.have.equal(1);\n      expect(\n        Array.from(findControlBlocks(extRef))[0].isEqualNode(\n          doc.querySelector(\n            'IED[name=\"IED1\"] LDevice[inst=\"CircuitBreaker_CB1\"] GSEControl[name=\"GCB\"]'\n          )\n        )\n      ).to.be.true;\n    });\n\n    it('returns empty Set if input not ExtRef', () => {\n      expect(findControlBlocks(doc.querySelector('LN')!).size).to.equal(0);\n    });\n\n    it('returns empty array if input is not public', () => {\n      expect(\n        findControlBlocks(doc.querySelector('Private > ExtRef')!).size\n      ).to.equal(0);\n    });\n  });\n\n  describe('getUniqueElementName', () => {\n    let parent: Element;\n    beforeEach(() => {\n      const testDoc = new DOMParser().parseFromString(\n        '<Parent>' +\n          '<Child name=\"newChild1\"/><Child name=\"newChild2\"/>' +\n          '<Child2 name=\"newChild3\"/><Child2 name=\"newChild21\"/>' +\n          '</Parent>',\n        'application/xml'\n      );\n      parent = testDoc.querySelector<Element>('Parent')!;\n    });\n\n    it('returns unique name for Child', () =>\n      expect(getUniqueElementName(parent, 'Child')).to.equal('newChild3'));\n\n    it('returns unique name for Child2', () =>\n      expect(getUniqueElementName(parent, 'Child2')).to.equal('newChild22'));\n  });\n\n  describe('getNameAttribute', () => {\n    it('expect the correct value of the name attribute', () => {\n      const doElement = scl1.querySelector(\n        'LNodeType[id=\"Dummy.LLN0\"] > DO[type=\"Dummy.LLN0.Mod\"]'\n      )!;\n      expect(getNameAttribute(doElement)).to.be.equal('Mod');\n    });\n  });\n\n  describe('findFCDAs', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/comm-map.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n    it('returns an array of FCDAs connected to the ExtRef', () => {\n      const extRef = doc.querySelector(\n        ':root > IED[name=\"IED2\"] > AccessPoint > Server > LDevice[inst=\"CircuitBreaker_CB1\"] ExtRef'\n      )!;\n      expect(findFCDAs(extRef).length).to.have.equal(1);\n      expect(\n        findFCDAs(extRef)[0].isEqualNode(\n          doc.querySelector(\n            'IED[name=\"IED1\"] LDevice[inst=\"CircuitBreaker_CB1\"] ' +\n              'FCDA[ldInst=\"CircuitBreaker_CB1\"][lnClass=\"XCBR\"][doName=\"Pos\"][daName=\"stVal\"]'\n          )\n        )\n      ).to.be.true;\n    });\n\n    it('returns empty array if input not ExtRef', () => {\n      expect(findFCDAs(doc.querySelector('LN')!).length).to.equal(0);\n    });\n\n    it('returns empty array if input is not public', () => {\n      expect(findFCDAs(doc.querySelector('Private > ExtRef')!).length).to.equal(\n        0\n      );\n    });\n  });\n\n  describe('getChildElementsByTagName', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/lnodewizard.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n    it('returns a child Element array with a specific tag', () => {\n      const parent = doc.querySelector('Bay[name=\"COUPLING_BAY\"]');\n      expect(getChildElementsByTagName(parent!, 'LNode').length).to.have.equal(\n        parent?.querySelectorAll(\n          ':root > Substation > VoltageLevel > Bay[name=\"COUPLING_BAY\"] > LNode'\n        ).length\n      );\n    });\n  });\n\n  describe('cloneElement', () => {\n    let element: Element;\n    beforeEach(() => {\n      element = new DOMParser().parseFromString(\n        `<Element attr1=\"attrValue\" ></Element>`,\n        'application/xml'\n      ).documentElement;\n    });\n    it('does not copy child nodes', () => {\n      const newElement = cloneElement(element, {});\n      expect(newElement.childNodes.length).to.equal(0);\n    });\n    it('creates a newElement with specified attrs', () => {\n      const attr1 = 'newAttr1';\n      const attr2 = 'newAttr2';\n      const newElement = cloneElement(element, { attr1, attr2 });\n      expect(newElement.attributes.length).to.equal(2);\n      expect(newElement).to.have.attribute('attr2', 'newAttr2');\n    });\n    it('leaves attr untouched if not part of attrs', () => {\n      const attr2 = 'newAttr2';\n      const newElement = cloneElement(element, { attr2 });\n      expect(newElement.attributes.length).to.equal(2);\n      expect(newElement).to.have.attribute('attr1', 'attrValue');\n    });\n    it('updates existing attr if part of attrs', () => {\n      const attr1 = 'newAttr1';\n      const newElement = cloneElement(element, { attr1 });\n      expect(newElement.attributes.length).to.equal(1);\n      expect(newElement).to.have.attribute('attr1', 'newAttr1');\n    });\n    it('removes existing attr if set to null', () => {\n      const attr1 = null;\n      const attr2 = 'newAttr2';\n      const newElement = cloneElement(element, { attr1, attr2 });\n      expect(newElement.attributes.length).to.equal(1);\n      expect(newElement).to.not.have.attribute('attr1');\n    });\n  });\n\n  describe('depth', () => {\n    const circular = { a: { b: {} }, c: {} };\n    circular.a.b = circular;\n\n    const fiveDeep: unknown = [\n      'first level',\n      2,\n      {\n        a: 'second level',\n        b: 2,\n        c: [\n          'third level',\n          { a: 'fourth level', b: 2, c: { a: 'fifth level!' } },\n        ],\n      },\n      'test',\n    ];\n\n    it(\"returns the given object's or array's depth\", () =>\n      expect(depth(<Record<string, unknown>>fiveDeep)).to.equal(5));\n\n    it('returns zero if given something other than an object or array', () =>\n      expect(depth(<Record<string, unknown>>(<unknown>'test'))).to.equal(0));\n\n    it('returns Infinity if given a circularly defined object or array', () =>\n      expect(depth(circular)).to.not.be.finite);\n  });\n\n  describe('getSclSchemaVersion', () => {\n    let doc: Document;\n\n    it('when passing a SCL 2003 Document then correct edition is returned', async () => {\n      doc = await fetch('/test/testfiles/valid2003.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      expect(getSclSchemaVersion(doc)).to.be.equal('2003');\n    });\n\n    it('when passing a SCL 2007B Document then correct edition is returned', async () => {\n      doc = await fetch('/test/testfiles/valid2007B.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      expect(getSclSchemaVersion(doc)).to.be.equal('2007B');\n    });\n\n    it('when passing a SCL 2007B4 Document then correct edition is returned', async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      expect(getSclSchemaVersion(doc)).to.be.equal('2007B4');\n    });\n  });\n\n  describe('generator function for new `lnInst` attribute', () => {\n    let lnInstGenerator: (lnClass: string) => string | undefined;\n    let parent: Element;\n\n    describe('with existing unique lnInst', () => {\n      beforeEach(() => {\n        parent = new DOMParser().parseFromString(\n          `<Function name=\"someName\">\n            <LNode name=\"None\" lnClass=\"CSWI\" lnInst=\"1\"/>\n            <LNode name=\"None\" lnClass=\"XCBR\" lnInst=\"1\"/>\n            <LNode name=\"None\" lnClass=\"CILO\" lnInst=\"1\"/>\n            <LNode name=\"None\" lnClass=\"CSWI\" lnInst=\"2\"/>\n            <LNode name=\"None\" lnClass=\"PDIS\" lnInst=\"1\"/>\n            <LNode name=\"None\" lnClass=\"CSWI\" lnInst=\"5\"/>\n            <LNode name=\"None\" lnClass=\"CSWI\" lnInst=\"6\"/>\n            <LNode name=\"None\" lnClass=\"CSWI\" lnInst=\"8\"/>\n          </Function>`,\n          'application/xml'\n        ).documentElement;\n\n        lnInstGenerator = newLnInstGenerator(parent);\n      });\n\n      it('returns unique lnInst called once', () =>\n        expect(lnInstGenerator('CSWI')).to.equal('3'));\n\n      it('returns unique lnInst called several times', () => {\n        expect(lnInstGenerator('CSWI')).to.equal('3');\n        expect(lnInstGenerator('CSWI')).to.equal('4');\n        expect(lnInstGenerator('CSWI')).to.equal('7');\n        expect(lnInstGenerator('CSWI')).to.equal('9');\n      });\n\n      it('returns unique lnInst called several times', () => {\n        expect(lnInstGenerator('CSWI')).to.equal('3');\n        expect(lnInstGenerator('CSWI')).to.equal('4');\n        expect(lnInstGenerator('CSWI')).to.equal('7');\n        expect(lnInstGenerator('CSWI')).to.equal('9');\n      });\n    });\n\n    describe('with missing unique lnInst for lnClass PDIS', () => {\n      beforeEach(() => {\n        parent = new DOMParser().parseFromString(\n          `<Function name=\"someName\">\n          </Function>`,\n          'application/xml'\n        ).documentElement;\n\n        for (let i = 1; i <= 99; i++) {\n          const lNode = new DOMParser().parseFromString(\n            `<LNode iedName=\"None\" lnClass=\"PDIS\" lnInst=\"${i}\" />`,\n            'application/xml'\n          ).documentElement;\n          parent.appendChild(lNode);\n        }\n\n        lnInstGenerator = newLnInstGenerator(parent);\n      });\n\n      it('return undefined for the lnClass PDIS', () =>\n        expect(lnInstGenerator('PDIS')).to.be.undefined);\n\n      it('return unique lnInst for another lnClass', () =>\n        expect(lnInstGenerator('CSWI')).to.equal('1'));\n    });\n  });\n\n  describe('minAvailableLogicalNodeInstance', () => {\n    it('generates the minimum number not present yet as an \"inst\" attribute in a set of elements', () => {\n      const docFragment: Document = new DOMParser().parseFromString(\n        `\n        <LDevice inst=\"SV_supervision\">\n          <LN0 lnClass=\"LLN0\" lnType=\"Dummy.LLN0\"/>\n          <LN lnClass=\"LSVS\" inst=\"1\" lnType=\"Dummy.LSVS1\">\n            <DOI name=\"SvCBRef\">\n              <DAI name=\"setSrcRef\">\n                <Val>SMV_PublisherCurrentTransformer/LLN0.currrentOnly</Val>\n              </DAI>\n            </DOI>\n          </LN>\n          <LN lnClass=\"LSVS\" inst=\"3\" lnType=\"Dummy.LSVS1\"/>\n          <LN lnClass=\"LSVS\" inst=\"4\" lnType=\"Dummy.LSVS1\"/>\n        </LDevice>\n      `,\n        'application/xml'\n      );\n      let lnElements = Array.from(\n        docFragment.querySelectorAll('LN[lnClass=\"LSVS\"]')\n      );\n      expect(minAvailableLogicalNodeInstance(lnElements)).to.be.equal('2');\n      lnElements = Array.from(\n        docFragment.querySelectorAll('LN[lnClass=\"LLN0\"]')\n      );\n      expect(minAvailableLogicalNodeInstance(lnElements)).to.be.equal('1');\n    });\n  });\n});\n"]}