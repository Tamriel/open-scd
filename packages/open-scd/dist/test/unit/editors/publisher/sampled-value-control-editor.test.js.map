{"version":3,"file":"sampled-value-control-editor.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/publisher/sampled-value-control-editor.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,mEAAmE,CAAC;AAE3E,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;IACtD,IAAI,GAAgB,CAAC;IACrB,IAAI,QAAqB,CAAC;IAC1B,IAAI,OAAkC,CAAC;IAEvC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,GAAG,GAAG,MAAM,KAAK,CAAC,iCAAiC,CAAC;aACjD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAExE,QAAQ,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC;aAClD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAExE,OAAO,GAAG,MAAM,OAAO,CACrB,IAAI,CAAA;eACK,GAAG;uCACqB,CAClC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE,CACxD,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;IAEtD,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,IAAI,MAAmB,CAAC;QAExB,UAAU,CAAC,KAAK,IAAI,EAAE;YAElB,OAAO,CAAC,UAAU,EAAE,aAAa,CAC/B,sDAAsD,CAEzD,CAAC,KAAK,EAAE,CAAC;YAEV,MAAM,OAAO,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE,CAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;QAEtD,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;YAC1C,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;gBAC3B,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC;gBACrB,MAAM,OAAO,CAAC,cAAc,CAAC;gBAE7B,MAAM,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE,CAC/C,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,KAAK,CAClD,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAC5C,CAAC,CAAC;YAEL,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE,CACxC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;YAC1C,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,OAAO,CAAC,2BAA2B,EAAE,aAAa,EAAE,WAAW,CAC7D,OAAO,CAAC,2BAA2B,CACpC,CAAC;gBACF,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;gBAChC,MAAM,OAAO,CAAC,cAAc,CAAC;gBAE7B,MAAM,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE,CACvC,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;YAE/D,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE,CAC/B,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC7C,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,OAAO,CAAC,GAAG,GAAG,QAAQ,CAAC;gBACvB,MAAM,OAAO,CAAC,aAAa,EAAE,CAAC;gBAE9B,MAAM,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE,CAC/C,MAAM,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;YAE/D,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE,CACxC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../../src/editors/publisher/sampled-value-control-editor.js';\nimport { SampledValueControlEditor } from '../../../../src/editors/publisher/sampled-value-control-editor.js';\nimport { cloneTestDoc } from './foundation.test.js';\n\ndescribe('Editor for SampledValueControl element', () => {\n  let doc: XMLDocument;\n  let otherDoc: XMLDocument;\n  let element: SampledValueControlEditor;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/valid2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    otherDoc = await fetch('/test/testfiles/history.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    element = await fixture(\n      html`<sampled-value-control-editor\n        .doc=${doc}\n      ></sampled-value-control-editor>`\n    );\n  });\n\n  it('initially looks like the latest snapshot', async () =>\n    await expect(element).shadowDom.to.equalSnapshot());\n\n  describe('with a selected SampledValueControl', () => {\n    let newDoc: XMLDocument;\n\n    beforeEach(async () => {\n      (\n        element.shadowRoot?.querySelector(\n          '.selectionlist > mwc-list-item:not([noninteractive])'\n        ) as HTMLElement\n      ).click();\n\n      await element.updateComplete;\n    });\n\n    it('looks like the latest snapshot', async () =>\n      await expect(element).shadowDom.to.equalSnapshot());\n\n    describe('on selected element update', () => {\n      beforeEach(async () => {\n        newDoc = cloneTestDoc(doc);\n        element.doc = newDoc;\n        await element.updateComplete;\n\n        await element.selectionList.requestUpdate();\n      });\n\n      it('does not reset selected Element', async () =>\n        expect(element.selectedSampledValueControl).to.equal(\n          newDoc.querySelector('SampledValueControl')\n        ));\n\n      it('does not reset selection', async () =>\n        expect(element.selectionList.selected).to.not.be.null);\n    });\n\n    describe('on selected element remove', () => {\n      beforeEach(async () => {\n        element.selectedSampledValueControl?.parentElement?.removeChild(\n          element.selectedSampledValueControl\n        );\n        element.doc = cloneTestDoc(doc);\n        await element.updateComplete;\n\n        await element.selectionList.requestUpdate();\n      });\n\n      it('resets selected Element', async () =>\n        expect(element.selectedSampledValueControl).to.be.undefined);\n\n      it('reset selection', async () =>\n        expect(element.selectionList.selected).to.be.null);\n    });\n\n    describe('and other doc property update', () => {\n      beforeEach(async () => {\n        element.doc = otherDoc;\n        await element.requestUpdate();\n\n        await element.selectionList.requestUpdate();\n      });\n\n      it('does not reset selected Element', async () =>\n        expect(element.selectedSampledValueControl).to.be.undefined);\n\n      it('does not reset selection', async () =>\n        expect(element.selectionList.selected).to.be.null);\n    });\n  });\n});\n"]}