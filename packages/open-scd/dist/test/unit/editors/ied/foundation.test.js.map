{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/ied/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  findDOTypeElement,\n  findElement,\n  findLogicaNodeElement,\n  getInstanceDAElement,\n  getValueElements,\n} from '../../../../src/editors/ied/foundation.js';\nimport { getAncestorsFromDA, getAncestorsFromDO } from './test-support.js';\n\ndescribe('ied-foundation', async () => {\n  let validSCL: Document;\n\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/editors/iedEditorWithIEDs.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('findElement', async () => {\n    let daElement: Element;\n    let ancestors: Element[];\n\n    beforeEach(async () => {\n      daElement = validSCL.querySelector(\n        'DataTypeTemplates > DOType[id=\"Dummy.XCBR1.Pos\"] > DA[name=\"ctlModel\"]'\n      )!;\n      ancestors = getAncestorsFromDA(daElement, 'Dummy.XCBR1.Pos');\n    });\n\n    it('will find IED Element in list', async () => {\n      const iedElement = findElement(ancestors, 'IED');\n      expect(iedElement).to.be.not.null;\n      expect(iedElement?.tagName).to.be.equal('IED');\n    });\n\n    it('unknown element not found in list', async () => {\n      const iedElement = findElement(ancestors, 'Unknown');\n      expect(iedElement).to.be.null;\n    });\n  });\n\n  describe('findLogicalNodeElement', async () => {\n    it('will find LN Element in list', async () => {\n      const daElement = validSCL.querySelector(\n        'DataTypeTemplates > DOType[id=\"Dummy.XCBR1.Pos\"] > DA[name=\"ctlModel\"]'\n      )!;\n      const ancestors = getAncestorsFromDA(daElement, 'Dummy.XCBR1.Pos');\n\n      const lnElement = findLogicaNodeElement(ancestors);\n      expect(lnElement).to.be.not.null;\n      expect(lnElement?.tagName).to.be.equal('LN');\n    });\n\n    it('will find LN0 Element in list', async () => {\n      const doElement = validSCL.querySelector(\n        'DataTypeTemplates > LNodeType[id=\"Dummy.LLN0\"] > DO[name=\"Mod\"]'\n      )!;\n      const ancestors = getAncestorsFromDO(doElement);\n\n      const lnElement = findLogicaNodeElement(ancestors);\n      expect(lnElement).to.be.not.null;\n      expect(lnElement?.tagName).to.be.equal('LN0');\n    });\n\n    it('will not find LN(0) Element in list', async () => {\n      const lnElement = findLogicaNodeElement([]);\n      expect(lnElement).to.be.null;\n    });\n  });\n\n  describe('findDOTypeElement', async () => {\n    it('will find DOType Element', async () => {\n      const doElement = validSCL.querySelector(\n        'DataTypeTemplates > LNodeType[id=\"Dummy.LLN0\"] > DO[name=\"Mod\"]'\n      )!;\n\n      const doTypeElement = findDOTypeElement(doElement);\n      expect(doTypeElement).to.be.not.null;\n      expect(doTypeElement?.tagName).to.be.equal('DOType');\n      expect(doTypeElement?.getAttribute('cdc')).to.be.equal('ENC');\n    });\n\n    it('will not find DOType Element and return null', async () => {\n      const doElement = validSCL.querySelector(\n        'DataTypeTemplates > LNodeType[id=\"Dummy.LLN0\"] > DO[name=\"Mod\"]'\n      )!;\n      doElement.removeAttribute('type');\n\n      const doTypeElement = findDOTypeElement(doElement);\n      expect(doTypeElement).to.be.null;\n    });\n  });\n\n  describe('getValueElements', async () => {\n    let daiElement1: Element;\n    let daiElement2: Element;\n\n    beforeEach(async () => {\n      daiElement1 = validSCL.querySelector(\n        ':root > IED[name=\"IED2\"] > AccessPoint[name=\"P1\"] > Server > ' +\n          'LDevice[inst=\"CircuitBreaker_CB1\"] > LN[lnType=\"Dummy.XCBR1\"] > DOI[name=\"Pos\"]> DAI[name=\"ctlModel\"]'\n      )!;\n\n      daiElement2 = validSCL.querySelector(\n        ':root > IED[name=\"IED3\"] > AccessPoint[name=\"P1\"] > Server > ' +\n          'LDevice[inst=\"MU01\"] > LN[lnType=\"DummyTCTR\"] > DOI[name=\"Amp\"] > SDI[name=\"sVC\"] > DAI[name=\"scaleFactor\"]'\n      )!;\n    });\n\n    it('returns all instantiated Val elements', async () => {\n      const value = getValueElements(daiElement2);\n      expect(value.length).to.equal(2);\n      expect(value[0].textContent).to.be.equal('0.001');\n      expect(value[1].textContent).to.be.equal('0.005');\n    });\n\n    it('returns one instantiated Val elements', async () => {\n      const value = getValueElements(daiElement1)[0];\n      expect(value).to.be.not.null;\n      expect(value?.textContent).to.be.equal('status-only');\n    });\n\n    it('returns empty array in case no Val i instantiated', async () => {\n      daiElement1.querySelector('Val')!.remove();\n\n      const iedElement = getValueElements(daiElement1);\n      expect(iedElement.length).to.equal(0);\n    });\n  });\n\n  describe('getInstanceDAElement', () => {\n    it('will return a DAI when a DA has a valid instance element.', async () => {\n      const doi = validSCL.querySelector(\n        'IED[name=\"IED1\"] > AccessPoint[name=\"P1\"] > Server > ' +\n          'LDevice[inst=\"CircuitBreaker_CB1\"] > LN[lnClass=\"CSWI\"] > DOI[name=\"Pos\"]'\n      );\n      const da = validSCL.querySelector(\n        'DataTypeTemplates > DOType[id=\"Dummy.CSWI.Pos2\"] > DA[name=\"ctlModel\"]'\n      );\n\n      const dai = getInstanceDAElement(doi, da!);\n      expect(dai).to.not.be.null;\n      expect(dai?.tagName).to.eql('DAI');\n      expect(dai?.getAttribute('name')).to.eql('ctlModel');\n    });\n\n    it(\"will returns null if there's no DAI available within a DOI.\", async () => {\n      const doi = validSCL.querySelector(\n        'IED[name=\"IED1\"] > AccessPoint[name=\"P1\"] > Server > ' +\n          'LDevice[inst=\"CircuitBreaker_CB1\"] > LN[lnClass=\"CSWI\"] > DOI[name=\"Pos\"]'\n      );\n      const da = validSCL.querySelector(\n        'DataTypeTemplates > DOType[id=\"Dummy.CSWI.Pos2\"] > DA[name=\"d\"]'\n      );\n\n      const dai = getInstanceDAElement(doi, da!);\n      expect(dai).to.be.null;\n    });\n\n    it('will returns null if no root DOI is available.', async () => {\n      const da = validSCL.querySelector(\n        'DataTypeTemplates > DOType[id=\"Dummy.CSWI.Pos2\"] > DA[name=\"d\"]'\n      );\n\n      const dai = getInstanceDAElement(null, da!);\n      expect(dai).to.be.null;\n    });\n  });\n});\n"]}