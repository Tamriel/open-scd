{"version":3,"file":"ied-container.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/ied/ied-container.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,8CAA8C,CAAC;AAGtD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,OAAqB,CAAC;IAC1B,IAAI,QAAqB,CAAC;IAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,QAAQ,GAAG,MAAM,KAAK,CAAC,+CAA+C,CAAC;aACpE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAExE,OAAO,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA;iBACf,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC;sBACrC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,QAAQ,GAAG,MAAM,KAAK,CAAC,8BAA8B,CAAC;aACnD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAExE,OAAO,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA;iBACf,QAAQ,CAAC,aAAa,CAAC,0BAA0B,CAAC;sBAC7C,CAAC,CAAC;QAEpB,MAAM,CACJ,OAAO,CAAC,UAAW,CAAC,aAAa,CAAC,kCAAkC,CAAC,CACtE,CAAC,EAAE,CAAC,KAAK,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../../src/editors/ied/ied-container.js';\nimport { IedContainer } from '../../../../src/editors/ied/ied-container.js';\n\ndescribe('ied-container', () => {\n  let element: IedContainer;\n  let validSCL: XMLDocument;\n\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/editors/iedEditorWithIEDs.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    element = await fixture(html`<ied-container\n      .element=${validSCL.querySelector('IED[name=\"IED1\"]')}\n    ></ied-container>`);\n  });\n\n  it('looks like the latest snapshot', async () => {\n    await expect(element).shadowDom.to.equalSnapshot();\n  });\n\n  it('Should show services icon when Services are available', async () => {\n    validSCL = await fetch('/test/testfiles/Services.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    element = await fixture(html`<ied-container\n      .element=${validSCL.querySelector('IED[name=\"WithServices\"]')}\n    ></ied-container>`);\n\n    expect(\n      element.shadowRoot!.querySelector(\"mwc-icon-button[icon='settings']\")\n    ).to.exist;\n  });\n});\n"]}