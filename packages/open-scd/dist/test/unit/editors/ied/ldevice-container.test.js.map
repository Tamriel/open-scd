{"version":3,"file":"ldevice-container.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/ied/ldevice-container.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport { initializeNsdoc, Nsdoc } from '../../../../src/foundation/nsdoc.js';\n\nimport '../../../../src/editors/ied/ldevice-container.js';\n\nimport { LDeviceContainer } from '../../../../src/editors/ied/ldevice-container.js';\n\nimport { getLNClasses } from './test-support.js';\n\ndescribe('ldevice-container', () => {\n  let doc: XMLDocument;\n  let nsdoc: Nsdoc;\n\n  let lDeviceElement: Element;\n  let element: LDeviceContainer;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/editors/iedEditorWithIEDs.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    nsdoc = await initializeNsdoc();\n  });\n\n  describe('LDevice Element with LN Elements', () => {\n    let selectedLNClasses: string[] = [];\n\n    beforeEach(async () => {\n      lDeviceElement = doc.querySelector('LDevice[inst=\"Disconnectors\"]')!;\n    });\n\n    describe('and all LN Elements displayed', () => {\n      beforeEach(async () => {\n        selectedLNClasses = getLNClasses(lDeviceElement);\n\n        element = await fixture(html` <ldevice-container\n          .element=\"${lDeviceElement}\"\n          .nsdoc=\"${nsdoc}\"\n          .selectedLNClasses=\"${selectedLNClasses}\"\n        ></ldevice-container>`);\n      });\n\n      it('expect the correct number of LN Elements returned', () => {\n        expect(element['lnElements'].length).to.be.equal(9);\n      });\n\n      it('looks like the latest snapshot', async () => {\n        await expect(element).shadowDom.to.equalSnapshot();\n      });\n    });\n\n    describe('and some LN Elements displayed', () => {\n      beforeEach(async () => {\n        selectedLNClasses = getLNClasses(lDeviceElement).slice(0, 2);\n\n        element = await fixture(html` <ldevice-container\n          .element=\"${lDeviceElement}\"\n          .nsdoc=\"${nsdoc}\"\n          .selectedLNClasses=\"${selectedLNClasses}\"\n        ></ldevice-container>`);\n      });\n\n      it('expect the correct number of LN Elements returned', () => {\n        expect(element['lnElements'].length).to.be.equal(4);\n      });\n\n      it('looks like the latest snapshot', async () => {\n        await expect(element).shadowDom.to.equalSnapshot();\n      });\n    });\n\n    describe('and no LN Elements displayed', () => {\n      beforeEach(async () => {\n        selectedLNClasses = [];\n\n        element = await fixture(html` <ldevice-container\n          .element=\"${lDeviceElement}\"\n          .nsdoc=\"${nsdoc}\"\n          .selectedLNClasses=\"${selectedLNClasses}\"\n        ></ldevice-container>`);\n      });\n\n      it('expect the correct number of LN Elements returned', () => {\n        expect(element['lnElements'].length).to.be.equal(0);\n      });\n\n      it('looks like the latest snapshot', async () => {\n        await expect(element).shadowDom.to.equalSnapshot();\n      });\n    });\n  });\n\n  describe('LDevice Element without LN Element', () => {\n    beforeEach(async () => {\n      lDeviceElement = doc.querySelector('LDevice[inst=\"EmptyLDevice\"]')!;\n\n      element = await fixture(html`<ldevice-container\n        .element=${lDeviceElement}\n        .nsdoc=\"${nsdoc}\"\n        .selectedLNClasses=\"${getLNClasses(lDeviceElement)}\"\n      ></ldevice-container>`);\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n});\n"]}