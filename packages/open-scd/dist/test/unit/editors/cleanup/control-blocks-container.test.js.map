{"version":3,"file":"control-blocks-container.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/cleanup/control-blocks-container.test.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\nimport { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../../../src/editors/cleanup/control-blocks-container.js';\nimport { CleanupControlBlocks } from '../../../../src/editors/cleanup/control-blocks-container.js';\n\nimport { ListItem } from '@material/mwc-list/mwc-list-item.js';\n\ndescribe('Cleanup: Control Blocks Container', () => {\n  let element: CleanupControlBlocks;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<cleanup-control-blocks></cleanup-control-blocks>`\n    );\n  });\n\n  describe('without a doc loaded', () => {\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('With a test file loaded', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/cleanup.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element = await fixture(\n        html`<cleanup-control-blocks .doc=\"${doc}\"></cleanup-control-blocks>`\n      );\n      await element.updateComplete;\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n\n    it('creates correct number of checkboxes for the expected unreferenced control blocks', () => {\n      expect(Array.from(element.unreferencedControls!).length).to.equal(5);\n    });\n\n    it('has the remove button disabled by default', () => {\n      expect(element.cleanButton).to.have.property('disabled', true);\n    });\n\n    it('has the remove button enabled after selecting an item', async () => {\n      const firstCheckListItem = element.cleanupListItems![0];\n      await (<ListItem>firstCheckListItem!).click();\n      await element.cleanupList!.layout();\n      expect(element.cleanButton).to.have.property('disabled', false);\n    });\n\n    it('after selecting and deselecting an item the remove button is disabled', async () => {\n      const firstCheckListItem = element.cleanupListItems![0];\n      await (<ListItem>firstCheckListItem!).click();\n      await element.cleanupList!.layout();\n      await (<ListItem>firstCheckListItem!).click();\n      await element.cleanupList!.layout();\n      expect(element.cleanButton).to.have.property('disabled', true);\n    });\n\n    it('after clicking select all the button is not disabled', async () => {\n      const checkbox = element\n        .shadowRoot!.querySelector('.cleanupList')!\n        .shadowRoot!.querySelector('.checkall')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await element.cleanupList?.layout();\n      expect(element.cleanButton).to.have.property('disabled', false);\n    });\n\n    /* This test is currently failing and has been commented out \n    TODO: Investigate further. It appears that a filtered list will not\n    unselect all if there are hidden items. */\n    // it('after clicking select all twice the button is disabled', async () => {\n    //   const checkbox = element\n    //     .shadowRoot!.querySelector('.cleanupList')!\n    //     .shadowRoot!.querySelector('.checkall')!\n    //     .querySelector('mwc-checkbox')!;\n    //   await checkbox.click();\n    //   await element.cleanupList?.layout();\n    //   await checkbox.click();\n    //   await element.cleanupList?.layout();\n    //   expect(element.cleanButton).to.have.property('disabled', true);\n    // });\n  });\n});\n"]}