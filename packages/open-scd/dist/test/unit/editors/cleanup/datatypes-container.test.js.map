{"version":3,"file":"datatypes-container.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/cleanup/datatypes-container.test.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,2BAA2B,CAAC;AAGnC,OAAO,wDAAwD,CAAC;AAKhE,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,IAAI,OAAyB,CAAC;IAC9B,IAAI,MAAmB,CAAC;IAExB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,GAAG,MAAM,OAAO,CACpB,IAAI,CAAA;;wBAEc,CACnB,CAAC;QACF,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;QACnC,MAAM,MAAM,CAAC,cAAc,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,GAAa,CAAC;QAClB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,GAAG,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC;iBAC7C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YACxE,MAAM,GAAG,MAAM,OAAO,CACpB,IAAI,CAAA;uCAC2B,GAAG;0BAChB,CACnB,CAAC;YACF,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;YACnC,MAAM,OAAO,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;YACtF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,qBAAsB,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,kBAAkB,GAAG,OAAO,CAAC,gBAAiB,CAAC,CAAC,CAAC,CAAC;YACxD,MAAiB,kBAAoB,CAAC,KAAK,EAAE,CAAC;YAC9C,MAAM,OAAO,CAAC,WAAY,CAAC,MAAM,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["'use strict';\nimport { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../../mock-open-scd.js';\nimport { MockOpenSCD } from '../../../mock-open-scd.js';\n\nimport '../../../../src/editors/cleanup/datatypes-container.js';\nimport { CleanupDataTypes } from '../../../../src/editors/cleanup/datatypes-container.js';\n\nimport { ListItem } from '@material/mwc-list/mwc-list-item.js';\n\ndescribe('Cleanup: DataTypes Container', () => {\n  let element: CleanupDataTypes;\n  let parent: MockOpenSCD;\n\n  beforeEach(async () => {\n    parent = await fixture(\n      html`<mock-open-scd\n        ><cleanup-data-types></cleanup-data-types\n      ></mock-open-scd>`\n    );\n    element = parent.getActivePlugin();\n    await parent.updateComplete;\n  });\n\n  describe('without a doc loaded', () => {\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('With a test file loaded', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/cleanup.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = await fixture(\n        html`<mock-open-scd\n          ><cleanup-data-types .doc=\"${doc}\"></cleanup-data-types\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await element.updateComplete;\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n\n    it('creates correct number of checkboxes for the expected unreferenced datatypes', () => {\n      expect(Array.from(element.unreferencedDataTypes!).length).to.equal(9);\n    });\n\n    it('has the remove button disabled by default', () => {\n      expect(element.cleanButton).to.have.property('disabled', true);\n    });\n\n    it('has the remove button enabled after selecting an item', async () => {\n      const firstCheckListItem = element.cleanupListItems![0];\n      await (<ListItem>firstCheckListItem!).click();\n      await element.cleanupList!.layout();\n      expect(element.cleanButton).to.have.property('disabled', false);\n    });\n  });\n});\n"]}