{"version":3,"file":"datasets-container.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/cleanup/datasets-container.test.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,2BAA2B,CAAC;AAGnC,OAAO,uDAAuD,CAAC;AAG/D,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,OAAwB,CAAC;IAC7B,IAAI,MAAmB,CAAC;IACxB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,GAAG,MAAM,OAAO,CACpB,IAAI,CAAA,sEAAsE,CAC3E,CAAC;QAEF,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;QAEnC,MAAM,MAAM,CAAC,cAAc,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,GAAa,CAAC;QAClB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,GAAG,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC;iBAC7C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YACxE,MAAM,GAAG,MAAM,OAAO,CACpB,IAAI,CAAA;qCACyB,GAAG;0BACd,CACnB,CAAC;YACF,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;YACnC,MAAM,MAAM,CAAC,cAAc,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;YACrF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,YAAa,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,kBAAkB,GAAgB,OAAO,CAAC,YAAa,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,kBAAkB,CAAC,KAAK,EAAE,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,kBAAkB,GAAgB,OAAO,CAAC,YAAa,CAAC,CAAC,CAAC,CAAC;YACjE,MAAM,kBAAkB,CAAC,KAAK,EAAE,CAAC;YACjC,MAAM,kBAAkB,CAAC,KAAK,EAAE,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,qDAAqD;YACrD,MAAM,QAAQ,GAAG,OAAO;iBACrB,UAAW,CAAC,aAAa,CAAC,cAAc,CAAE;iBAC1C,UAAW,CAAC,aAAa,CAAC,WAAW,CAAE;iBACvC,aAAa,CAAC,cAAc,CAAE,CAAC;YAClC,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;YACvB,MAAM,OAAO,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,QAAQ,GAAG,OAAO;iBACrB,UAAW,CAAC,aAAa,CAAC,cAAc,CAAE;iBAC1C,UAAW,CAAC,aAAa,CAAC,WAAW,CAAE;iBACvC,aAAa,CAAC,cAAc,CAAE,CAAC;YAClC,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;YACvB,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;YACvB,MAAM,OAAO,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["'use strict';\nimport { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../../mock-open-scd.js';\nimport { MockOpenSCD } from '../../../mock-open-scd.js';\n\nimport '../../../../src/editors/cleanup/datasets-container.js';\nimport { CleanupDatasets } from '../../../../src/editors/cleanup/datasets-container.js';\n\ndescribe('Cleanup: Datasets Container', () => {\n  let element: CleanupDatasets;\n  let parent: MockOpenSCD;\n  beforeEach(async () => {\n    parent = await fixture(\n      html`<mock-open-scd><cleanup-datasets></cleanup-datasets></mock-open-scd>`\n    );\n\n    element = parent.getActivePlugin();\n\n    await parent.updateComplete;\n  });\n\n  describe('without a doc loaded', () => {\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('with a test file loaded', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/cleanup.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = await fixture(\n        html`<mock-open-scd\n          ><cleanup-datasets .doc=\"${doc}\"></cleanup-datasets\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n\n    it('creates correct number of checkboxes for the expected unreferenced datasets', () => {\n      expect(Array.from(element.dataSetItems!).length).to.equal(2);\n    });\n\n    it('has the remove button disabled by default', () => {\n      expect(element.cleanupButton).to.have.property('disabled', true);\n    });\n\n    it('has the remove button enabled after selecting an item', async () => {\n      const firstCheckListItem: HTMLElement = element.dataSetItems![0];\n      await firstCheckListItem.click();\n      expect(element.cleanupButton).to.have.property('disabled', false);\n    });\n\n    it('after selecting and deselecting an item the remove button is disabled', async () => {\n      const firstCheckListItem: HTMLElement = element.dataSetItems![0];\n      await firstCheckListItem.click();\n      await firstCheckListItem.click();\n      expect(element.cleanupButton).to.have.property('disabled', true);\n    });\n\n    it('after clicking select all the button is not disabled', async () => {\n      // TODO: What is a more effective way to select this?\n      const checkbox = element\n        .shadowRoot!.querySelector('.dataSetList')!\n        .shadowRoot!.querySelector('.checkall')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await element.dataSetList?.layout();\n      expect(element.cleanupButton).to.have.property('disabled', false);\n    });\n\n    it('after clicking select all twice the button is disabled', async () => {\n      const checkbox = element\n        .shadowRoot!.querySelector('.dataSetList')!\n        .shadowRoot!.querySelector('.checkall')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await checkbox.click();\n      await element.dataSetList?.layout();\n      expect(element.cleanupButton).to.have.property('disabled', true);\n    });\n  });\n});\n"]}