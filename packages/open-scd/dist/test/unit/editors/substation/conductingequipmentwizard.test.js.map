{"version":3,"file":"conductingequipmentwizard.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/substation/conductingequipmentwizard.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,OAAO,EAAE,MAAM,gDAAgD,CAAC;AAEzE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,QAAQ,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAClF,IAAI,GAAa,CAAC;QAClB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,GAAG,GAAG,MAAM,KAAK,CAAC,+CAA+C,CAAC;iBAC/D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8GAA8G,EAAE,GAAG,EAAE;YACtH,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sHAAsH,EAAE,GAAG,EAAE;YAC9H,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kIAAkI,EAAE,GAAG,EAAE;YAC1I,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6GAA6G,EAAE,GAAG,EAAE;YACrH,MAAM,CACJ,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAE,CAAC,CACjE,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { typeStr } from '../../../../src/wizards/conductingequipment.js';\n\ndescribe('conductingequipmentwizard', () => {\n  describe('recognises an earth switch in the conducting equipment wizard that', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/conductingequipmentwizard.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('has the first terminal grounded', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES239\"]')!)\n      ).to.equal('ERS');\n    });\n\n    it('has the second terminal grounded', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES249\"]')!)\n      ).to.equal('ERS');\n    });\n\n    it('has no grounded connectivityNodes but has an XSWI LN and DOI:SWTyp > DAI:stVal defining an \"Earthing Switch\"', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES259\"]')!)\n      ).to.equal('ERS');\n    });\n\n    it('has no grounded connectivityNodes but has an XSWI LN and LNodeType > DOType > DA:stVal defining an \"Earthing Switch\"', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES269\"]')!)\n      ).to.equal('ERS');\n    });\n\n    it('has no grounded connectivityNodes but has an XSWI LN within SubEquipment and DOI:SWTyp > DAI:stVal defining an \"Earthing Switch\"', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES279\"]')!)\n      ).to.equal('ERS');\n    });\n\n    it('has no grounded connectivityNodes but has an IED with name \"None\" and a definition in the DataTypeTemplates', () => {\n      expect(\n        typeStr(doc.querySelector('ConductingEquipment[name=\"ES289\"]')!)\n      ).to.equal('ERS');\n    });\n  });\n});\n"]}