{"version":3,"file":"lnodewizard.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/substation/lnodewizard.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AAE5D,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,IAAI,GAAa,CAAC;QAClB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,GAAG,GAAG,MAAM,KAAK,CAAC,iCAAiC,CAAC;iBACjD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAC1E,MAAM,CACJ,QAAQ,CACN,GAAG,CAAC,aAAa,CAAC,0BAA0B,CAAE,EAC9C,GAAG,CAAC,aAAa,CACf,sEAAsE,CACtE,CACH,CACF,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,CACJ,QAAQ,CACN,GAAG,CAAC,aAAa,CAAC,0BAA0B,CAAE,EAC9C,GAAG,CAAC,aAAa,CACf,sEAAsE,CACtE,CACH,CACF,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;YACrF,MAAM,CACJ,QAAQ,CACN,GAAG,CAAC,aAAa,CAAC,0BAA0B,CAAE,EAC9C,GAAG,CAAC,aAAa,CAAC,6CAA6C,CAAE,CAClE,CACF,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { getLNode } from '../../../../src/wizards/lnode.js';\n\ndescribe('lnodewizard', () => {\n  describe('defines a getLNode function that', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/lnodewizard.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('returns LNode on existing lnode references in the parent element', () => {\n      expect(\n        getLNode(\n          doc.querySelector('Bay[name=\"COUPLING_BAY\"]')!,\n          doc.querySelector(\n            'IED[name=\"IED2\"] LDevice[inst=\"CBSW\"] > LN[lnClass=\"XSWI\"][inst=\"3\"]'\n          )!\n        )\n      ).to.not.be.null;\n    });\n\n    it('returns LNode with missing or empty prefix in LN', () => {\n      expect(\n        getLNode(\n          doc.querySelector('Bay[name=\"COUPLING_BAY\"]')!,\n          doc.querySelector(\n            'IED[name=\"IED2\"] LDevice[inst=\"CBSW\"] > LN[lnClass=\"LPHD\"][inst=\"1\"]'\n          )!\n        )\n      ).to.not.be.null;\n    });\n\n    it('returns LNode with missing or empty prefix and missing or empty inst in LN0', () => {\n      expect(\n        getLNode(\n          doc.querySelector('Bay[name=\"COUPLING_BAY\"]')!,\n          doc.querySelector('IED[name=\"IED2\"] LDevice[inst=\"CBSW\"] > LN0')!\n        )\n      ).to.not.be.null;\n    });\n  });\n});\n"]}