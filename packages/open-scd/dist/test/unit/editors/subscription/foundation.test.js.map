{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/subscription/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  createExtRefElement,\n  getExistingSupervision,\n  getFirstSubscribedExtRef,\n  instantiatedSupervisionsCount,\n  updateExtRefElement,\n} from '../../../../src/editors/subscription/foundation.js';\n\nimport { identity } from '../../../../src/foundation.js';\n\ndescribe('foundation', () => {\n  let doc: XMLDocument;\n\n  describe('when using SCL Edition 2003 (1)', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/LaterBindingSMV2003.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('when creating a ExtRef Element for a Sampled Value Control then correct attributes are filled', () => {\n      const controlElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"voltageOnly\"]'\n      );\n      const fcdaElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] DataSet[name=\"voltageOnlysDataSet\"] ' +\n          '> FCDA[ldInst=\"VoltageTransformer\"][prefix=\"L3\"][lnClass=\"TVTR\"][lnInst=\"1\"][doName=\"VolSv\"][daName=\"q\"][fc=\"MX\"]'\n      );\n\n      const newExtRefElement = createExtRefElement(\n        controlElement!,\n        fcdaElement!\n      );\n\n      expect(newExtRefElement).to.be.not.null;\n      expect(newExtRefElement).to.have.attribute('iedName', 'SMV_Publisher');\n      expect(newExtRefElement).to.not.have.attribute('serviceType');\n      expect(newExtRefElement).to.have.attribute(\n        'ldInst',\n        'VoltageTransformer'\n      );\n      expect(newExtRefElement).to.have.attribute('lnClass', 'TVTR');\n      expect(newExtRefElement).to.have.attribute('lnInst', '1');\n      expect(newExtRefElement).to.have.attribute('prefix', 'L3');\n      expect(newExtRefElement).to.have.attribute('doName', 'VolSv');\n      expect(newExtRefElement).to.have.attribute('daName', 'q');\n      expect(newExtRefElement).to.not.have.attribute('srcLDInst');\n      expect(newExtRefElement).to.not.have.attribute('srcPrefix');\n      expect(newExtRefElement).to.not.have.attribute('srcLNClass');\n      expect(newExtRefElement).to.not.have.attribute('srcLNInst');\n      expect(newExtRefElement).to.not.have.attribute('srcCBName');\n    });\n\n    it('when update a ExtRef Element for a Sampled Value Control then correct attributes are copied', () => {\n      const extRefElement = doc.querySelector(\n        'IED[name=\"SMV_Subscriber\"] ExtRef[intAddr=\"VolSv;TVTR3/VolSv/q\"]'\n      );\n      const controlElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"voltageOnly\"]'\n      );\n      const fcdaElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] DataSet[name=\"voltageOnlysDataSet\"] ' +\n          '> FCDA[ldInst=\"VoltageTransformer\"][prefix=\"L3\"][lnClass=\"TVTR\"][lnInst=\"1\"][doName=\"VolSv\"][daName=\"q\"][fc=\"MX\"]'\n      );\n\n      const clonedExtRefElement = updateExtRefElement(\n        extRefElement!,\n        controlElement!,\n        fcdaElement!\n      );\n\n      expect(clonedExtRefElement).to.be.not.equal(extRefElement);\n      expect(clonedExtRefElement).to.have.attribute('iedName', 'SMV_Publisher');\n      expect(clonedExtRefElement).to.not.have.attribute('serviceType');\n      expect(clonedExtRefElement).to.have.attribute(\n        'ldInst',\n        'VoltageTransformer'\n      );\n      expect(clonedExtRefElement).to.have.attribute('lnClass', 'TVTR');\n      expect(clonedExtRefElement).to.have.attribute('lnInst', '1');\n      expect(clonedExtRefElement).to.have.attribute('prefix', 'L3');\n      expect(clonedExtRefElement).to.have.attribute('doName', 'VolSv');\n      expect(clonedExtRefElement).to.have.attribute('daName', 'q');\n      expect(clonedExtRefElement).to.not.have.attribute('srcLDInst');\n      expect(clonedExtRefElement).to.not.have.attribute('srcPrefix');\n      expect(clonedExtRefElement).to.not.have.attribute('srcLNClass');\n      expect(clonedExtRefElement).to.not.have.attribute('srcLNInst');\n      expect(clonedExtRefElement).to.not.have.attribute('srcCBName');\n    });\n  });\n\n  describe('when using SCL Edition 2007B4 (2.1)', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/LaterBindingSMV2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('when creating a ExtRef Element for a Sampled Value Control then correct attributes are filled', () => {\n      const controlElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"voltageOnly\"]'\n      );\n      const fcdaElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] DataSet[name=\"voltageOnlysDataSet\"] ' +\n          '> FCDA[ldInst=\"VoltageTransformer\"][prefix=\"L3\"][lnClass=\"TVTR\"][lnInst=\"1\"][doName=\"VolSv\"][daName=\"q\"][fc=\"MX\"]'\n      );\n\n      const newExtRefElement = createExtRefElement(\n        controlElement!,\n        fcdaElement!\n      );\n\n      expect(newExtRefElement).to.be.not.null;\n      expect(newExtRefElement).to.have.attribute('iedName', 'SMV_Publisher');\n      expect(newExtRefElement).to.have.attribute('serviceType', 'SMV');\n      expect(newExtRefElement).to.have.attribute(\n        'ldInst',\n        'VoltageTransformer'\n      );\n      expect(newExtRefElement).to.have.attribute('lnClass', 'TVTR');\n      expect(newExtRefElement).to.have.attribute('lnInst', '1');\n      expect(newExtRefElement).to.have.attribute('prefix', 'L3');\n      expect(newExtRefElement).to.have.attribute('doName', 'VolSv');\n      expect(newExtRefElement).to.have.attribute('daName', 'q');\n      expect(newExtRefElement).to.have.attribute(\n        'srcLDInst',\n        'CurrentTransformer'\n      );\n      expect(newExtRefElement).to.have.attribute('srcPrefix', '');\n      expect(newExtRefElement).to.have.attribute('srcLNClass', 'LLN0');\n      expect(newExtRefElement).to.not.have.attribute('srcLNInst');\n      expect(newExtRefElement).to.have.attribute('srcCBName', 'voltageOnly');\n    });\n\n    it('when update a ExtRef Element for a Sampled Value Control then correct attributes are copied', () => {\n      const extRefElement = doc.querySelector(\n        'IED[name=\"SMV_Subscriber\"] ExtRef[intAddr=\"VolSv;TVTR3/VolSv/q\"]'\n      );\n      const controlElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"voltageOnly\"]'\n      );\n      const fcdaElement = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] DataSet[name=\"voltageOnlysDataSet\"] ' +\n          '> FCDA[ldInst=\"VoltageTransformer\"][prefix=\"L3\"][lnClass=\"TVTR\"][lnInst=\"1\"][doName=\"VolSv\"][daName=\"q\"][fc=\"MX\"]'\n      );\n\n      const clonedExtRefElement = updateExtRefElement(\n        extRefElement!,\n        controlElement!,\n        fcdaElement!\n      );\n\n      expect(clonedExtRefElement).to.be.not.equal(extRefElement);\n      expect(clonedExtRefElement).to.have.attribute('iedName', 'SMV_Publisher');\n      expect(clonedExtRefElement).to.have.attribute('serviceType', 'SMV');\n      expect(clonedExtRefElement).to.have.attribute(\n        'ldInst',\n        'VoltageTransformer'\n      );\n      expect(clonedExtRefElement).to.have.attribute('lnClass', 'TVTR');\n      expect(clonedExtRefElement).to.have.attribute('lnInst', '1');\n      expect(clonedExtRefElement).to.have.attribute('prefix', 'L3');\n      expect(clonedExtRefElement).to.have.attribute('doName', 'VolSv');\n      expect(clonedExtRefElement).to.have.attribute('daName', 'q');\n      expect(clonedExtRefElement).to.have.attribute(\n        'srcLDInst',\n        'CurrentTransformer'\n      );\n      expect(clonedExtRefElement).to.have.attribute('srcPrefix', '');\n      expect(clonedExtRefElement).to.have.attribute('srcLNClass', 'LLN0');\n      expect(clonedExtRefElement).to.not.have.attribute('srcLNInst');\n      expect(clonedExtRefElement).to.have.attribute('srcCBName', 'voltageOnly');\n    });\n  });\n\n  describe('when using SCL Edition 2007B4 with message binding and Sampled Values', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/MessageBindingSMV2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('correctly locates the first ExtRef associated with a message', () => {\n      const publishedControlBlock = doc.querySelector(\n        'IED[name=\"IED3\"] SampledValueControl[name=\"MSVCB01\"]'\n      );\n      const subscribingIed = doc.querySelector('IED[name=\"IED1\"]');\n\n      const firstExtRef = getFirstSubscribedExtRef(\n        publishedControlBlock!,\n        subscribingIed!\n      );\n\n      expect(identity(firstExtRef)).to.be.equal(\n        'IED1>>CircuitBreaker_CB1>SMV:MSVCB01 MU01/ LLN0  IED3 MU01/I01A TCTR 1 Amp instMag.i'\n      );\n    });\n\n    it('correctly identifies an LSVS supervision element', () => {\n      const publishedControlBlock = doc.querySelector(\n        'IED[name=\"IED3\"] SampledValueControl[name=\"MSVCB01\"]'\n      );\n      const subscribingIed = doc.querySelector('IED[name=\"IED1\"]');\n      const firstExtRef = getFirstSubscribedExtRef(\n        publishedControlBlock!,\n        subscribingIed!\n      );\n      const supLN = getExistingSupervision(firstExtRef);\n      expect(identity(supLN)).to.be.equal('IED1>>Disconnectors> LSVS 1');\n    });\n  });\n\n  describe('when using SCL Edition 2007B4 with later binding, SV and LSVS', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/LaterBindingSMV-LSVS.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('correctly identifies the existing number of supervision instances', () => {\n      const controlBlock = doc.querySelector(\n        'IED[name=\"SMV_Publisher4\"] SampledValueControl[name=\"voltageOnly\"]'\n      )!;\n      const subscriberIED = doc.querySelector('IED[name=\"SMV_Subscriber2\"]')!;\n      const count = instantiatedSupervisionsCount(subscriberIED, controlBlock);\n      expect(count).to.equal(1);\n    });\n  });\n\n  describe('when using SCL Edition 2007B4 with message binding and GOOSE', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/MessageBindingGOOSE2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('correctly locates the first ExtRef associated with a message', () => {\n      const publishedControlBlock = doc.querySelector(\n        'IED[name=\"IED2\"] GSEControl[name=\"GCB\"]'\n      );\n      const subscribingIed = doc.querySelector('IED[name=\"IED1\"]');\n\n      const firstExtRef = getFirstSubscribedExtRef(\n        publishedControlBlock!,\n        subscribingIed!\n      );\n\n      expect(identity(firstExtRef)).to.be.equal(\n        'IED1>>Disconnectors>DC CSWI 1>GOOSE:GCB CBSW/ LLN0  IED2 CBSW/ XSWI 2 Pos stVal'\n      );\n    });\n\n    it('correctly identifies an LGOS supervision element', () => {\n      const publishedControlBlock = doc.querySelector(\n        'IED[name=\"IED2\"] GSEControl[name=\"GCB\"]'\n      );\n      const subscribingIed = doc.querySelector('IED[name=\"IED1\"]');\n\n      const firstExtRef = getFirstSubscribedExtRef(\n        publishedControlBlock!,\n        subscribingIed!\n      );\n\n      const supLN = getExistingSupervision(firstExtRef);\n      expect(identity(supLN)).to.be.equal('IED1>>CircuitBreaker_CB1> LGOS 1');\n    });\n  });\n\n  describe('when using SCL Edition 2007B4 with later binding, GOOSE and LGOS', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/editors/LaterBindingGOOSE-LGOS.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('correctly identifies the existing number of supervision instances', () => {\n      const controlBlock = doc.querySelector(\n        'IED[name=\"GOOSE_Publisher2\"] GSEControl[name=\"GOOSE1\"]'\n      )!;\n\n      const subscriberIED = doc.querySelector('IED[name=\"GOOSE_Subscriber3\"]')!;\n      const count = instantiatedSupervisionsCount(subscriberIED, controlBlock);\n      expect(count).to.equal(0);\n    });\n  });\n});\n"]}