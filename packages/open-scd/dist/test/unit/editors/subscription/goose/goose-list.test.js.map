{"version":3,"file":"goose-list.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/subscription/goose/goose-list.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, fixture, expect } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport '../../../../../src/editors/subscription/goose/goose-list.js';\nimport { GooseList } from '../../../../../src/editors/subscription/goose/goose-list.js';\n\ndescribe('goose-list', () => {\n  let element: GooseList;\n  let validSCL: XMLDocument;\n\n  let selectEvent: SinonSpy;\n\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/valid2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    selectEvent = spy();\n    window.addEventListener('goose-select', selectEvent);\n\n    element = await fixture(html`<goose-list .doc=${validSCL}></goose-list>`);\n  });\n\n  it('looks like the latest snapshot with a document loaded', async () => {\n    await expect(element).shadowDom.to.equalSnapshot();\n  });\n\n  it('looks like the latest snapshot without a doc loaded', async () => {\n    element = await fixture(html`<goose-list></goose-list>`);\n    await expect(element).shadowDom.to.equalSnapshot();\n  });\n\n  it('sends a newGOOSESelectEvent on first update', () => {\n    expect(selectEvent).to.have.be.calledOnce;\n    expect(selectEvent.args[0][0].detail.gseControl).to.be.undefined;\n    expect(selectEvent.args[0][0].detail.dataset).to.be.undefined;\n  });\n\n  it('triggers a newGOOSESelectEvent when a list item is clicked', () => {\n    selectEvent.resetHistory();\n\n    const listItem = Array.from(\n      element.shadowRoot?.querySelectorAll('mwc-list-item[graphic=\"large\"]') ??\n        []\n    ).filter(a => a.innerHTML.includes('GCB'))[0];\n\n    (<HTMLElement>listItem).click();\n\n    expect(selectEvent).to.have.be.calledOnce;\n    expect(selectEvent.args[0][0].detail.gseControl).to.eql(\n      validSCL.querySelector(\n        'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN0 > GSEControl[name=\"GCB\"]'\n      )\n    );\n    expect(selectEvent.args[0][0].detail.dataset).to.eql(\n      validSCL.querySelector(\n        'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN0 > DataSet[name=\"GooseDataSet1\"]'\n      )\n    );\n  });\n\n  it('triggers edit wizard when the Edit button of a GOOSE list item is pressed', async () => {\n    const wizardEvent = spy();\n    window.addEventListener('wizard', wizardEvent);\n\n    expect(\n      element.shadowRoot?.querySelector(\n        'mwc-list-item[graphic=\"large\"] > mwc-icon-button[class=\"hidden\"]'\n      )\n    ).to.not.be.null;\n\n    (<HTMLElement>(\n      element.shadowRoot?.querySelector('mwc-list-item[graphic=\"large\"]')\n    )).click();\n    await element.updateComplete;\n\n    expect(\n      element.shadowRoot?.querySelector(\n        'mwc-list-item[graphic=\"large\"] > mwc-icon-button[class=\"\"]'\n      )\n    ).to.not.be.null;\n\n    (<HTMLElement>(\n      element.shadowRoot?.querySelector(\n        'mwc-list-item[graphic=\"large\"] > mwc-icon-button'\n      )\n    )).click();\n    await element.updateComplete;\n\n    const gseControl = validSCL.querySelector(\n      'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN0 > GSEControl[name=\"GCB\"]'\n    );\n\n    expect(wizardEvent).to.have.be.calledOnce;\n    expect(wizardEvent.args[0][0].detail.wizard()[0].title).to.contain('edit');\n    expect(wizardEvent.args[0][0].detail.wizard()[0].element).to.eql(\n      gseControl\n    );\n  });\n});\n"]}