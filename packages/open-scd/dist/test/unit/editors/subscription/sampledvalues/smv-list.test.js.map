{"version":3,"file":"smv-list.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/subscription/sampledvalues/smv-list.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, fixture, expect } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport '../../../../../src/editors/subscription/sampledvalues/smv-list.js';\nimport { SmvPublisherList } from '../../../../../src/editors/subscription/sampledvalues/smv-list.js';\n\ndescribe('smv-list', () => {\n  let element: SmvPublisherList;\n  let validSCL: XMLDocument;\n\n  let selectEvent: SinonSpy;\n\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/valid2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    selectEvent = spy();\n    window.addEventListener('smv-select', selectEvent);\n\n    element = await fixture(html`<smv-list .doc=${validSCL}></smv-list>`);\n  });\n\n  it('looks like the latest snapshot with a document loaded', async () => {\n    await expect(element).shadowDom.to.equalSnapshot();\n  });\n\n  it('looks like the latest snapshot without a doc loaded', async () => {\n    element = await fixture(html`<smv-list></smv-list>`);\n    await expect(element).shadowDom.to.equalSnapshot();\n  });\n\n  it('sends a newSmvSelectEvent on first update', () => {\n    expect(selectEvent).to.have.be.calledOnce;\n    expect(selectEvent.args[0][0].detail.smvControl).to.be.undefined;\n    expect(selectEvent.args[0][0].detail.dataset).to.be.undefined;\n  });\n\n  it('triggers a newSmvSelectEvent when a list item is clicked', () => {\n    selectEvent.resetHistory();\n\n    const listItem = Array.from(\n      element.shadowRoot?.querySelectorAll('mwc-list-item[graphic=\"large\"]') ??\n        []\n    ).filter(listItem => listItem.innerHTML.includes('MSVCB01'))[0];\n\n    (<HTMLElement>listItem).click();\n\n    expect(selectEvent).to.have.be.calledOnce;\n    expect(selectEvent.args[0][0].detail.smvControl).to.eql(\n      validSCL.querySelector(\n        'IED[name=\"IED3\"] > AccessPoint > Server > LDevice > LN0 > SampledValueControl[name=\"MSVCB01\"]'\n      )\n    );\n    expect(selectEvent.args[0][0].detail.dataset).to.eql(\n      validSCL.querySelector(\n        'IED[name=\"IED3\"] > AccessPoint > Server > LDevice > LN0 > DataSet[name=\"PhsMeas1\"]'\n      )\n    );\n  });\n});\n"]}