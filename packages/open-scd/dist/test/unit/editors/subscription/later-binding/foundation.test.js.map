{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/subscription/later-binding/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  fcdaSpecification,\n  inputRestriction,\n  isSubscribedTo,\n  sameAttributeValue,\n  sameAttributeValueDiffName,\n} from '../../../../../src/editors/subscription/later-binding/foundation.js';\n\ndescribe('smv-list', () => {\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/editors/LaterBindingSMV2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('sameAttributeValue', () => {\n    let fcda: Element;\n    let extRef: Element;\n\n    beforeEach(async () => {\n      fcda = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] DataSet[name=\"currentOnlysDataSet\"] FCDA[doName=\"AmpSv\"][daName=\"instMag.i\"]'\n      )!;\n      extRef = doc.querySelector(\n        'IED[name=\"SMV_Subscriber\"] LDevice[inst=\"Overvoltage\"] ExtRef[doName=\"AmpSv\"][daName=\"instMag.i\"][srcCBName=\"currentOnly\"]'\n      )!;\n    });\n\n    it('when both element do not have the attribute then they will be the same', () => {\n      const attributeName = 'doName';\n      fcda.removeAttribute(attributeName);\n      extRef.removeAttribute(attributeName);\n\n      expect(sameAttributeValue(fcda, extRef, attributeName)).to.be.true;\n    });\n\n    it('when both element have empty values then they will be the same', () => {\n      const attributeName = 'doName';\n      fcda.setAttribute(attributeName, '');\n      extRef.setAttribute(attributeName, '');\n\n      expect(sameAttributeValue(fcda, extRef, attributeName)).to.be.true;\n    });\n\n    it('when both element have same value then they will be the same', () => {\n      const attributeName = 'doName';\n\n      expect(sameAttributeValue(fcda, extRef, attributeName)).to.be.true;\n    });\n\n    it('when element have different values then they will be not the same', () => {\n      const attributeName = 'doName';\n      extRef.setAttribute(attributeName, 'OtherValue');\n\n      expect(sameAttributeValue(fcda, extRef, attributeName)).to.be.false;\n    });\n  });\n\n  describe('sameAttributeValueDiffName', () => {\n    let control: Element;\n    let extRef: Element;\n\n    beforeEach(async () => {\n      control = doc.querySelector(\n        'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"currentOnly\"]'\n      )!;\n      extRef = doc.querySelector(\n        'IED[name=\"SMV_Subscriber\"] LDevice[inst=\"Overvoltage\"] ExtRef[doName=\"AmpSv\"][daName=\"instMag.i\"][srcCBName=\"currentOnly\"]'\n      )!;\n    });\n\n    it('when both element do not have the attribute then they will be the same', () => {\n      const leftAttributeName = 'srcCBName';\n      const rightAttributeName = 'name';\n      control.removeAttribute(leftAttributeName);\n      extRef.removeAttribute(rightAttributeName);\n\n      expect(\n        sameAttributeValueDiffName(\n          extRef,\n          leftAttributeName,\n          control,\n          rightAttributeName\n        )\n      ).to.be.true;\n    });\n\n    it('when both element have empty values then they will be the same', () => {\n      const leftAttributeName = 'srcCBName';\n      const rightAttributeName = 'name';\n      extRef.setAttribute(leftAttributeName, '');\n      control.setAttribute(rightAttributeName, '');\n\n      expect(\n        sameAttributeValueDiffName(\n          extRef,\n          leftAttributeName,\n          control,\n          rightAttributeName\n        )\n      ).to.be.true;\n    });\n\n    it('when both element have same value then they will be the same', () => {\n      const leftAttributeName = 'srcCBName';\n      const rightAttributeName = 'name';\n\n      expect(\n        sameAttributeValueDiffName(\n          extRef,\n          leftAttributeName,\n          control,\n          rightAttributeName\n        )\n      ).to.be.true;\n    });\n\n    it('when element have different values then they will be not the same', () => {\n      const leftAttributeName = 'srcCBName';\n      const rightAttributeName = 'name';\n      extRef.setAttribute(leftAttributeName, 'OtherValue');\n\n      expect(\n        sameAttributeValueDiffName(\n          extRef,\n          leftAttributeName,\n          control,\n          rightAttributeName\n        )\n      ).to.be.false;\n    });\n  });\n\n  describe('isSubscribedTo', () => {\n    const type = 'SampledValueControl';\n    let control: Element;\n    let fcda: Element;\n    let extRef: Element;\n\n    describe('(newer then 2003 schema)', () => {\n      beforeEach(async () => {\n        fcda = doc.querySelector(\n          'IED[name=\"SMV_Publisher\"] DataSet[name=\"currentOnlysDataSet\"] FCDA[doName=\"AmpSv\"][daName=\"instMag.i\"]'\n        )!;\n        control = doc.querySelector(\n          'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"currentOnly\"]'\n        )!;\n        extRef = doc.querySelector(\n          'IED[name=\"SMV_Subscriber\"] LDevice[inst=\"Overvoltage\"] ExtRef[doName=\"AmpSv\"][daName=\"instMag.i\"][srcCBName=\"currentOnly\"]'\n        )!;\n      });\n\n      it('when ExtRef and FDCA have same values then ExtRef is subscribed', () => {\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.true;\n      });\n\n      it('when ExtRef and FDCA have different IED then ExtRef is not subscribed', () => {\n        fcda.closest('IED')!.setAttribute('name', 'OtherName');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different ldInst Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('ldInst', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different prefix Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('prefix', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different lnClass Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('lnClass', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different lnInst Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('lnInst', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different doName Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('doName', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different daName Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('daName', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef has a different ServiceType Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('serviceType', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different srcLDInst Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('srcLDInst', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different scrPrefix Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('scrPrefix', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different srcLNClass Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('srcLNClass', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different srcLNInst Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('srcLNInst', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n\n      it('when ExtRef and FDCA have different srcCBName Value then ExtRef is not subscribed', () => {\n        extRef.setAttribute('srcCBName', 'OtherValue');\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.false;\n      });\n    });\n\n    describe('(2003 schema)', () => {\n      beforeEach(async () => {\n        doc = await fetch('/test/testfiles/editors/LaterBindingSMV2003.scd')\n          .then(response => response.text())\n          .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n        fcda = doc.querySelector(\n          'IED[name=\"SMV_Publisher\"] DataSet[name=\"currentOnlysDataSet\"] FCDA[doName=\"AmpSv\"][daName=\"instMag.i\"]'\n        )!;\n        control = doc.querySelector(\n          'IED[name=\"SMV_Publisher\"] SampledValueControl[name=\"currentOnly\"]'\n        )!;\n        extRef = doc.querySelector(\n          'IED[name=\"SMV_Subscriber\"] LDevice[inst=\"Overvoltage\"] ExtRef[ldInst=\"CurrentTransformer\"][doName=\"AmpSv\"][daName=\"instMag.i\"]'\n        )!;\n      });\n\n      it('when ExtRef and FDCA have same values then ExtRef is subscribed', () => {\n        expect(isSubscribedTo(type, control, fcda, extRef)).to.be.true;\n      });\n    });\n  });\n});\n\ndescribe('Input restriction', () => {\n  let doc: XMLDocument;\n  let extRef: Element;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/editors/LaterBindingSMV2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    extRef = doc.querySelector<Element>(\n      'ExtRef[pLN=\"TCTR\"][pDO=\"AmpSv\"][pDA=\"instMag.i\"]'\n    )!;\n  });\n\n  it('returns null for missing restriction attributes', () => {\n    extRef.removeAttribute('pLN');\n    expect(inputRestriction(extRef)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns null for missing logical node connection', () => {\n    extRef.setAttribute('pLN', 'PDIS');\n    expect(inputRestriction(extRef)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns null for failed CDC extraction', () => {\n    extRef.setAttribute('pDO', 'AmpS');\n    expect(inputRestriction(extRef)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns null for failed bType extraction', () => {\n    extRef.setAttribute('pDA', 'instMag.f');\n    expect(inputRestriction(extRef)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns object with extracted CDC and bType', () =>\n    expect(inputRestriction(extRef)).to.deep.equal({\n      cdc: 'SAV',\n      bType: 'INT32',\n    }));\n});\n\ndescribe('FCDA specification', () => {\n  let doc: XMLDocument;\n  let fcda: Element;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/editors/LaterBindingSMV2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    fcda = doc.querySelector<Element>(\n      'FCDA[lnClass=\"TCTR\"][doName=\"AmpSv\"][daName=\"instMag.i\"]'\n    )!;\n  });\n\n  it('returns null for missing logical node connection', () => {\n    fcda.setAttribute('lnClass', 'USER');\n    expect(fcdaSpecification(fcda)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns null for failed CDC extraction', () => {\n    fcda.setAttribute('doName', 'AmpS');\n    expect(fcdaSpecification(fcda)).to.deep.equal({ cdc: null, bType: null });\n  });\n\n  it('returns null for failed bType extraction', () => {\n    fcda.setAttribute('daName', 'instMag.k');\n    expect(fcdaSpecification(fcda)).to.deep.equal({ cdc: 'SAV', bType: null });\n  });\n\n  it('returns object with extracted CDC and bType', () =>\n    expect(fcdaSpecification(fcda)).to.deep.equal({\n      cdc: 'SAV',\n      bType: 'INT32',\n    }));\n});\n"]}