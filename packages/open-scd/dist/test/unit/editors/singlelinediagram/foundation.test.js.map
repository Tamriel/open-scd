{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/singlelinediagram/foundation.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EACL,sBAAsB,EACtB,QAAQ,EACR,qBAAqB,EACrB,oCAAoC,EAAE,sBAAsB,GAC7D,MAAM,yDAAyD,CAAC;AACjE,OAAO,EAAE,uBAAuB,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AAEtI,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,GAAa,CAAC;IAClB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,GAAG,GAAG,MAAM,KAAK,CAAC,iDAAiD,CAAC;aACjE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACxD,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YACxD,MAAM,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;YACvE,MAAM,CAAC,gBAAgB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iDAAiD,EAAE,GAAG,EAAE;QAC/D,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YACvD,MAAM,CAAC,uBAAuB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;YACvE,MAAM,CAAC,uBAAuB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,iDAAiD,CAClD,CAAC;YACF,MAAM,CAAC,oBAAoB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;YACvE,MAAM,CAAC,oBAAoB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,+EAA+E,CAChF,CAAC;YACF,MAAM,CAAC,oBAAoB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,oDAAoD,CAAC,CAAC;YACxF,MAAM,CAAC,oBAAoB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC9D,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,qDAAqD,CACtD,CAAC;YACF,MAAM,CAAC,sBAAsB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,kFAAkF,EAAE,GAAG,EAAE;YAC1F,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,iDAAiD,CAClD,CAAC;YACF,MAAM,CAAC,sBAAsB,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+CAA+C,EAAE,GAAG,EAAE;QAC7D,EAAE,CAAC,8FAA8F,EAAE,GAAG,EAAE;YACtG,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,iDAAiD,CAClD,CAAC;YACF,MAAM,CAAC,qBAAqB,CAAC,OAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qGAAqG,EAAE,GAAG,EAAE;YAC7G,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,oDAAoD,CACrD,CAAC;YACF,MAAM,CAAC,qBAAqB,CAAC,OAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8DAA8D,EAAE,GAAG,EAAE;QAC5E,EAAE,CACA,+EAA+E;YAC7E,iDAAiD,EACnD,GAAG,EAAE;YACH,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,iDAAiD,CAClD,CAAC;YACF,MAAM,CAAC,oCAAoC,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;gBAC5D,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;aAClC,CAAC,CAAC;QACL,CAAC,CACF,CAAC;QACF,EAAE,CAAC,0EAA0E,EAAE,GAAG,EAAE;YAClF,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAC/B,qDAAqD,CACtD,CAAC;YACF,MAAM,CAAC,oCAAoC,CAAC,OAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;gBAC5D,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,CAAC;aACL,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC9D,EAAE,CAAC,wFAAwF,EAAE,GAAG,EAAE;YAChG,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAE,CAAC;YAChE,MAAM,gBAAgB,GAAI,GAAG,CAAC,aAAa,CAAC,8BAA8B,CAAE,CAAC;YAC7E,MAAM,gBAAgB,GAAI,GAAG,CAAC,aAAa,CAAC,iDAAiD,CAAE,CAAC;YAChG,MAAM,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,GAAG,EAAE;YAC5F,MAAM,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,mBAAmB,CAAE,CAAC;YACpD,MAAM,mBAAmB,GAAI,GAAG,CAAC,aAAa,CAAC,qDAAqD,CAAE,CAAC;YACvG,MAAM,gBAAgB,GAAI,GAAG,CAAC,aAAa,CAAC,iDAAiD,CAAE,CAAC;YAChG,MAAM,CAAC,sBAAsB,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;YAC/E,MAAM,gBAAgB,GAAI,GAAG,CAAC,aAAa,CAAC,8BAA8B,CAAE,CAAC;YAC7E,MAAM,UAAU,GAAI,GAAG,CAAC,aAAa,CAAC,+BAA+B,CAAE,CAAC;YACxE,MAAM,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,oGAAoG;YACpG,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,iDAAiD,CAAC;iBAC5E,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAExE,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAE,CAAC;YAChE,MAAM,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,mBAAmB,CAAE,CAAC;YACpD,MAAM,mBAAmB,GAAI,GAAG,CAAC,aAAa,CAAC,qDAAqD,CAAE,CAAC;YACvG,MAAM,gBAAgB,GAAI,QAAQ,CAAC,aAAa,CAAC,iDAAiD,CAAE,CAAC;YACrG,MAAM,CAAC,sBAAsB,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACzG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\nimport {\n  getRelativeCoordinates,\n  isBusBar,\n  getConnectedTerminals,\n  calculateConnectivityNodeCoordinates, getCommonParentElement,\n} from '../../../../src/editors/singlelinediagram/foundation.js';\nimport { getDescriptionAttribute, getInstanceAttribute, getNameAttribute, getPathNameAttribute } from '../../../../src/foundation.js';\n\ndescribe('Single Line Diagram foundation', () => {\n  let doc: Document;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/valid2007B4withSubstationXY.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('defines a getNameAttribute function that', () => {\n    it('returns the correct name for an element.', () => {\n      const element = doc.querySelector('Bay[desc=\"Feld A\"]');\n      expect(getNameAttribute(element!)).to.eql('Bay A');\n    });\n    it('returns undefined for an element without a name.', () => {\n      const element = doc.querySelector('VoltageLevel[name=\"J1\"] > Voltage');\n      expect(getNameAttribute(element!)).to.be.undefined;\n    });\n  });\n\n  describe('defines a getDescriptionAttribute function that', () => {\n    it('returns the correct description for an element.', () => {\n      const element = doc.querySelector('Bay[name=\"Bay A\"]');\n      expect(getDescriptionAttribute(element!)).to.eql('Feld A');\n    });\n    it('returns undefined for an element without a description.', () => {\n      const element = doc.querySelector('VoltageLevel[name=\"J1\"] > Voltage');\n      expect(getDescriptionAttribute(element!)).to.be.undefined;\n    });\n  });\n\n  describe('defines a getPathName function that', () => {\n    it('returns the correct path name for an element.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]'\n      );\n      expect(getPathNameAttribute(element!)).to.eql('AA1/J1/Bay A/L1');\n    });\n    it('returns undefined for an element without a pathName.', () => {\n      const element = doc.querySelector('VoltageLevel[name=\"J1\"] > Voltage');\n      expect(getPathNameAttribute(element!)).to.be.undefined;\n    });\n  });\n\n  describe('defines a getInstance function that', () => {\n    it('returns the correct instance for an element.', () => {\n      const element = doc.querySelector(\n        'IED[name=\"IED1\"] > AccessPoint[name=\"P1\"] > Server > LDevice[name=\"LDeviceA\"]'\n      );\n      expect(getInstanceAttribute(element!)).to.eql('CircuitBreaker_CB1');\n    });\n    it('returns undefined for an element without an instance.', () => {\n      const element = doc.querySelector('IED[name=\"IED1\"] > AccessPoint[name=\"P1\"] > Server');\n      expect(getInstanceAttribute(element!)).to.be.undefined;\n    });\n  });\n\n  describe('defines a getRelativeCoordinates function that', () => {\n    it('returns the correct x and y coordinates for an element.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QB1\"]'\n      );\n      expect(getRelativeCoordinates(element!)).to.eql({ x: 2, y: 2 });\n    });\n    it(\"returns {x: 0, y: 0} coordinates for an element that hasn't got any coordinates.\", () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]'\n      );\n      expect(getRelativeCoordinates(element!)).to.eql({ x: 0, y: 0 });\n    });\n  });\n\n  describe('defines an isBusBar function that', () => {\n    it('returns true if an element is a bus bar.', () => {\n      const element = doc.querySelector('Bay[name=\"BusBar A\"]');\n      expect(isBusBar(element!)).to.be.true;\n    });\n    it('returns false if an element is not a bus bar.', () => {\n      const element = doc.querySelector('Bay[name=\"Bay A\"]');\n      expect(isBusBar(element!)).to.be.false;\n    });\n  });\n\n  describe('defines a getConnectedTerminals function that', () => {\n    it('calculates the total number of connected terminals for a single element within the same bay.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]'\n      );\n      expect(getConnectedTerminals(element!).length).to.eql(3);\n    });\n    it('calculates the total number of connected terminals for a single element connected to multiple bays.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"BusBar A\"] > ConnectivityNode[name=\"L1\"]'\n      );\n      expect(getConnectedTerminals(element!).length).to.eql(4);\n    });\n  });\n\n  describe('defines a calculateConnectivityNodeCoordinates function that', () => {\n    it(\n      'calculates the x and y coordinates of an element without defined coordinates,' +\n        'based on the coordinates of connected elements.',\n      () => {\n        const element = doc.querySelector(\n          'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]'\n        );\n        expect(calculateConnectivityNodeCoordinates(element!)).to.eql({\n          x: Math.round((6 + 10 + 8) / 3),\n          y: Math.round((20 + 20 + 24) / 3),\n        });\n      }\n    );\n    it(\"returns a default {x:0, y:0} for elements that aren't Connectivity Nodes\", () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QB1\"]'\n      );\n      expect(calculateConnectivityNodeCoordinates(element!)).to.eql({\n        x: 0,\n        y: 0,\n      });\n    });\n  });\n\n  describe('defines a getCommonParentElement function that', () => {\n    it(\"common parent between connectivity node and power transformer should be the substation\", () => {\n      const substation = doc.querySelector('Substation[name=\"AA1\"]')!;\n      const powerTransformer =  doc.querySelector('PowerTransformer[name=\"TA1\"]')!;\n      const connectivityNode =  doc.querySelector('Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]')!;\n      expect(getCommonParentElement(powerTransformer, connectivityNode, null)).to.equal(substation);\n    });\n\n    it(\"common parent between connectivity node and conducting equipment should be the bay\", () => {\n      const bay = doc.querySelector('Bay[name=\"Bay A\"]')!;\n      const conductingEquipment =  doc.querySelector('Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QB1\"]')!;\n      const connectivityNode =  doc.querySelector('Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]')!;\n      expect(getCommonParentElement(conductingEquipment, connectivityNode, null)).to.equal(bay);\n    });\n\n    it(\"common parent between two unrelated elements will be the root element\", () => {\n      const powerTransformer =  doc.querySelector('PowerTransformer[name=\"TA1\"]')!;\n      const subNetwork =  doc.querySelector('SubNetwork[name=\"StationBus\"]')!;\n      expect(getCommonParentElement(powerTransformer, subNetwork, null)).to.equal(doc.firstElementChild);\n    });\n\n    it(\"when no common parent then the default element returned\", async () => {\n      // Can only happen if from different documents, otherwise there should always be the root as common.\n      const otherDoc = await fetch('/test/testfiles/valid2007B4withSubstationXY.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      const substation = doc.querySelector('Substation[name=\"AA1\"]')!;\n      const bay = doc.querySelector('Bay[name=\"Bay A\"]')!;\n      const conductingEquipment =  doc.querySelector('Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QB1\"]')!;\n      const connectivityNode =  otherDoc.querySelector('Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]')!;\n      expect(getCommonParentElement(conductingEquipment, connectivityNode, substation)).to.equal(substation);\n    });\n  });\n});\n"]}