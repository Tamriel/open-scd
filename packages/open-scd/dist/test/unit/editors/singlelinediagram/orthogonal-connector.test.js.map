{"version":3,"file":"orthogonal-connector.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/singlelinediagram/orthogonal-connector.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,8DAA8D,CAAC;AAEjG,MAAM,SAAS,GAAgB;IAC7B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;CAChB,CAAC;AACF,MAAM,QAAQ,GAAG,EAAE,CAAC;AAEpB,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACnE,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,QAAQ,EACR,SAAS,CACV,CAAC,CAAC,CAAC,CACL,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,QAAQ,EACR,CAAC,EAAE,CAAC,CACL,CAAC,MAAM,CACT,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;QAC3E,MAAM,CACJ,iBAAiB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,SAAS,CAAC;aACnE,MAAM,CACV,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,KAAK,GAAG;YACZ,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC;YAC9B,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ;SAC3B,CAAC;QACF,MAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC;QAEhE,MAAM,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACvE,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAC9D,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;SACzC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,EAC9D,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EACnD,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EACnD,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAC9D,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAC9D,QAAQ,EACR,SAAS,CACV,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAClE,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EACnD,QAAQ,CACT,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YAC1C,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;SACvC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,CACJ,iBAAiB,CACf,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EACnD,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,EAAE,EAClE,QAAQ,CACT,CACF,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE;YACtC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;YACxC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE;SAC3C,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\nimport { getOrthogonalPath } from '../../../../src/editors/singlelinediagram/ortho-connector.js';\n\nconst gridAlloc: (0 | 1)[][] = [\n  [1, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0],\n  [1, 1, 0, 1, 1],\n];\nconst gridSize = 64;\n\ndescribe('orthogonal connectors', () => {\n  it('chooses the next possible grid node to the start position', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 4 * gridSize, y: 4 * gridSize + gridSize / 2 },\n        { x: 4 * gridSize, y: 0 * gridSize + gridSize / 2 },\n        gridSize,\n        gridAlloc\n      )[1]\n    ).to.deep.equal({ x: 3.5 * gridSize, y: 3.5 * gridSize });\n  });\n\n  it('return empty path for empty grid allocation', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 4 * gridSize, y: 4 * gridSize + gridSize / 2 },\n        { x: 4 * gridSize, y: 0 * gridSize + gridSize / 2 },\n        gridSize,\n        [[]]\n      ).length\n    ).to.equal(0);\n  });\n\n  it('return empty path in case start position is equal to end position', () => {\n    expect(\n      getOrthogonalPath({ x: 1, y: 1 }, { x: 1, y: 1 }, gridSize, gridAlloc)\n        .length\n    ).to.equal(0);\n  });\n\n  it('return correct values for path S - N', () => {\n    const start = {\n      x: 0 * gridSize + gridSize / 2,\n      y: 0 * gridSize + gridSize,\n    };\n    const end = { x: 2 * gridSize + gridSize / 2, y: 2 * gridSize };\n\n    expect(getOrthogonalPath(start, end, gridSize, gridAlloc)).to.deep.equal([\n      { x: 0.5 * gridSize, y: 1 * gridSize },\n      { x: 0.5 * gridSize, y: 1.5 * gridSize },\n      { x: 2.5 * gridSize, y: 1.5 * gridSize },\n      { x: 2.5 * gridSize, y: 2 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path S - W', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize / 2, y: 0 * gridSize + gridSize },\n        { x: 2 * gridSize, y: 2 * gridSize + gridSize / 2 },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 0.5 * gridSize, y: 1 * gridSize },\n      { x: 0.5 * gridSize, y: 2.5 * gridSize },\n      { x: 1.5 * gridSize, y: 2.5 * gridSize },\n      { x: 2 * gridSize, y: 2.5 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path S - E', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize / 2, y: 0 * gridSize + gridSize },\n        { x: 2 * gridSize + gridSize, y: 2 * gridSize + gridSize / 2 },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 0.5 * gridSize, y: 1 * gridSize },\n      { x: 0.5 * gridSize, y: 1.5 * gridSize },\n      { x: 3.5 * gridSize, y: 1.5 * gridSize },\n      { x: 3.5 * gridSize, y: 2.5 * gridSize },\n      { x: 3.0 * gridSize, y: 2.5 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path S - S', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize / 2, y: 0 * gridSize + gridSize },\n        { x: 2 * gridSize + gridSize / 2, y: 2 * gridSize + gridSize },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 0.5 * gridSize, y: 1 * gridSize },\n      { x: 0.5 * gridSize, y: 3.5 * gridSize },\n      { x: 2.5 * gridSize, y: 3.5 * gridSize },\n      { x: 2.5 * gridSize, y: 3 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path E-N', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize, y: 0 * gridSize + gridSize / 2 },\n        { x: 2 * gridSize + gridSize / 2, y: 2 * gridSize },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 1 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 1.5 * gridSize },\n      { x: 2.5 * gridSize, y: 1.5 * gridSize },\n      { x: 2.5 * gridSize, y: 2 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path E-W', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize, y: 0 * gridSize + gridSize / 2 },\n        { x: 2 * gridSize, y: 2 * gridSize + gridSize / 2 },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 1 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 2.5 * gridSize },\n      { x: 2 * gridSize, y: 2.5 * gridSize },\n    ]);\n  });\n\n  it('return correct values for another path E-E', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize, y: 0 * gridSize + gridSize / 2 },\n        { x: 2 * gridSize + gridSize, y: 2 * gridSize + gridSize / 2 },\n        gridSize,\n        gridAlloc\n      )\n    ).to.deep.equal([\n      { x: 1 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 1.5 * gridSize },\n      { x: 3.5 * gridSize, y: 1.5 * gridSize },\n      { x: 3.5 * gridSize, y: 2.5 * gridSize },\n      { x: 3 * gridSize, y: 2.5 * gridSize },\n    ]);\n  });\n\n  it('finds shortest path with missing grid', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 0 * gridSize + gridSize - 1, y: 0 * gridSize + gridSize / 2 },\n        { x: 2 * gridSize + gridSize / 2, y: 2 * gridSize },\n        gridSize\n      )\n    ).to.deep.equal([\n      { x: 1 * gridSize - 1, y: 0.5 * gridSize },\n      { x: 2.5 * gridSize, y: 0.5 * gridSize },\n      { x: 2.5 * gridSize, y: 1.5 * gridSize },\n      { x: 2.5 * gridSize, y: 2 * gridSize },\n    ]);\n  });\n\n  it('makes sure initial grid allocation is correct', () => {\n    expect(\n      getOrthogonalPath(\n        { x: 2 * gridSize + gridSize / 2, y: 2 * gridSize },\n        { x: 0 * gridSize + gridSize - 1, y: 0 * gridSize + gridSize / 2 },\n        gridSize\n      )\n    ).to.deep.equal([\n      { x: 2.5 * gridSize, y: 2 * gridSize },\n      { x: 2.5 * gridSize, y: 0.5 * gridSize },\n      { x: 1.5 * gridSize, y: 0.5 * gridSize },\n      { x: 1 * gridSize - 1, y: 0.5 * gridSize },\n    ]);\n  });\n});\n"]}