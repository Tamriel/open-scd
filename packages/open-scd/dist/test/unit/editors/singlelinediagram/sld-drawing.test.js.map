{"version":3,"file":"sld-drawing.test.js","sourceRoot":"","sources":["../../../../../test/unit/editors/singlelinediagram/sld-drawing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport { SCL_COORDINATES_NAMESPACE } from '../../../../src/editors/singlelinediagram/foundation.js';\nimport {\n  createBayElement,\n  createBusBarElement,\n  createConductingEquipmentElement,\n  createConnectivityNodeElement,\n  createPowerTransformerElement,\n  createTerminalElement,\n  createVoltageLevelElement,\n  EQUIPMENT_SIZE,\n  getAbsolutePosition,\n  getBusBarLength,\n  getDirections,\n  getParentElementName,\n  SVG_GRID_SIZE,\n} from '../../../../src/editors/singlelinediagram/sld-drawing.js';\n\nfunction setCoordinates(element: Element, x: number, y: number): void {\n  element.setAttributeNS(SCL_COORDINATES_NAMESPACE, 'x', `${x}`);\n\n  element.setAttributeNS(SCL_COORDINATES_NAMESPACE, 'y', `${y}`);\n}\n\ndescribe('Single Line Diagram drawing', () => {\n  let doc: Document;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/valid2007B4withSubstationXY.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('defines getDirections for equipment to connectivity node connection', () => {\n    let equipment: Element;\n    let cNode: Element;\n    beforeEach(() => {\n      equipment = doc.querySelector(\n        'VoltageLevel[name=\"J1\"] > Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QA1\"]'\n      )!;\n\n      cNode = doc.querySelector(\n        'VoltageLevel[name=\"J1\"] > Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L2\"]'\n      )!;\n    });\n\n    it('return correct directions for equipment to cNode positioning', () => {\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'bottom',\n        endDirection: 'top',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 2, 7);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'top',\n        endDirection: 'bottom',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 4, 5);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'left',\n        endDirection: 'right',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 0, 5);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'right',\n        endDirection: 'left',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 4, 3);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'bottom',\n        endDirection: 'right',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 4, 7);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'top',\n        endDirection: 'right',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 0, 7);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'top',\n        endDirection: 'left',\n      });\n    });\n\n    it('return correct directions for another equipment to cNode positioning', () => {\n      setCoordinates(equipment, 0, 3);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'bottom',\n        endDirection: 'left',\n      });\n    });\n\n    it('return default directions equipment overlaying each other', () => {\n      setCoordinates(equipment, 2, 5);\n\n      expect(getDirections(equipment, cNode)).to.deep.equal({\n        startDirection: 'bottom',\n        endDirection: 'top',\n      });\n    });\n  });\n\n  describe('defines a getAbsolutePosition function that', () => {\n    it('returns the correct absolute position for an element with a Bay as parent.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConductingEquipment[name=\"QB1\"]'\n      );\n      // Absolute position of QB1 should be x=(1 + 1 + 1), and y=(1 + 6 + 3), if looking at the coordinates of all the parents.\n      // Times the SVG_GRID_SIZE to get the absolute position on the svg.\n      expect(getAbsolutePosition(element!)).to.eql({\n        x: 3 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n        y: 10 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n      });\n    });\n\n    it('returns the correct absolute position for an element with a VoltageLevel as parent.', () => {\n      const element = doc.querySelector('Bay[name=\"BusBar A\"]');\n      // Absolute position of Busbar A should be x=(1 + 1), and y=(1 + 3), if looking at the coordinates of all the parents.\n      // Times the SVG_GRID_SIZE to get the absolute position on the svg.\n      expect(getAbsolutePosition(element!)).to.eql({\n        x: 2 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n        y: 4 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n      });\n    });\n\n    it('returns relative position elements without legal parent.', () => {\n      const element = doc.querySelector('VoltageLevel[name=\"J1\"]');\n      const copiedElement = <Element>element?.cloneNode();\n\n      expect(getAbsolutePosition(copiedElement!)).to.eql({\n        x: 1 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n        y: 3 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n      });\n    });\n\n    it('returns default for invalid elements.', () => {\n      const element = doc.querySelector('LDevice');\n\n      expect(getAbsolutePosition(element!)).to.eql({\n        x: 0 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n        y: 0 * 2 * SVG_GRID_SIZE + (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n      });\n    });\n  });\n\n  describe('defines a getParentElementName function that', () => {\n    it('returns the correct parent of an element.', () => {\n      const element = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L2\"]'\n      );\n      expect(getParentElementName(element!)).to.eql('Bay A');\n    });\n    it('returns undefined for an element without a parent.', () => {\n      const element = doc.querySelector('Substation');\n      expect(getParentElementName(element!)).to.be.undefined;\n    });\n  });\n\n  describe('defines a getBusBarLength function that', () => {\n    it('returns a correct length for the bus bar given voltage level as root', () => {\n      const element = doc.querySelector('VoltageLevel[name=\"J1\"]')!;\n      expect(getBusBarLength(element)).to.eql(\n        18 * 2 * SVG_GRID_SIZE +\n          (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2 +\n          SVG_GRID_SIZE\n      );\n    });\n  });\n\n  describe('creates a group element for every given PowerTransformer element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const pTrans = doc.querySelector('PowerTransformer')!;\n      await expect(createPowerTransformerElement(pTrans)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given ConductingEquipment element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const condEq = doc.querySelector('ConductingEquipment')!;\n      await expect(createConductingEquipmentElement(condEq)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given VoltageLevel element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const voltLv = doc.querySelector('VoltageLevel')!;\n      await expect(createVoltageLevelElement(voltLv)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given Bus Bar element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const busBar = doc.querySelector('Bay[name=\"BusBar A\"]')!;\n      await expect(createBusBarElement(busBar, 200)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given Bay element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const bay = doc.querySelector('Bay[name=\"Bay A\"]')!;\n      await expect(createBayElement(bay)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given ConnectivityNode element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const cNode = doc.querySelector(\n        'Bay[name=\"Bay A\"] > ConnectivityNode[name=\"L1\"]'\n      )!;\n      await expect(createConnectivityNodeElement(cNode)).to.equalSnapshot();\n    });\n  });\n\n  describe('creates a group element for every given Terminal element that', () => {\n    it('looks like its latest snapshot', async () => {\n      const terminal = doc.querySelector(\n        'ConductingEquipment > Terminal[name=\"T2\"]'\n      )!;\n      await expect(createTerminalElement(terminal, 'top')).to.equalSnapshot();\n    });\n  });\n});\n"]}