{"version":3,"file":"actions.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/protocol104/foundation/actions.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport { Create } from '../../../../../src/foundation.js';\n\nimport {\n  cdcProcessings,\n  SupportedCdcType,\n} from '../../../../../src/editors/protocol104/foundation/cdc.js';\nimport {\n  createActions,\n  createCheckActions,\n} from '../../../../../src/editors/protocol104/foundation/actions.js';\n\ndescribe('foundation', () => {\n  let doc: XMLDocument;\n  let actionEvent: SinonSpy;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/104/valid-empty-addresses.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    actionEvent = spy();\n  });\n\n  describe('createActions', () => {\n    function executeCreateAction(\n      queryLnSelector: string,\n      doName: string,\n      cdc: string,\n      ti: string\n    ): Create[] {\n      const lnElement = doc.querySelector(queryLnSelector)!;\n      const lnType = lnElement.getAttribute('lnType')!;\n      const doElement = doc.querySelector(\n        `LNodeType[id=\"${lnType}\"] > DO[name=\"${doName}\"]`\n      )!;\n      const lnClonedElement = <Element>lnElement.cloneNode(true);\n      // We just need some element as Wizard, so reuse the LN Element.\n      const wizard = lnElement;\n      wizard!.addEventListener('wizard', actionEvent);\n\n      return createActions(\n        lnElement,\n        lnClonedElement,\n        doElement,\n        wizard,\n        ti,\n        false,\n        cdcProcessings[<SupportedCdcType>cdc].monitor[ti]\n      );\n    }\n\n    it('returns a empty create action array', () => {\n      // Use a wrong configuration to create actions. ACT should be SPG, but now no DAI Elements are found.\n      const actions = executeCreateAction(\n        'LN0[lnType=\"SE_LLN0_SET_V001\"]',\n        'MltLev',\n        'ACT',\n        '30'\n      );\n      expect(actions).to.be.empty;\n      expect(actionEvent).to.have.not.been.called;\n    });\n\n    it('returns a single address create action', () => {\n      const actions = executeCreateAction(\n        'LN0[lnType=\"SE_LLN0_SET_V001\"]',\n        'MltLev',\n        'SPG',\n        '58'\n      );\n      expect(actions.length).to.be.equal(1);\n      expect(actionEvent).to.have.been.calledOnce;\n    });\n\n    it('returns a multiple address create action', () => {\n      const actions = executeCreateAction(\n        'LN[lnType=\"SE_GGIO_SET_V002\"]',\n        'ClcRfTyp',\n        'ENG',\n        '58'\n      );\n      expect(actions.length).to.be.equal(1);\n      expect(actionEvent).to.have.been.callCount(8);\n    });\n  });\n\n  describe('createCheckActions', () => {\n    function executeCreateCheckAction(\n      queryLnSelector: string,\n      doName: string,\n      cdc: string,\n      ti: string\n    ): Create[] {\n      const lnElement = doc.querySelector(queryLnSelector)!;\n      const lnType = lnElement.getAttribute('lnType')!;\n      const doElement = doc.querySelector(\n        `LNodeType[id=\"${lnType}\"] > DO[name=\"${doName}\"]`\n      )!;\n      const lnClonedElement = <Element>lnElement.cloneNode(true);\n      // We just need some element as Wizard, so reuse the LN Element.\n      const wizard = lnElement;\n      wizard!.addEventListener('wizard', actionEvent);\n\n      return createCheckActions(\n        lnElement,\n        lnClonedElement,\n        doElement,\n        wizard,\n        ti,\n        cdcProcessings[<SupportedCdcType>cdc].control[ti]\n      );\n    }\n\n    it('returns a multiple address create action', () => {\n      const actions = executeCreateCheckAction(\n        'LN[lnType=\"SE_GGIO_SET_V002\"]',\n        'DPCSO2',\n        'DPC',\n        '59'\n      );\n      expect(actions.length).to.be.equal(2);\n      expect(actionEvent).to.have.been.calledTwice;\n    });\n  });\n});\n"]}