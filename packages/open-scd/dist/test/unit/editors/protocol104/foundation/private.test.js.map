{"version":3,"file":"private.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/protocol104/foundation/private.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  addPrefixAndNamespaceToDocument,\n  createPrivateAddress,\n  createPrivateElement,\n  getPrivateElement,\n  PROTOCOL_104_NS,\n  PROTOCOL_104_PREFIX,\n  PROTOCOL_104_PRIVATE,\n} from '../../../../../src/editors/protocol104/foundation/private.js';\n\ndescribe('foundation', () => {\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/104/valid-empty-addresses.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('addPrefixAndNamespaceToDocument', () => {\n    it('adding prefix for namespace', async () => {\n      addPrefixAndNamespaceToDocument(doc);\n\n      const sclElement = doc.querySelector('SCL')!;\n      expect(\n        sclElement.getAttribute('xmlns:' + PROTOCOL_104_PREFIX)\n      ).to.be.equal(PROTOCOL_104_NS);\n    });\n\n    it('do nothing when prefix exists', async () => {\n      doc = await fetch('/test/testfiles/104/valid-no-ied.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      let sclElement = doc.querySelector('SCL')!;\n      expect(\n        sclElement.getAttribute('xmlns:' + PROTOCOL_104_PREFIX)\n      ).to.be.equal(PROTOCOL_104_NS);\n\n      addPrefixAndNamespaceToDocument(doc);\n\n      sclElement = doc.querySelector('SCL')!;\n      expect(\n        sclElement.getAttribute('xmlns:' + PROTOCOL_104_PREFIX)\n      ).to.be.equal(PROTOCOL_104_NS);\n    });\n  });\n\n  describe('getPrivateElement', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/104/valid-addresses.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('when called on DAI Element with Private then Private returned', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] > SDI[name=\"Oper\"] > DAI[name=\"ctlVal\"]'\n      );\n      const privateElement = getPrivateElement(daiElement!);\n\n      expect(privateElement).to.be.not.null;\n      expect(privateElement).to.have.attribute('type', PROTOCOL_104_PRIVATE);\n    });\n\n    it('when called on DAI Element without Private then null returned', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] > DAI[name=\"ctlModel\"]'\n      );\n      const privateElement = getPrivateElement(daiElement!);\n\n      expect(privateElement).to.be.null;\n    });\n  });\n\n  describe('createPrivateElement', () => {\n    it('new private element is created with correct type', async () => {\n      const privateElement = createPrivateElement(doc);\n\n      expect(privateElement.tagName).to.be.equal('Private');\n      expect(privateElement.getAttribute('type')).to.be.equal(\n        PROTOCOL_104_PRIVATE\n      );\n    });\n  });\n\n  describe('createPrivateElement', () => {\n    it('new address element is created with correct type', async () => {\n      const ti = '30';\n\n      const addressElement = createPrivateAddress(doc, ti);\n\n      expect(addressElement.tagName).to.be.equal('Address');\n      expect(addressElement.namespaceURI).to.be.equal(PROTOCOL_104_NS);\n      expect(addressElement.getAttribute('ti')).to.be.equal(ti);\n    });\n  });\n});\n"]}