{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/protocol104/foundation/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  get104DetailsLine,\n  getCdcValueFromDOIElement,\n  getCtlModel,\n  getDaElementByDaiElement,\n  getDaiElement,\n  getDaiValue,\n  getDoElement,\n  getEnumOrds,\n  getEnumVal,\n  getFullPath,\n  getTypeAttribute,\n  isEnumDataAttribute,\n} from '../../../../../src/editors/protocol104/foundation/foundation.js';\nimport { PROTOCOL_104_PRIVATE } from '../../../../../src/editors/protocol104/foundation/private.js';\n\ndescribe('foundation', () => {\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/104/valid-addresses.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('get104DetailsLine', () => {\n    const FIRST_PRIV_ADDRESS_QUERY = `:scope > Private[type=\"${PROTOCOL_104_PRIVATE}\"] > Address`;\n\n    it('returns basic fields', () => {\n      const daiElement = doc.querySelector(\n        `IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DAI[name=\"ctlVal\"]`\n      );\n      const addressElement = daiElement!.querySelector(\n        FIRST_PRIV_ADDRESS_QUERY\n      );\n      expect(get104DetailsLine(daiElement!, addressElement!)).to.be.equal(\n        'casdu: 100, ioa: 4, ti: 62'\n      );\n    });\n\n    it('returns expectedValue fields', () => {\n      const daiElement = doc.querySelector(\n        `IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Health\"] DAI[name=\"stVal\"]`\n      );\n      const addressElement = daiElement!.querySelector(\n        FIRST_PRIV_ADDRESS_QUERY\n      );\n      expect(get104DetailsLine(daiElement!, addressElement!)).to.be.equal(\n        'casdu: 101, ioa: 1, ti: 30, expectedValue: 1 (Ok)'\n      );\n    });\n\n    it('returns check fields', () => {\n      const daiElement = doc.querySelector(\n        `IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] DOI[name=\"DPCSO1\"] DAI[name=\"Check\"]`\n      );\n      const addressElement = daiElement!.querySelector(\n        FIRST_PRIV_ADDRESS_QUERY\n      );\n      expect(get104DetailsLine(daiElement!, addressElement!)).to.be.equal(\n        'casdu: 202, ioa: 3, ti: 58, check: interlocking'\n      );\n    });\n\n    it('returns inverted fields', () => {\n      const daiElement = doc.querySelector(\n        `IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] DOI[name=\"Ind2\"] DAI[name=\"stVal\"]`\n      );\n      const addressElement = daiElement!.querySelector(\n        FIRST_PRIV_ADDRESS_QUERY\n      );\n      expect(get104DetailsLine(daiElement!, addressElement!)).to.be.equal(\n        'casdu: 1, ioa: 2, ti: 30, inverted: true'\n      );\n    });\n  });\n\n  describe('getTypeAttribute', () => {\n    it('expect the correct value of the type attribute', () => {\n      const doElement = doc.querySelector(\n        'LNodeType[id=\"SE_GGIO_SET_V002\"] > DO[name=\"Beh\"]'\n      )!;\n      expect(getTypeAttribute(doElement)).to.be.equal('SE_ENS_V001');\n    });\n  });\n\n  describe('getFullPath', () => {\n    it('returns expected value for DOI Element', () => {\n      const doiElement = doc.querySelector(\n        'IED[name=\"B2\"] LN0[lnType=\"SE_LLN0_SET_default_V001\"] DOI[name=\"Beh\"]'\n      );\n      expect(getFullPath(doiElement!, 'IED')).to.be.equal(\n        'AP1 / LD0 / LLN0 / Beh'\n      );\n    });\n\n    it('returns expected value for DAI Element', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DAI[name=\"ctlVal\"]'\n      );\n      expect(getFullPath(daiElement!, 'DOI')).to.be.equal('Oper / ctlVal');\n    });\n  });\n\n  describe('getCdcValue', () => {\n    it('returns expected value for CDC \"ENS\"', () => {\n      // Basic test to see if CDC is retrieved correctly.\n      const doiElement = doc.querySelector(\n        'IED[name=\"B2\"] LN0[lnType=\"SE_LLN0_SET_default_V001\"] DOI[name=\"Beh\"]'\n      );\n      expect(getCdcValueFromDOIElement(doiElement!)).to.be.equal('ENS');\n    });\n\n    it('returns expected value for CDC \"ENC\"', () => {\n      // Basic test to see if CDC is retrieved correctly.\n      const doiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Mod\"]'\n      );\n      expect(getCdcValueFromDOIElement(doiElement!)).to.be.equal('ENC');\n    });\n  });\n\n  describe('getDaiElement', () => {\n    it('returns expected DAI Element', () => {\n      const doiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Mod\"]'\n      );\n      const result = getDaiElement(doiElement!, 'ctlModel');\n      expect(result).to.be.not.null;\n    });\n\n    it('returns null if DAI not found', () => {\n      const doiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Mod\"]'\n      );\n      const result = getDaiElement(doiElement!, 'Unknown');\n      expect(result).to.be.null;\n    });\n  });\n\n  describe('getDaiValue', () => {\n    it('returns expected DAI Value', () => {\n      const doiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Mod\"]'\n      );\n      const result = getDaiValue(doiElement!, 'ctlModel');\n      expect(result).to.be.equal('direct-with-normal-security');\n    });\n\n    it('returns null if DAI not found', () => {\n      const doiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] DOI[name=\"Mod\"]'\n      );\n      const result = getDaiValue(doiElement!, 'Unknown');\n      expect(result).to.be.null;\n    });\n  });\n\n  describe('getCtlModel', () => {\n    it('returns expected CtlModel Value', () => {\n      const lnElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"]'\n      );\n      const doElement = getDoElement(lnElement!, 'Mod');\n      const result = getCtlModel(lnElement!, doElement!);\n      expect(result).to.be.equal('direct-with-normal-security');\n    });\n\n    it('returns null if DAI not found', () => {\n      const lnElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"]'\n      );\n      const doElement = getDoElement(lnElement!, 'Beh');\n      const result = getCtlModel(lnElement!, doElement!);\n      expect(result).to.be.null;\n    });\n  });\n\n  describe('getDaElementByDaiElement', () => {\n    it('returns expected DA Element', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] DAI[name=\"ctlVal\"]'\n      );\n      const daElement = getDaElementByDaiElement(daiElement!);\n      expect(daElement).to.be.not.null;\n      expect(daElement?.getAttribute('type')).to.be.equal('SE_Oper_V003');\n    });\n\n    it('returns expected Enum DA Element', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] > DOI[name=\"ClcRfTyp\"] > DAI[name=\"setVal\"]'\n      );\n      const daElement = getDaElementByDaiElement(daiElement!);\n      expect(daElement).to.be.not.null;\n      expect(daElement?.getAttribute('bType')).to.be.equal('Enum');\n      expect(daElement?.getAttribute('type')).to.be.equal('SE_setVal_V001');\n    });\n  });\n\n  describe('isEnumDataAttribute', () => {\n    it('returns to not be an Enum Type', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] DAI[name=\"ctlVal\"]'\n      );\n      const result = isEnumDataAttribute(daiElement!);\n      expect(result).to.be.false;\n    });\n\n    it('returns to be an Enum Type', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] > DOI[name=\"ClcRfTyp\"] > DAI[name=\"setVal\"]'\n      );\n      const result = isEnumDataAttribute(daiElement!);\n      expect(result).to.be.true;\n    });\n  });\n\n  describe('getEnumVal', () => {\n    it('returns expected Enum Value', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] > DOI[name=\"ClcRfTyp\"] > DAI[name=\"setVal\"]'\n      );\n      const result = getEnumVal(daiElement!, '1');\n      expect(result).to.be.equal('MS');\n    });\n\n    it('returns null, because unbknown Ord Value passed', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] > DOI[name=\"ClcRfTyp\"] > DAI[name=\"setVal\"]'\n      );\n      const result = getEnumVal(daiElement!, '99');\n      expect(result).to.be.null;\n    });\n\n    it('returns null, because not an Enum Type', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] DAI[name=\"ctlVal\"]'\n      );\n      const result = getEnumVal(daiElement!, '1');\n      expect(result).to.be.null;\n    });\n  });\n\n  describe('getEnumOrds', () => {\n    it('returns empty list, because no Enum Type', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN0[lnType=\"SE_LLN0_SET_V001\"] > DOI[name=\"Mod\"] DAI[name=\"ctlVal\"]'\n      );\n      const result = getEnumOrds(daiElement!);\n      expect(result).to.be.empty;\n    });\n\n    it('returns correct list of Ord', () => {\n      const daiElement = doc.querySelector(\n        'IED[name=\"B1\"] LN[lnType=\"SE_GGIO_SET_V002\"] > DOI[name=\"ClcRfTyp\"] > DAI[name=\"setVal\"]'\n      );\n      const result = getEnumOrds(daiElement!);\n      expect(result).to.be.not.empty;\n      expect(result.length).to.be.equal(8);\n      result.forEach((value, index) =>\n        expect(result[index]).to.be.equal('' + (index + 1))\n      );\n    });\n  });\n});\n"]}