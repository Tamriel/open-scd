{"version":3,"file":"subnetwork.test.js","sourceRoot":"","sources":["../../../../../../test/unit/editors/protocol104/wizards/subnetwork.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport '../../../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../../../src/addons/Wizards.js';\n\nimport { WizardTextField } from '../../../../../src/wizard-textfield.js';\nimport {\n  isCreate,\n  WizardInputElement,\n  Create,\n  patterns,\n} from '../../../../../src/foundation.js';\nimport { createSubNetworkWizard } from '../../../../../src/editors/protocol104/wizards/subnetwork.js';\n\ndescribe('SubNetwork 104 wizard', () => {\n  let doc: XMLDocument;\n  let element: Wizards;\n  let inputs: WizardInputElement[];\n  let input: WizardInputElement | undefined;\n  let primaryAction: HTMLElement;\n\n  let actionEvent: SinonSpy;\n\n  beforeEach(async () => {\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n\n    actionEvent = spy();\n    window.addEventListener('editor-action', actionEvent);\n  });\n\n  describe('include an create wizard that', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/104/valid-subnetwork.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      const wizard = createSubNetworkWizard(\n        doc.querySelector('Communication')!\n      );\n      element.workflow.push(() => wizard);\n      await element.requestUpdate();\n\n      inputs = Array.from(element.wizardUI.inputs);\n\n      primaryAction = <HTMLElement>(\n        element.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element.wizardUI.dialog).dom.to.equalSnapshot({\n        ignoreAttributes: [\n          {\n            tags: ['wizard-textfield'],\n            attributes: ['pattern'],\n          },\n        ],\n      });\n    });\n\n    //work around, because the escapes get removed in snapshot\n    it('should have correct pattern', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelectorAll('wizard-textfield[pattern]')!\n          .length\n      ).to.equal(2);\n\n      expect(\n        element.wizardUI\n          .dialog!.querySelectorAll('wizard-textfield[pattern]')[0]\n          .getAttribute('pattern')\n      ).to.equal(patterns.normalizedString);\n\n      expect(\n        element.wizardUI\n          .dialog!.querySelectorAll('wizard-textfield[pattern]')[1]\n          .getAttribute('pattern')\n      ).to.equal(patterns.decimal);\n    });\n\n    it('does not allow creating SubNetwork with empty name attribute', async () => {\n      input = <WizardTextField>inputs.find(input => input.label === 'name');\n      input.value = '';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      expect(actionEvent).to.not.be.called;\n    });\n\n    it('triggers an editor action to create SubNetwork element including BitRate', async () => {\n      input = <WizardTextField>inputs.find(input => input.label === 'name');\n      input.value = 'myNewSubNetworkName';\n      await input.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      expect(actionEvent).to.be.calledOnce;\n      expect(actionEvent.args[0][0].detail.action).to.satisfy(isCreate);\n\n      const updateAction = <Create>actionEvent.args[0][0].detail.action;\n      expect(updateAction.new.element).to.have.a.attribute(\n        'name',\n        'myNewSubNetworkName'\n      );\n      expect(updateAction.new.element).to.have.a.attribute('desc', '');\n      expect(updateAction.new.element).to.have.a.attribute('type', '104');\n      expect((<Element>updateAction.new.element).querySelector('BitRate')).to\n        .exist;\n      expect(\n        (<Element>updateAction.new.element).querySelector('BitRate')\n      ).to.have.attribute('multiplier', 'M');\n      expect(\n        (<Element>updateAction.new.element)\n          .querySelector('BitRate')\n          ?.textContent?.trim()\n      ).to.equal('100');\n    });\n\n    it('triggers an editor action to create SubNetwork element excluding non required /BitRate', async () => {\n      const name = <WizardTextField>(\n        inputs.find(input => input.label === 'name')\n      );\n      const desc = <WizardTextField>(\n        inputs.find(input => input.label === 'desc')\n      );\n      const type = <WizardTextField>(\n        inputs.find(input => input.label === 'type')\n      );\n      const bitrate = <WizardTextField>(\n        inputs.find(input => input.label === 'BitRate')\n      );\n      await element.requestUpdate();\n\n      desc.nullSwitch?.click();\n      type.nullSwitch?.click();\n      bitrate.nullSwitch?.click();\n      name.value = 'myNewSubNetworkName';\n      await name.requestUpdate();\n\n      primaryAction.click();\n      await element.requestUpdate();\n\n      expect(actionEvent).to.be.calledOnce;\n      expect(actionEvent.args[0][0].detail.action).to.satisfy(isCreate);\n\n      const updateAction = <Create>actionEvent.args[0][0].detail.action;\n      expect(updateAction.new.element).to.have.a.attribute(\n        'name',\n        'myNewSubNetworkName'\n      );\n      expect(updateAction.new.element).to.not.have.a.attribute('desc');\n      expect(updateAction.new.element).to.not.have.a.attribute('type');\n      expect((<Element>updateAction.new.element).querySelector('BitRate')).to\n        .not.exist;\n    });\n  });\n});\n"]}