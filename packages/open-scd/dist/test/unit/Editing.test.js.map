{"version":3,"file":"Editing.test.js","sourceRoot":"","sources":["../../../test/unit/Editing.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AACzD,OAAO,EAAY,GAAG,EAAE,MAAM,OAAO,CAAC;AAEtC,OAAO,kBAAkB,CAAC;AAG1B,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAE7E,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,GAAe,CAAC;IACpB,IAAI,GAAgB,CAAC;IACrB,IAAI,MAAe,CAAC;IACpB,IAAI,OAAgB,CAAC;IACrB,IAAI,SAAsB,CAAC;IAE3B,IAAI,aAAuB,CAAC;IAE5B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,GAAG,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC;aAC7C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACxE,GAAG,GAAe,CAChB,MAAM,OAAO,CAAC,IAAI,CAAA,qBAAqB,GAAG,iBAAiB,CAAC,CAC7D,CAAC;QAEF,MAAM,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE,CAAC;QAC5D,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAE,CAAC;QACnD,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC;QAEhC,aAAa,GAAG,GAAG,EAAE,CAAC;QACtB,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACzC,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAEvD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,QAAQ;aAClB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAEvD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,MAAM,CAAC,UAAU;aAC7B;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,KAAK,CAAC;aACvC;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CAC9D,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CACxC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,UAAU,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAExC,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,UAAU;gBACnB,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC;aACnD;SACF,CAAC,CACH,CAAC;QACF,MAAM,CACJ,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,kBAAkB,CAC5D,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,UAAU,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAExC,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,UAAU;gBACnB,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,UAAU,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpD,UAAU,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAEzC,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,aAAa,CAAC,mBAAmB,CAAE;gBAC/C,OAAO,EAAE,UAAU;gBACnB,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO;gBACP,SAAS;aACV;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC,CAAC;aACxE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC7B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEhD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,QAAQ;aAClB;SACF,CAAC,CACH,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;QAEpC,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO,EAAE,QAAQ;aAClB;SACF,CAAC,CACH,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,OAAO;aACR;YACD,GAAG,EAAE;gBACH,OAAO,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;aAC1C;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QACtD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,kBAAkB,CAAC,CAAC,EAAE,CAAC,KAAK,CACjE,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CACxC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,UAAU,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAExC,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,OAAO;aACR;YACD,GAAG,EAAE;gBACH,OAAO,EAAE,UAAU;aACpB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QAC/D,MAAM,CACJ,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,EAAE,kBAAkB,CAC5D,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QAEnE,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAClD,UAAU,EAAE,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAE1C,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,OAAO,EAAE,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAE;aACtD;YACD,GAAG,EAAE;gBACH,OAAO,EAAE,UAAU;aACpB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACpE,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QAEnE,MAAM,UAAU,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACvD,UAAU,EAAE,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAE1C,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,OAAO,EAAE,GAAG,CAAC,aAAa,CAAC,wBAAwB,CAAE;aACtD;YACD,GAAG,EAAE;gBACH,OAAO,EAAE,UAAU;aACpB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QACxE,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO;gBACP,SAAS;aACV;YACD,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE;gBAC1D,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3D,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC,CAAC;aACxE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO;gBACP,SAAS;aACV;YACD,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE;aAC3D;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3D,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC,CAAC;aACxE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QAClB,MAAM,CACJ,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC;YACjE,EAAE,kBAAkB,CACvB,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,oCAAoC,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,GAAG,EAAE;gBACH,MAAM;gBACN,OAAO;gBACP,SAAS;aACV;YACD,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE;gBAC1D,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3D,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC,CAAC;aACxE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;QAClB,MAAM,CACJ,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,2CAA2C,CAAC;YACjE,EAAE,kBAAkB,CACvB,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,aAAa,GAAkC,EAAE,CAAC;QACxD,aAAa,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAE9B,GAAG,CAAC,aAAa,CACf,cAAc,CAAC,kBAAkB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAC3D,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACjD,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,aAAa,GAAkC,EAAE,CAAC;QACxD,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAE3B,GAAG,CAAC,aAAa,CACf,cAAc,CAAC,kBAAkB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAC3D,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,aAAa,GAAkC,EAAE,CAAC;QACxD,aAAa,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAE9B,GAAG,CAAC,aAAa,CACf,cAAc,CAAC,kBAAkB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAC3D,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACjD,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,aAAa,GAAkC,EAAE,CAAC;QACxD,aAAa,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;QAEhC,GAAG,CAAC,aAAa,CACf,cAAc,CACZ,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,CAAE,EAAE,aAAa,CAAC,CACnE,CACF,CAAC;QAEF,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAClE,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;QAC1E,MAAM,MAAM,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE;gBACP;oBACE,GAAG,EAAE,EAAE,OAAO,EAAE;oBAChB,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;iBACzB;gBACD;oBACE,GAAG,EAAE;wBACH,MAAM;wBACN,OAAO,EAAE,MAAM;wBACf,SAAS;qBACV;oBACD,GAAG,EAAE;wBACH,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE;wBAC1D,SAAS,EAAE,IAAI;qBAChB;iBACF;aACF;SACF,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QAC3D,MAAM,CAAC,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,kCAAkC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE;aACzE,IAAI,CAAC;IACV,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,MAAM,GAAG,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE;gBACP;oBACE,GAAG,EAAE,EAAE,OAAO,EAAE;oBAChB,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE;iBACzB;gBACD;oBACE,GAAG,EAAE;wBACH,MAAM;wBACN,OAAO,EAAE,MAAM;wBACf,SAAS;qBACV;oBACD,GAAG,EAAE;wBACH,MAAM,EAAE,GAAG,CAAC,GAAI,CAAC,aAAa,CAAC,yBAAyB,CAAE;wBAC1D,SAAS,EAAE,IAAI;qBAChB;iBACF;aACF;SACF,CAAC,CACH,CAAC;QACF,MAAM,GAAG,CAAC,cAAc,CAAC;QAEzB,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,EAAE;SACZ,CAAC,CACH,CAAC;QACF,MAAM,GAAG,CAAC,cAAc,CAAC;QAEzB,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,GAAG,CAAC,aAAa,CACf,cAAc,CAAC;YACb,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,EAAE;SACZ,CAAC,CACH,CAAC;QACF,MAAM,GAAG,CAAC,cAAc,CAAC;QAEzB,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { html, fixture, expect } from '@open-wc/testing';\nimport { SinonSpy, spy } from 'sinon';\n\nimport './mock-editor.js';\nimport { MockEditor } from './mock-editor.js';\n\nimport { createUpdateAction, newActionEvent } from '../../src/foundation.js';\n\ndescribe('EditingElement', () => {\n  let elm: MockEditor;\n  let doc: XMLDocument;\n  let parent: Element;\n  let element: Element;\n  let reference: Node | null;\n\n  let validateEvent: SinonSpy;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/Editing.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    elm = <MockEditor>(\n      await fixture(html`<mock-editor .doc=${doc}></mock-editor>`)\n    );\n\n    parent = elm.doc!.querySelector('VoltageLevel[name=\"E1\"]')!;\n    element = parent.querySelector('Bay[name=\"Q01\"]')!;\n    reference = element.nextSibling;\n\n    validateEvent = spy();\n    window.addEventListener('validate', validateEvent);\n  });\n\n  it('creates an element on receiving a Create Action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: elm.doc!.createElement('newBay'),\n          reference: null,\n        },\n      })\n    );\n    expect(elm.doc!.querySelector('newBay')).to.not.be.null;\n  });\n\n  it('creates an Node on receiving a Create Action', () => {\n    const testNode = document.createTextNode('myTestNode');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: testNode,\n        },\n      })\n    );\n    expect(parent.lastChild).to.equal(testNode);\n  });\n\n  it('creates the Node based on the reference definition', () => {\n    const testNode = document.createTextNode('myTestNode');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: testNode,\n          reference: parent.firstChild,\n        },\n      })\n    );\n    expect(parent.firstChild).to.equal(testNode);\n  });\n\n  it('triggers getReference with missing reference on Create Action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: elm.doc!.createElement('Bay'),\n        },\n      })\n    );\n    expect(parent.querySelector('Bay')?.nextElementSibling).to.equal(\n      parent.querySelector('Bay[name=\"Q01\"]')\n    );\n  });\n\n  it('ignores getReference with existing reference on Create Action', () => {\n    const newElement = elm.doc!.createElement('Bay');\n    newElement?.setAttribute('name', 'Q03');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: newElement,\n          reference: parent.querySelector('Bay[name=\"Q02\"]'),\n        },\n      })\n    );\n    expect(\n      parent.querySelector('Bay[name=\"Q03\"]')?.nextElementSibling\n    ).to.equal(parent.querySelector('Bay[name=\"Q02\"]'));\n  });\n\n  it('does not creates an element on name attribute conflict', () => {\n    const newElement = elm.doc!.createElement('Bay');\n    newElement?.setAttribute('name', 'Q01');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent,\n          element: newElement,\n          reference: null,\n        },\n      })\n    );\n    expect(parent.querySelectorAll('Bay[name=\"Q01\"]').length).to.be.equal(1);\n  });\n\n  it('does not creates an element on id attribute conflict', () => {\n    const newElement = elm.doc!.createElement('DOType');\n    newElement?.setAttribute('id', 'testId');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        new: {\n          parent: doc.querySelector('DataTypeTemplates')!,\n          element: newElement,\n          reference: null,\n        },\n      })\n    );\n    expect(doc.querySelector('DOType')).to.be.null;\n  });\n\n  it('deletes an element on receiving a Delete action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element,\n          reference,\n        },\n      })\n    );\n    expect(elm.doc!.querySelector('VoltageLevel[name=\"E1\"] > Bay[name=\"Q01\"]'))\n      .to.be.null;\n  });\n\n  it('deletes a Node on receiving a Delete action', () => {\n    const testNode = document.createTextNode('myTestNode');\n    parent.appendChild(testNode);\n    expect(testNode.parentNode).to.be.equal(parent);\n\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element: testNode,\n        },\n      })\n    );\n\n    expect(parent.lastChild).to.not.equal(testNode);\n    expect(testNode.parentNode).to.be.null;\n  });\n\n  it('correctly handles incorrect delete action definition', () => {\n    const testNode = document.createTextNode('myTestNode');\n    expect(testNode.parentNode).to.null;\n\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element: testNode,\n        },\n      })\n    );\n\n    expect(parent.lastChild).to.not.equal(testNode);\n    expect(testNode.parentNode).to.null;\n  });\n\n  it('replaces an element on receiving an Replace action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          element,\n        },\n        new: {\n          element: elm.doc!.createElement('newBay'),\n        },\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.be.null;\n    expect(parent.querySelector('newBay')).to.not.be.null;\n    expect(parent.querySelector('newBay')?.nextElementSibling).to.equal(\n      parent.querySelector('Bay[name=\"Q02\"]')\n    );\n  });\n\n  it('does not replace an element in case of name conflict', () => {\n    const newElement = elm.doc!.createElement('Bay');\n    newElement?.setAttribute('name', 'Q02');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          element,\n        },\n        new: {\n          element: newElement,\n        },\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.not.be.null;\n    expect(\n      parent.querySelector('Bay[name=\"Q01\"]')?.nextElementSibling\n    ).to.equal(parent.querySelector('Bay[name=\"Q02\"]'));\n  });\n\n  it('replaces id defined element on receiving Replace action', () => {\n    expect(doc.querySelector('LNodeType[id=\"testId\"]')).to.not.be.null;\n\n    const newElement = doc.createElement('LNodeType');\n    newElement?.setAttribute('id', 'testId3');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          element: doc.querySelector('LNodeType[id=\"testId\"]')!,\n        },\n        new: {\n          element: newElement,\n        },\n      })\n    );\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId\"]')).to.be.null;\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId3\"]')).to.not.be.null;\n  });\n\n  it('does not replace an element in case of id conflict', () => {\n    expect(doc.querySelector('LNodeType[id=\"testId\"]')).to.not.be.null;\n\n    const newElement = elm.doc!.createElement('LNodeType');\n    newElement?.setAttribute('id', 'testId1');\n\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          element: doc.querySelector('LNodeType[id=\"testId\"]')!,\n        },\n        new: {\n          element: newElement,\n        },\n      })\n    );\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId\"]')).to.not.be.null;\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId1\"]')).to.be.null;\n  });\n\n  it('moves an element on receiving a Move action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element,\n          reference,\n        },\n        new: {\n          parent: elm.doc!.querySelector('VoltageLevel[name=\"J1\"]')!,\n          reference: null,\n        },\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.be.null;\n    expect(elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Bay[name=\"Q01\"]'))\n      .to.not.be.null;\n  });\n\n  it('triggers getReference with missing reference on Move action', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element,\n          reference,\n        },\n        new: {\n          parent: elm.doc!.querySelector('VoltageLevel[name=\"J1\"]')!,\n        },\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.be.null;\n    expect(elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Bay[name=\"Q01\"]'))\n      .to.not.be.null;\n    expect(\n      elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Bay[name=\"Q01\"]')\n        ?.nextElementSibling\n    ).to.equal(elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Function'));\n  });\n\n  it('does not move an element in case of name conflict', () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        old: {\n          parent,\n          element,\n          reference,\n        },\n        new: {\n          parent: elm.doc!.querySelector('VoltageLevel[name=\"J1\"]')!,\n          reference: null,\n        },\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.be.null;\n    expect(elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Bay[name=\"Q01\"]'))\n      .to.not.be.null;\n    expect(\n      elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > Bay[name=\"Q01\"]')\n        ?.nextElementSibling\n    ).to.be.null;\n  });\n\n  it('updates an element on receiving an Update action', () => {\n    const newAttributes: Record<string, string | null> = {};\n    newAttributes['name'] = 'Q03';\n\n    elm.dispatchEvent(\n      newActionEvent(createUpdateAction(element, newAttributes))\n    );\n\n    expect(element.parentElement).to.equal(parent);\n    expect(element).to.have.attribute('name', 'Q03');\n    expect(element).to.not.have.attribute('desc');\n  });\n\n  it('allows empty string as attribute value', () => {\n    const newAttributes: Record<string, string | null> = {};\n    newAttributes['name'] = '';\n\n    elm.dispatchEvent(\n      newActionEvent(createUpdateAction(element, newAttributes))\n    );\n\n    expect(element.parentElement).to.equal(parent);\n    expect(element).to.have.attribute('name', '');\n    expect(element).to.not.have.attribute('desc');\n  });\n\n  it('does not update an element in case of name conflict', () => {\n    const newAttributes: Record<string, string | null> = {};\n    newAttributes['name'] = 'Q02';\n\n    elm.dispatchEvent(\n      newActionEvent(createUpdateAction(element, newAttributes))\n    );\n\n    expect(element.parentElement).to.equal(parent);\n    expect(element).to.have.attribute('name', 'Q01');\n    expect(element).to.have.attribute('desc', 'Bay');\n  });\n\n  it('does not update an element in case of id conflict', () => {\n    const newAttributes: Record<string, string | null> = {};\n    newAttributes['id'] = 'testId1';\n\n    elm.dispatchEvent(\n      newActionEvent(\n        createUpdateAction(doc.querySelector('LNodeType')!, newAttributes)\n      )\n    );\n\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId\"]')).to.exist;\n    expect(elm.doc!.querySelector('LNodeType[id=\"testId1\"]')).to.not.exist;\n  });\n\n  it('carries out subactions sequentially on receiving a ComplexAction', () => {\n    const child3 = elm.doc!.createElement('newBay');\n    elm.dispatchEvent(\n      newActionEvent({\n        title: 'Test complex action',\n        actions: [\n          {\n            old: { element },\n            new: { element: child3 },\n          },\n          {\n            old: {\n              parent,\n              element: child3,\n              reference,\n            },\n            new: {\n              parent: elm.doc!.querySelector('VoltageLevel[name=\"J1\"]')!,\n              reference: null,\n            },\n          },\n        ],\n      })\n    );\n    expect(parent.querySelector('Bay[name=\"Q01\"]')).to.be.null;\n    expect(elm.doc!.querySelector('VoltageLevel[name=\"J1\"] > newBay')).to.not.be\n      .null;\n  });\n\n  it('triggers a validation event on receiving a ComplexAction', async () => {\n    const child3 = elm.doc!.createElement('newBay');\n    elm.dispatchEvent(\n      newActionEvent({\n        title: 'Test complex action',\n        actions: [\n          {\n            old: { element },\n            new: { element: child3 },\n          },\n          {\n            old: {\n              parent,\n              element: child3,\n              reference,\n            },\n            new: {\n              parent: elm.doc!.querySelector('VoltageLevel[name=\"J1\"]')!,\n              reference: null,\n            },\n          },\n        ],\n      })\n    );\n    await elm.updateComplete;\n\n    expect(validateEvent).to.be.calledOnce;\n  });\n\n  it('does not exchange doc with empty complex action', async () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        title: 'Test complex action',\n        actions: [],\n      })\n    );\n    await elm.updateComplete;\n\n    expect(doc).to.equal(elm.doc);\n  });\n\n  it('does not trigger validation with empty complex action', async () => {\n    elm.dispatchEvent(\n      newActionEvent({\n        title: 'Test complex action',\n        actions: [],\n      })\n    );\n    await elm.updateComplete;\n\n    expect(validateEvent).to.not.been.called;\n  });\n});\n"]}