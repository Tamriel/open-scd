{"version":3,"file":"datype.test.js","sourceRoot":"","sources":["../../../../../test/unit/validators/templates/datype.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { dATypeValidator } from '../../../../src/validators/templates/datype.js';\n\ndescribe('datype validator', () => {\n  let doc: XMLDocument;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/validators/datatypetemplateerrors.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('return empty array if element is not DAType', async () => {\n    const element = doc.querySelector('DOType')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n  it('returns empty array if DAType includes all mandatory BDAs', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.RangeConfig\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n  it('return Issues for missing mandatory BDA e.g scaledOffset', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.ScaledValueConfig\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns Issues for missing DA within Oper structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.Operfalse\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns empty array for correct Oper structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.Oper\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns Issue array for missing DA within SBOw structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.SBOwfalse\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns empty array for correct SBOw structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.SBOw\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns Issue array for missing DA within Cancel structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.Cancelfalse\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns empty array for correct Cancel structure', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.Cancel\"]')!;\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns empty array id less DAType', async () => {\n    const element = doc.querySelector('DAType[id=\"Dummy.Cancelfalse\"]')!;\n    element.removeAttribute('id');\n    const errors = await dATypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n});\n"]}