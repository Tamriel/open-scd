{"version":3,"file":"dabda.test.js","sourceRoot":"","sources":["../../../../../test/unit/validators/templates/dabda.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { dAValidator } from '../../../../src/validators/templates/dabda.js';\n\ndescribe('da or bda validator', () => {\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/validators/doandsdotestfile.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('return Issues when DA type attribute is missing for Struct type', async () => {\n    const element = doc.querySelector('DOType[id=\"missingType1\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('return empty array for correct DA type attribute - Struct type', async () => {\n    const element = doc.querySelector('DOType[id=\"existingType1\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('return Issues when DA type attribute is missing for Enum type', async () => {\n    const element = doc.querySelector('DOType[id=\"missingType2\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('return empty array for correct DA type attribute - Enum type', async () => {\n    const element = doc.querySelector('DOType[id=\"existingType2\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('return Issues when DA type reference is missing - Struct type', async () => {\n    const element = doc.querySelector('DOType[id=\"invalidReference1\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingReference');\n  });\n\n  it('return Issues when DA type reference is missing - Enum type', async () => {\n    const element = doc.querySelector('DOType[id=\"invalidReference2\"] > DA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingReference');\n  });\n\n  it('return Issues when BDA type attribute is missing - Struct type', async () => {\n    const element = doc.querySelector('DAType[id=\"missingType1\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('return empty array for correct BDA type attribute - Struct type', async () => {\n    const element = doc.querySelector('DAType[id=\"existingType1\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('return Issues when BDA type attribute is missing for Enum type', async () => {\n    const element = doc.querySelector('DAType[id=\"missingType2\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('return empty array for correct BDA type attribute - Enum type', async () => {\n    const element = doc.querySelector('DAType[id=\"existingType2\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('return Issues when BDA type reference is missing - Struct type', async () => {\n    const element = doc.querySelector('DAType[id=\"invalidReference1\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingReference');\n  });\n\n  it('return Issues when BDA type reference is missing - Enum type', async () => {\n    const element = doc.querySelector('DAType[id=\"invalidReference2\"] > BDA')!;\n    const errors = await dAValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingReference');\n  });\n});\n"]}