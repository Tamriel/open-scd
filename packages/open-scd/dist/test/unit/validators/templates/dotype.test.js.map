{"version":3,"file":"dotype.test.js","sourceRoot":"","sources":["../../../../../test/unit/validators/templates/dotype.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { dOTypeValidator } from '../../../../src/validators/templates/dotype.js';\n\ndescribe('dotype validator', () => {\n  let doc: XMLDocument;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/validators/datatypetemplateerrors.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('return empty array if element is not DOType', async () => {\n    const element = doc.querySelector('LNodeType')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns empty array if DOType includes all mandatory DAs', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.LPHD1.Sim\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('return Issues for missing mandatory DA e.g stVal', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.LLN0.Health\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('return Issues for missing mandatory DA e.g another stVal', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.XCBR1.Pos\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('return Issues for missing mandatory DA e.g ctlModel', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.CSWI.Pos1\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('return Issues for missing cdc attribute within DOType', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.MissingCDC\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('return Issues if CDC definition does not follow NSD ', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.XCBR1.badNamPlt\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('does not validate CDC to NSD with missing id', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.XCBR1.badNamPlt\"]')!;\n    element.removeAttribute('id');\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns Issues from child validation', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.badWYE\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns empty array for non-controllable data objects', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.LPHD1.PhyNam\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('returns Issues for missing SBOw', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC1\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('returns Issues for missing SBO', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC2\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('returns Issues for missing Oper', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC3\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('returns Issues for missing Cancel', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC3\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('mandatoryChild');\n  });\n\n  it('does not indicate false positive for status-only DOs', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC4\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('does not indicate false positive for empty ctlModel', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.XCBR1.Pos1\"]')!;\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n\n  it('does not indicate false positive for wrong ctlModel', async () => {\n    const element = doc.querySelector('DOType[id=\"Dummy.SPC4\"]')!;\n    const val = element.querySelector('Val')!;\n    val.innerHTML = 'invalidCtlModel';\n    const errors = await dOTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n});\n"]}