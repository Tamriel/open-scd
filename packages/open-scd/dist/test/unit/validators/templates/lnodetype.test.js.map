{"version":3,"file":"lnodetype.test.js","sourceRoot":"","sources":["../../../../../test/unit/validators/templates/lnodetype.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,mDAAmD,CAAC;AAEvF,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,GAAgB,CAAC;IACrB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,GAAG,GAAG,MAAM,KAAK,CAAC,uDAAuD,CAAC;aACvE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,4BAA4B,CAAE,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,4BAA4B,CAAE,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,oCAAoC,CAAE,CAAC;QACzE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,4BAA4B,CAAE,CAAC;QACjE,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,6BAA6B,CAAE,CAAC;QAClE,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { lNodeTypeValidator } from '../../../../src/validators/templates/lnodetype.js';\n\ndescribe('lnodetype validator', () => {\n  let doc: XMLDocument;\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/validators/datatypetemplateerrors.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('return Issue for missing mandatory DO e.g Beh', async () => {\n    const element = doc.querySelector('LNodeType[id=\"Dummy.CILO\"]')!;\n    const errors = await lNodeTypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('return Issues for missing mandatory DO e.g Pos', async () => {\n    const element = doc.querySelector('LNodeType[id=\"Dummy.CSWI\"]')!;\n    const errors = await lNodeTypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns Issues if child element is invalid', async () => {\n    const element = doc.querySelector('LNodeType[id=\"Dummy.invalidChild\"]')!;\n    const errors = await lNodeTypeValidator(element);\n    expect(errors.length).to.equal(1);\n  });\n\n  it('returns Issues if lnClass attribute is missing', async () => {\n    const element = doc.querySelector('LNodeType[id=\"Dummy.CILO\"]')!;\n    element.removeAttribute('lnClass');\n    const errors = await lNodeTypeValidator(element);\n    expect(errors.length).to.equal(1);\n    expect(errors[0].title).to.contain('missingAttribute');\n  });\n\n  it('returns empty array if LNodeType includes all mandatory DOs', async () => {\n    const element = doc.querySelector('LNodeType[id=\"Dummy.GGIO1\"]')!;\n    const errors = await lNodeTypeValidator(element);\n    expect(errors.length).to.equal(0);\n  });\n});\n"]}