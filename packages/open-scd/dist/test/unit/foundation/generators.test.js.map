{"version":3,"file":"generators.test.js","sourceRoot":"","sources":["../../../../test/unit/foundation/generators.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport {\n  appIdGenerator,\n  mACAddressGenerator,\n} from '../../../src/foundation/generators.js';\n\ndescribe('MAC-Address generator function', () => {\n  let macGenerator: () => string;\n  let doc: XMLDocument;\n\n  describe('for GSE elements', () => {\n    beforeEach(() => {\n      doc = new DOMParser().parseFromString(\n        `<ConnectedAP>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-00</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-01</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-02</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-04</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-06</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-07</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-08</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-09</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-10</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-12</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-13</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-14</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-15</P></Address></GSE>\n            <GSE><Address><P type=\"MAC-Address\">01-0C-CD-01-00-0F</P></Address></GSE>\n        </ConnectedAP>`,\n        'application/xml'\n      );\n\n      macGenerator = mACAddressGenerator(doc, 'GSE');\n    });\n\n    it('returns unique MAC-Address', () =>\n      expect(macGenerator()).to.equal('01-0C-CD-01-00-03'));\n\n    it('always returns unique Mac-Address', () => {\n      expect(macGenerator()).to.equal('01-0C-CD-01-00-03');\n      expect(macGenerator()).to.equal('01-0C-CD-01-00-05');\n      expect(macGenerator()).to.equal('01-0C-CD-01-00-0A');\n      expect(macGenerator()).to.equal('01-0C-CD-01-00-0B');\n    });\n  });\n\n  describe('for SMV elements', () => {\n    beforeEach(() => {\n      doc = new DOMParser().parseFromString(\n        `<ConnectedAP>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-00</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-01</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-02</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-03</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-06</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-07</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-08</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-09</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-10</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-12</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-13</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-14</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-15</P></Address></SMV>\n            <SMV><Address><P type=\"MAC-Address\">01-0C-CD-04-00-0B</P></Address></SMV>\n        </ConnectedAP>`,\n        'application/xml'\n      );\n\n      macGenerator = mACAddressGenerator(doc, 'SMV');\n    });\n\n    it('returns unique MAC-Address', () =>\n      expect(macGenerator()).to.equal('01-0C-CD-04-00-04'));\n\n    it('always returns unique MAC-Address', () => {\n      expect(macGenerator()).to.equal('01-0C-CD-04-00-04');\n      expect(macGenerator()).to.equal('01-0C-CD-04-00-05');\n      expect(macGenerator()).to.equal('01-0C-CD-04-00-0A');\n      expect(macGenerator()).to.equal('01-0C-CD-04-00-0C');\n    });\n  });\n});\n\ndescribe('APPID generator function', () => {\n  let appidGenerator: () => string;\n  let doc: XMLDocument;\n\n  describe('for GSE elements Type1B (default)', () => {\n    beforeEach(() => {\n      doc = new DOMParser().parseFromString(\n        `<ConnectedAP>\n              <GSE><Address><P type=\"APPID\">0001</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0002</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0004</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0005</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0006</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0007</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0008</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0009</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">000A</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">000C</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">000E</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">000F</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">0010</P></Address></GSE>\n          </ConnectedAP>`,\n        'application/xml'\n      );\n\n      appidGenerator = appIdGenerator(doc, 'GSE');\n    });\n\n    it('returns unique APPID', () => expect(appidGenerator()).to.equal('0000'));\n\n    it('always returns unique APPID', () => {\n      expect(appidGenerator()).to.equal('0000');\n      expect(appidGenerator()).to.equal('0003');\n      expect(appidGenerator()).to.equal('000B');\n      expect(appidGenerator()).to.equal('000D');\n      expect(appidGenerator()).to.equal('0011');\n    });\n  });\n\n  describe('for GSE elements Type1A (Trip)', () => {\n    beforeEach(() => {\n      doc = new DOMParser().parseFromString(\n        `<ConnectedAP>\n              <GSE><Address><P type=\"APPID\">8001</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8002</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8004</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8005</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8006</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8007</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8008</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8009</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">800A</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">800C</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">800E</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">800F</P></Address></GSE>\n              <GSE><Address><P type=\"APPID\">8010</P></Address></GSE>\n          </ConnectedAP>`,\n        'application/xml'\n      );\n\n      appidGenerator = appIdGenerator(doc, 'GSE', true);\n    });\n\n    it('returns unique APPID', () => expect(appidGenerator()).to.equal('8000'));\n\n    it('always returns unique APPID', () => {\n      expect(appidGenerator()).to.equal('8000');\n      expect(appidGenerator()).to.equal('8003');\n      expect(appidGenerator()).to.equal('800B');\n      expect(appidGenerator()).to.equal('800D');\n      expect(appidGenerator()).to.equal('8011');\n    });\n  });\n\n  describe('for SMV elements', () => {\n    beforeEach(() => {\n      doc = new DOMParser().parseFromString(\n        `<ConnectedAP>\n            <SMV><Address><P type=\"APPID\">4000</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4001</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4002</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4004</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4005</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4007</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4009</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">400A</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">400B</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">400D</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">400E</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4011</P></Address></SMV>\n            <SMV><Address><P type=\"APPID\">4009</P></Address></SMV>\n          </ConnectedAP>`,\n        'application/xml'\n      );\n\n      appidGenerator = appIdGenerator(doc, 'SMV');\n    });\n\n    it('returns unique APPID', () => expect(appidGenerator()).to.equal('4003'));\n\n    it('always returns unique APPID', () => {\n      expect(appidGenerator()).to.equal('4003');\n      expect(appidGenerator()).to.equal('4006');\n      expect(appidGenerator()).to.equal('4008');\n      expect(appidGenerator()).to.equal('400C');\n    });\n  });\n});\n"]}