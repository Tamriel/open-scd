{"version":3,"file":"compare.test.js","sourceRoot":"","sources":["../../../../test/unit/foundation/compare.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixtureSync } from '@open-wc/testing';\n\nimport { html } from 'lit-element';\n\nimport {\n  DiffFilter,\n  diffSclAttributes,\n  diffSclChilds,\n  identityForCompare,\n  isSame,\n  renderDiff,\n} from '../../../src/foundation/compare.js';\n\ndescribe('compas-compare-dialog', () => {\n  let oldSclElement: Element;\n  let newSclElement: Element;\n\n  beforeEach(async () => {\n    oldSclElement = await fetch(\n      '/test/testfiles/foundation/compare-original.cid'\n    )\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'))\n      .then(document => document.documentElement);\n    newSclElement = await fetch(\n      '/test/testfiles/foundation/compare-changed.cid'\n    )\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'))\n      .then(document => document.documentElement);\n  });\n\n  describe('identityForCompare', () => {\n    it('will return the identity of the sub element, not the full identity', () => {\n      const voltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const result = identityForCompare(voltageLevel!);\n      expect(result).to.be.equal('S1 30kV');\n    });\n\n    it('will return the identity of the main element, meaning the full identity', () => {\n      const substation = oldSclElement.querySelector(\n        'Substation[name=\"Substation 1\"]'\n      );\n\n      const result = identityForCompare(substation!);\n      expect(result).to.be.equal('Substation 1');\n    });\n\n    it('will return the NaN of the root element', () => {\n      const substation = oldSclElement.querySelector('SCL');\n\n      const result = identityForCompare(substation!);\n      expect(result).to.be.NaN;\n    });\n  });\n\n  describe('isSame', () => {\n    it('will return true when the same elements are passed', () => {\n      const voltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const same = isSame(voltageLevel!, voltageLevel!);\n      expect(same).to.be.true;\n    });\n\n    it('will return true when the same elements from different sources are passed', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const same = isSame(newVoltageLevel!, oldVoltageLevel!);\n      expect(same).to.be.true;\n    });\n\n    it('will return false when the different type of elements are passed', () => {\n      const voltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const substation = oldSclElement.querySelector(\n        'Substation[name=\"Substation 1\"]'\n      );\n\n      const same = isSame(voltageLevel!, substation!);\n      expect(same).to.be.false;\n    });\n\n    it('will return false when the different elements of the same type are passed', () => {\n      const voltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const differentVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 380kV\"]'\n      );\n\n      const same = isSame(differentVoltageLevel!, voltageLevel!);\n      expect(same).to.be.false;\n    });\n  });\n\n  describe('diffSclAttributes', () => {\n    it('no attributes changed', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const diffAttributes = diffSclAttributes(\n        newVoltageLevel!,\n        oldVoltageLevel!,\n        {},\n        newVoltageLevel!\n      );\n      expect(diffAttributes).to.have.length(0);\n    });\n\n    it('one attribute has changed', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n\n      const diffAttributes = diffSclAttributes(\n        newVoltageLevel!,\n        oldVoltageLevel!,\n        {},\n        newVoltageLevel!\n      );\n      expect(diffAttributes).to.have.length(1);\n      expect(diffAttributes[0][0]).to.be.equal('desc');\n      expect(diffAttributes[0][1].oldValue).to.be.null;\n      expect(diffAttributes[0][1].newValue).to.be.equal('Extra Voltage Level');\n    });\n\n    it('only name changed on copied element', () => {\n      const newSubstation = newSclElement.querySelector(\n        'Substation[name=\"Substation 1 (Copy)\"]'\n      );\n      const oldSubstation = oldSclElement.querySelector(\n        'Substation[name=\"Substation 1\"]'\n      );\n\n      const diffAttributes = diffSclAttributes(newSubstation!, oldSubstation!, {}, newSubstation!);\n      expect(diffAttributes).to.have.length(1);\n      expect(diffAttributes[0][0]).to.be.equal('name');\n      expect(diffAttributes[0][1].oldValue).to.be.equal('Substation 1');\n      expect(diffAttributes[0][1].newValue).to.be.equal('Substation 1 (Copy)');\n    });\n  });\n\n  describe('diffSclChilds', () => {\n    it('all children can be updated', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 380kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 380kV\"]'\n      );\n\n      const diffChilds = diffSclChilds(newVoltageLevel!, oldVoltageLevel!, {}, newVoltageLevel!, oldVoltageLevel!);\n      expect(diffChilds).to.have.length(5);\n\n      const updatedChilds = diffChilds.filter(\n        diff => diff.newValue !== null && diff.oldValue !== null\n      );\n      expect(updatedChilds).to.have.length(5);\n    });\n\n    it('all children can be updated of a copied element', () => {\n      const newSubstation = newSclElement.querySelector(\n        'Substation[name=\"Substation 1 (Copy)\"]'\n      );\n      const oldSubstation = oldSclElement.querySelector(\n        'Substation[name=\"Substation 1\"]'\n      );\n\n      const diffChilds = diffSclChilds(newSubstation!, oldSubstation!, {}, newSclElement, oldSclElement);\n      expect(diffChilds).to.have.length(3);\n\n      const updatedChilds = diffChilds.filter(\n        diff => diff.newValue !== null && diff.oldValue !== null\n      );\n      expect(updatedChilds).to.have.length(3);\n    });\n\n    it('one child is added', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const diffChilds = diffSclChilds(newVoltageLevel!, oldVoltageLevel!, {}, newSclElement, oldSclElement);\n      expect(diffChilds).to.have.length(5);\n\n      const addedBay = diffChilds.filter(diff => diff.oldValue === null);\n      expect(addedBay).to.have.length(1);\n      expect(addedBay[0].newValue?.tagName).to.be.equal('Bay');\n    });\n\n    it('one child is removed', () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n\n      const diffChilds = diffSclChilds(newVoltageLevel!, oldVoltageLevel!, {}, newVoltageLevel!, oldVoltageLevel!);\n      expect(diffChilds).to.have.length(7);\n\n      const removedBay = diffChilds.filter(diff => diff.newValue === null);\n      expect(removedBay).to.have.length(1);\n      expect(removedBay[0].oldValue?.tagName).to.be.equal('Bay');\n    });\n  });\n\n  describe('renderDiff', () => {\n    it('no changes, so no template is returned', async () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 380kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 380kV\"]'\n      );\n\n      const templateResult = renderDiff(newVoltageLevel!, oldVoltageLevel!);\n      expect(templateResult).to.be.null;\n    });\n\n    it('child is added, so check latest snapshot', async () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const templateResult = renderDiff(newVoltageLevel!, oldVoltageLevel!);\n      expect(templateResult).to.be.not.null;\n\n      const element = fixtureSync(html`<div>${templateResult}</div>`);\n      await element;\n      await expect(element).to.equalSnapshot();\n    });\n\n    it('child is removed and attribute added/removed/updated, so check latest snapshot', async () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n\n      const templateResult = renderDiff(newVoltageLevel!, oldVoltageLevel!);\n      expect(templateResult).to.be.not.null;\n\n      const element = fixtureSync(html`<div>${templateResult}</div>`);\n      await element;\n      await expect(element).to.equalSnapshot();\n    });\n\n    it('child is added, but is ignored', async () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 30kV\"]'\n      );\n\n      const ignoreDiffs: DiffFilter<Element> = {\n        'Bay': {\n          full: true\n        }\n      }\n      const templateResult = renderDiff(newVoltageLevel!, oldVoltageLevel!, ignoreDiffs);\n\n      expect(templateResult).to.be.null;\n    });\n\n    it('attribute is updated, but is ignored, so check latest snapshot', async () => {\n      const newVoltageLevel = newSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n      const oldVoltageLevel = oldSclElement.querySelector(\n        'VoltageLevel[name=\"S1 110kV\"]'\n      );\n      const ignoreDiffs: DiffFilter<Element> = {\n        'Bay': {\n          full: false,\n          attributes: {\n            'desc': true\n          }\n        }\n      };\n\n      const templateResult = renderDiff(newVoltageLevel!, oldVoltageLevel!, ignoreDiffs);\n\n      expect(templateResult).to.be.not.null;\n\n      const element = fixtureSync(html`<div>${templateResult}</div>`);\n      await element;\n      await expect(element).to.equalSnapshot();\n    });\n\n  });\n});\n"]}