{"version":3,"file":"Wizards.test.js","sourceRoot":"","sources":["../../../test/unit/Wizards.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,6BAA6B,CAAC;AAGrC,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAEzD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,OAAgB,CAAC;IACrB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,OAAO,GAAY,CACjB,MAAM,OAAO,CAAC,IAAI,CAAA,uBAAuB,QAAQ,kBAAkB,CAAC,CACrE,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE,CAC3C,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAEpD,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE,CACtC,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAE/C,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,OAAO,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,OAAO,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAoB,CAClB,OAAO;iBACJ,UAAW,CAAC,aAAa,CAAC,eAAe,CAAE;iBAC3C,UAAW,CAAC,aAAa,CAAC,kCAAkC,CAAC,CAChE,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAkB;YAC1E,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../src/addons/Wizards.js';\nimport { Wizards } from '../../src/addons/Wizards.js';\n\nimport { newWizardEvent } from '../../src/foundation.js';\n\ndescribe('OSCD-Wizard', () => {\n  let element: Wizards;\n  beforeEach(async () => {\n    element = <Wizards>(\n      await fixture(html`<oscd-wizards .host=${document}></oscd-wizards>`)\n    );\n  });\n\n  it('starts out with an empty workflow', () =>\n    expect(element).property('workflow').to.be.empty);\n\n  it('shows no wizard-dialog', async () =>\n    await expect(element).shadowDom.to.be.empty);\n\n  it('adds a wizard factory to the workflow on non-null WizardEvent', () => {\n    element.dispatchEvent(newWizardEvent([{ title: 'Test Page 1' }]));\n    expect(element).property('workflow').to.have.lengthOf(1);\n  });\n\n  describe('with a wizard factory in its workflow', () => {\n    beforeEach(async () => {\n      element.dispatchEvent(newWizardEvent([{ title: 'Test Page 1' }]));\n      await element.updateComplete;\n    });\n\n    it('removes the wizard factory on receiving a null WizardEvent', () => {\n      element.dispatchEvent(newWizardEvent());\n      expect(element).property('workflow').to.be.empty;\n    });\n\n    it('removes the wizard factory on wizard-dialog \"close\" action', async () => {\n      await (<HTMLElement>(\n        element\n          .shadowRoot!.querySelector('wizard-dialog')!\n          .shadowRoot!.querySelector('mwc-button[dialogAction=\"close\"]')\n      )).click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(element).property('workflow').to.be.empty;\n    });\n  });\n});\n"]}