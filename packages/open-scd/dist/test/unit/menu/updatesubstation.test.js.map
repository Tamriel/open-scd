{"version":3,"file":"updatesubstation.test.js","sourceRoot":"","sources":["../../../../test/unit/menu/updatesubstation.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AACzE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,IAAiB,CAAC;IACtB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,KAAK,CAAC,2CAA2C,CAAC;aAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAC9B,wFAAwF,CACzF,CAAC;QACF,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IAC7D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAC9B,iEAAiE,CAClE,CAAC;QACF,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IAC7D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;IAClD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAC5C,gEAAgE,CACjE,CAAC;QACF,mBAAmB,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;QAC1E,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAC5C,gEAAgE,CACjE,CAAC;QACF,mBAAmB,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;IAC5E,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAC9B,wFAAwF,CACzF,CAAC;QACF,KAAK,EAAE,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACvC,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport { isValidReference } from '../../../src/menu/UpdateSubstation.js';\nimport { identity } from '../../../src/foundation.js';\n\ndescribe('isValidReference', () => {\n  let ours: XMLDocument;\n  beforeEach(async () => {\n    ours = await fetch('/test/testfiles/updatesubstation-ours.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('returns true for lNodeIdentity pointing to logical node in the IED', () => {\n    const lNode = ours.querySelector(\n      'LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"1\"]'\n    );\n    expect(isValidReference(ours, identity(lNode))).to.be.true;\n  });\n  it('checks reference for client side logical nodes', () => {\n    const lNode = ours.querySelector(\n      'LNode[iedName=\"IED1\"][prefix=\"DC3\"][lnClass=\"XSWI\"][lnInst=\"2\"]'\n    );\n    expect(isValidReference(ours, identity(lNode))).to.be.true;\n  });\n  it('returns false for NaN identities', () => {\n    expect(isValidReference(ours, NaN)).to.be.false;\n  });\n  it('returns false for incorrect lNodeIdentities', () => {\n    const lNodeMissingIedNAme = ours.querySelector(\n      'LNode[iedName=\"IED1\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"2\"]'\n    );\n    lNodeMissingIedNAme?.removeAttribute('iedName');\n    expect(isValidReference(ours, identity(lNodeMissingIedNAme))).to.be.false;\n    const lNodeMissingLnClass = ours.querySelector(\n      'LNode[iedName=\"IED1\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"2\"]'\n    );\n    lNodeMissingLnClass?.removeAttribute('iedName');\n    expect(isValidReference(ours, identity(lNodeMissingLnClass))).to.be.false;\n  });\n  it('returns false when reference does not match with logical node', () => {\n    const lNode = ours.querySelector(\n      'LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"1\"]'\n    );\n    lNode?.setAttribute('lnClass', 'LPHD');\n    expect(isValidReference(ours, identity(lNode))).to.be.false;\n  });\n});\n"]}