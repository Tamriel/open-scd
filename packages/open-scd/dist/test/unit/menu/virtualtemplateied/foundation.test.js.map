{"version":3,"file":"foundation.test.js","sourceRoot":"","sources":["../../../../../test/unit/menu/virtualtemplateied/foundation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport { identity } from '../../../../src/foundation.js';\n\nimport {\n  getFunctionNamingPrefix,\n  getNonLeafParent,\n  getSpecificationIED,\n  getUniqueFunctionName,\n  isLeafFunction,\n  VirtualIEDDescription,\n} from '../../../../src/menu/virtualtemplateied/foundation.js';\n\ndescribe('foundation for virtual IED creation', () => {\n  describe('function checking for leaf function type elements', () => {\n    let randomElement: Element;\n    let leafSubFunction: Element;\n    let nonLeafSubFunction: Element;\n    let leafEqSubFunction: Element;\n    let nonLeafEqSubFunction: Element;\n\n    beforeEach(() => {\n      randomElement = new DOMParser().parseFromString(\n        '<Element name=\"someFunction\"></Element>',\n        'application/xml'\n      ).documentElement;\n\n      leafSubFunction = new DOMParser().parseFromString(\n        '<SubFunction name=\"leafFunction\"><LNode/></SubFunction>',\n        'application/xml'\n      ).documentElement;\n\n      nonLeafSubFunction = new DOMParser().parseFromString(\n        '<SubFunction name=\"nonLeafFunction\"><LNode/><LNode/></SubFunction>',\n        'application/xml'\n      ).documentElement;\n\n      leafEqSubFunction = new DOMParser().parseFromString(\n        '<EqSubFunction name=\"leafFunction\"><LNode/></EqSubFunction>',\n        'application/xml'\n      ).documentElement;\n\n      nonLeafEqSubFunction = new DOMParser().parseFromString(\n        '<EqSubFunction name=\"nonLeafFunction\"><LNode/><LNode/></EqSubFunction>',\n        'application/xml'\n      ).documentElement;\n    });\n\n    it('returns false for input null', () =>\n      expect(isLeafFunction(null)).to.be.false);\n\n    it('returns false for Function element', () =>\n      expect(isLeafFunction(randomElement)).to.be.false);\n\n    it('returns true for leaf SubFcuntion element', () =>\n      expect(isLeafFunction(leafSubFunction)).to.be.true);\n\n    it('returns true for non-leaf SubFuction element', () =>\n      expect(isLeafFunction(nonLeafSubFunction)).to.be.false);\n\n    it('returns true for leaf EqSubFunction element', () =>\n      expect(isLeafFunction(leafEqSubFunction)).to.be.true);\n\n    it('returns true for non-leaf SubFunction element', () =>\n      expect(isLeafFunction(nonLeafEqSubFunction)).to.be.false);\n  });\n\n  describe('getNonLeafParent function', () => {\n    let invalidParantTag: Element;\n    let directParent: Element;\n    let directParentsLNode: Element | null;\n    let leafParent: Element;\n    let leafParentsLNode: Element | null;\n\n    beforeEach(() => {\n      invalidParantTag = new DOMParser().parseFromString(\n        '<Element name=\"someElement\"><LNode/></Element>',\n        'application/xml'\n      ).documentElement;\n\n      directParent = new DOMParser().parseFromString(\n        '<SubFunction name=\"leafFunction\"><LNode/><LNode/></SubFunction>',\n        'application/xml'\n      ).documentElement;\n      directParentsLNode = directParent.querySelector('LNode');\n\n      leafParent = new DOMParser().parseFromString(\n        '<Function name=\"onLeaf\"><SubFunction name=\"leafFunction\"><LNode/></SubFunction></Function>',\n        'application/xml'\n      ).documentElement;\n      leafParentsLNode = leafParent.querySelector('LNode');\n    });\n\n    it('return null for null inputs', () =>\n      expect(getNonLeafParent(null)).to.be.null);\n\n    it('returns null for invalid closest parent tag', () =>\n      expect(getNonLeafParent(invalidParantTag)).to.be.null);\n\n    it('returns null for invalid parent tag', () =>\n      expect(getNonLeafParent(directParentsLNode)).to.equal(directParent));\n\n    it('returns null for invalid parent tag', () =>\n      expect(getNonLeafParent(leafParentsLNode)).to.equal(leafParent));\n  });\n\n  describe('getFunctionNamingPrefix function', () => {\n    let lNodeWithPrefix: Element;\n    let lNodeWithOutPrefix: Element;\n    let leafSubFunction: Element;\n    let leafSubFunctionsLNode: Element;\n    let nonLeafSubFunction: Element;\n    let nonLeafSubFunctionsLNode: Element;\n\n    beforeEach(() => {\n      lNodeWithPrefix = new DOMParser().parseFromString(\n        '<LNode prefix=\"\"/>',\n        'application/xml'\n      ).documentElement;\n\n      lNodeWithOutPrefix = new DOMParser().parseFromString(\n        '<LNode />',\n        'application/xml'\n      ).documentElement;\n\n      leafSubFunction = new DOMParser().parseFromString(\n        '<SubFunction name=\"leafFunction\"><LNode/></SubFunction>',\n        'application/xml'\n      ).documentElement;\n      leafSubFunctionsLNode = leafSubFunction.querySelector('LNode')!;\n\n      nonLeafSubFunction = new DOMParser().parseFromString(\n        '<SubFunction name=\"leafFunction\"><LNode/><LNode/></SubFunction>',\n        'application/xml'\n      ).documentElement;\n      nonLeafSubFunctionsLNode = nonLeafSubFunction.querySelector('LNode')!;\n    });\n\n    it('return prefix attribute if present in LNode', () =>\n      expect(getFunctionNamingPrefix(lNodeWithPrefix)).to.equal(\n        lNodeWithPrefix.getAttribute('prefix')\n      ));\n\n    it('return empty string if no valid prefix exist', () =>\n      expect(getFunctionNamingPrefix(lNodeWithOutPrefix)).to.equal(''));\n\n    it('returns leaf SubFunction name for missing prefix attribute', () =>\n      expect(getFunctionNamingPrefix(leafSubFunctionsLNode)).to.be.equal(\n        'leafFunction'\n      ));\n\n    it('returns empty string if no valid string exist', () =>\n      expect(getFunctionNamingPrefix(nonLeafSubFunctionsLNode)).to.be.equal(\n        ''\n      ));\n  });\n\n  describe('getUniqueFunctionName function', () => {\n    let doc: XMLDocument;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/virtualied/specificfromfunctions.ssd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('return unique name for function type element', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('EqFunction[name=\"Disconnector\"]')!\n        )\n      ).to.equal('Q01_QB1_Disconnector'));\n\n    it('return unique name for another function type element', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('EqFunction[name=\"Earth_Switch\"]')!\n        )\n      ).to.equal('E1_Q01_QC9_Earth_Switch'));\n\n    it('return function type element name if already unique in project', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('Function[name=\"Distance_Protection\"]')!\n        )\n      ).to.equal('Distance_Protection'));\n\n    it('return identity string in case input element is not function type element', () =>\n      expect(getUniqueFunctionName(doc.querySelector('Bay')!)).to.equal(\n        identity(doc.querySelector('Bay'))\n      ));\n  });\n\n  describe('getUniqueFunctionName function', () => {\n    let doc: XMLDocument;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/virtualied/specificfromfunctions.ssd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n    });\n\n    it('return unique name for function type element', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('EqFunction[name=\"Disconnector\"]')!\n        )\n      ).to.equal('Q01_QB1_Disconnector'));\n\n    it('return unique name for another function type element', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('EqFunction[name=\"Earth_Switch\"]')!\n        )\n      ).to.equal('E1_Q01_QC9_Earth_Switch'));\n\n    it('return function type element name if already unique in project', () =>\n      expect(\n        getUniqueFunctionName(\n          doc.querySelector('Function[name=\"Distance_Protection\"]')!\n        )\n      ).to.equal('Distance_Protection'));\n\n    it('return identity string in case input element is not function type element', () =>\n      expect(getUniqueFunctionName(doc.querySelector('Bay')!)).to.equal(\n        identity(doc.querySelector('Bay'))\n      ));\n  });\n\n  describe('getSpecificationIED function', () => {\n    let doc: XMLDocument;\n    let virtualIED: VirtualIEDDescription;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/virtualied/specificfromfunctions.ssd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      virtualIED = {\n        manufacturer: 'some manufactorer',\n        desc: null,\n        apName: 'P1',\n        lDevices: [\n          {\n            validLdInst: 'someProtection',\n            anyLNs: [\n              { lnClass: 'LLN0', inst: '', prefix: null, lnType: 'someLLN0' },\n              { lnClass: 'PTOC', inst: '1', prefix: 'IDD', lnType: 'somePTOC' },\n            ],\n          },\n          {\n            validLdInst: 'someControl',\n            anyLNs: [\n              { lnClass: 'LLN0', inst: '', prefix: null, lnType: 'someLLN0' },\n              { lnClass: 'CSWI', inst: '1', prefix: '', lnType: 'someCSWI' },\n            ],\n          },\n        ],\n      };\n    });\n\n    it('looks like the latest snapshot', async () =>\n      await expect(\n        getSpecificationIED(doc, virtualIED)\n      ).dom.to.equalSnapshot());\n  });\n});\n"]}