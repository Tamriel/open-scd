{"version":3,"file":"ValidateSchema.test.js","sourceRoot":"","sources":["../../../../test/integration/validators/ValidateSchema.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,wBAAwB,CAAC;AAGhC,OAAO,cAAc,MAAM,2CAA2C,CAAC;AAGvE,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS;QACtC,cAAc,CAAC,MAAM,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;IAE3D,IAAI,MAAmB,CAAC;IACxB,IAAI,OAAuB,CAAC;IAE5B,IAAI,WAAwB,CAAC;IAC7B,IAAI,YAAyB,CAAC;IAE9B,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA;;KAE1B,CAAC,CAAC;QAEH,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;QACnC,OAAO,CAAC,QAAQ,GAAG,mCAAmC,CAAC;QACvD,MAAM,MAAM,CAAC,cAAc,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,CAAC,KAAK,IAAI,EAAE;YAChB,WAAW,GAAG,MAAM,KAAK,CAAC,gCAAgC,CAAC;iBACxD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAExE,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC;YAC1B,OAAO,CAAC,OAAO,GAAG,YAAY,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,cAAc,CAAC;YAE5B,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,cAAc,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE,CACpE,MAAM,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;QAExD,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,SAAS,GAAkB,CAC/B,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAC1D,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CACnC,6CAA6C,CAC9C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,SAAS,GAAa,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YAC7C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CAChC,6CAA6C,CAC9C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,KAAK,IAAI,EAAE;YAChB,YAAY,GAAG,MAAM,KAAK,CAAC,kCAAkC,CAAC;iBAC3D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAExE,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC;YAC3B,OAAO,CAAC,OAAO,GAAG,cAAc,CAAC;YAEjC,MAAM,OAAO,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,cAAc,CAAC;YAE5B,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,cAAc,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE,CACxF,MAAM,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;QAExD,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE,CACzC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG;aACrE,EAAE,CAAC,SAAS,CAAC,CAAC;QAEnB,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,YAAY,GAAa,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YAChD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CACnC,2CAA2C,CAC5C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../mock-open-scd.js';\nimport { MockOpenSCD } from '../../mock-open-scd.js';\n\nimport ValidateSchema from '../../../src/validators/ValidateSchema.js';\nimport { IssueDetail, LogEntry } from '../../../src/foundation.js';\n\ndescribe('ValidateSchema plugin', () => {\n  if (customElements.get('') === undefined)\n    customElements.define('validate-schema', ValidateSchema);\n\n  let parent: MockOpenSCD;\n  let element: ValidateSchema;\n\n  let valid2007B4: XMLDocument;\n  let invalid2007B: XMLDocument;\n\n  before(async () => {\n    parent = await fixture(html`\n      <mock-open-scd><validate-schema></validate-schema></mock-open-scd>\n    `);\n\n    element = parent.getActivePlugin();\n    element.pluginId = '/src/validators/ValidateSchema.js';\n    await parent.updateComplete;\n  });\n\n  describe('for valid SCL files', () => {\n    before(async () => {\n      valid2007B4 = await fetch('/test/testfiles/valid2007B.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      element.doc = valid2007B4;\n      element.docName = 'valid2007B';\n    });\n\n    beforeEach(async () => {\n      parent.diagnoses.clear();\n      await parent.updateComplete;\n\n      await element.validate();\n      await parent.updateComplete;\n    });\n\n    it('zeroissues indication looks like the latest snapshot', async () =>\n      await expect(parent.diagnosticUI).to.equalSnapshot());\n\n    it('indicates successful schema validation in the diagnoses pane', async () => {\n      const lastEntry = <IssueDetail[]>(\n        parent.diagnoses.get('/src/validators/ValidateSchema.js')\n      );\n      expect(lastEntry.length).to.equal(1);\n      expect(lastEntry[0].title).to.contain(\n        'valid2007B XML schema validation successful'\n      );\n    });\n\n    it('indicates successful schema validation in the log', async () => {\n      const lastEntry = <LogEntry>parent.log.pop();\n      expect(lastEntry.kind).to.equal('info');\n      expect(lastEntry.title).to.contain(\n        'valid2007B XML schema validation successful'\n      );\n    });\n  });\n\n  describe('for invalid SCL files', () => {\n    before(async () => {\n      invalid2007B = await fetch('/test/testfiles/invalid2007B.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      element.doc = invalid2007B;\n      element.docName = 'invalid2007B';\n\n      await element.requestUpdate();\n    });\n\n    beforeEach(async () => {\n      parent.diagnoses.clear();\n      await parent.updateComplete;\n\n      await element.validate();\n      await parent.updateComplete;\n    });\n\n    it('pushes issues to the diagnostics pane that look like the latest snapshot', async () =>\n      await expect(parent.diagnosticUI).to.equalSnapshot());\n\n    it('create issues in diagnose', async () =>\n      expect(parent.diagnoses.get('/src/validators/ValidateSchema.js')).to.not\n        .be.undefined);\n\n    it('generates error messages in the log', async () => {\n      const lastLogEntry = <LogEntry>parent.log.pop();\n      expect(lastLogEntry.kind).to.equal('warning');\n      expect(lastLogEntry.title).to.contain(\n        'invalid2007B XML schema validation failed'\n      );\n    });\n  });\n});\n"]}