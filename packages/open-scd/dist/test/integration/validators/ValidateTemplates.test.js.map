{"version":3,"file":"ValidateTemplates.test.js","sourceRoot":"","sources":["../../../../test/integration/validators/ValidateTemplates.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../mock-open-scd.js';\nimport { MockOpenSCD } from '../../mock-open-scd.js';\n\nimport ValidateTemplates from '../../../src/validators/ValidateTemplates.js';\n\ndescribe('ValidateTemplates OpenSCD integration test ', () => {\n  if (customElements.get('validate-templates') === undefined)\n    customElements.define('validate-templates', ValidateTemplates);\n\n  let parent: MockOpenSCD;\n  let element: ValidateTemplates;\n\n  let doc: XMLDocument;\n\n  describe('with a valid DataTypeTemplates section', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/validators/zeroissues.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(html`\n        <mock-open-scd .doc=${doc}\n          ><validate-templates .doc=${doc}></validate-templates\n        ></mock-open-scd>\n\n        <link href=\"public/google/fonts/roboto-v27.css\" rel=\"stylesheet\" />\n        <link href=\"public/google/fonts/roboto-mono-v13.css\" rel=\"stylesheet\" />\n        <link\n          href=\"public/google/icons/material-icons-outlined.css\"\n          rel=\"stylesheet\"\n        />\n      `);\n      element = parent.getActivePlugin();\n      element.pluginId = '/src/validators/ValidateTemplates.js';\n\n      await element.validate();\n      await parent.updateComplete;\n    });\n\n    it('shows a \"No errors\" message in the diagnostics pane', async () => {\n      await parent.requestUpdate();\n      expect(parent.diagnosticUI).to.contain.text('No errors');\n      await expect(parent.diagnosticUI).to.equalSnapshot();\n    });\n  });\n\n  describe('with issues in the DataTypeTemplates section', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/validators/datatypetemplateerrors.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(html`\n        <mock-open-scd .doc=${doc}\n          ><validate-templates .doc=${doc}></validate-templates\n        ></mock-open-scd>\n\n        <link href=\"public/google/fonts/roboto-v27.css\" rel=\"stylesheet\" />\n        <link href=\"public/google/fonts/roboto-mono-v13.css\" rel=\"stylesheet\" />\n        <link\n          href=\"public/google/icons/material-icons-outlined.css\"\n          rel=\"stylesheet\"\n        />\n      `);\n      element = parent.getActivePlugin();\n      element.pluginId = '/src/validators/ValidateTemplates.js';\n\n      await element.validate();\n      await parent.updateComplete;\n    });\n    it('generates issues in the diagnistics pane', async () => {\n      const issues = parent.diagnoses.get(\n        '/src/validators/ValidateTemplates.js'\n      );\n      expect(issues?.length).to.equal(28);\n    }).timeout(1000);\n    it('pushes issues to the diagnostics pane that look like the latest snapshot', async () => {\n      await parent.requestUpdate();\n      await expect(parent.diagnosticUI).to.equalSnapshot();\n    });\n  });\n  describe('with schema version smaller \"2007B3\"', () => {\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(html`\n        <mock-open-scd .doc=${doc}\n          ><validate-templates .doc=${doc}></validate-templates\n        ></mock-open-scd>\n\n        <link href=\"public/google/fonts/roboto-v27.css\" rel=\"stylesheet\" />\n        <link href=\"public/google/fonts/roboto-mono-v13.css\" rel=\"stylesheet\" />\n        <link\n          href=\"public/google/icons/material-icons-outlined.css\"\n          rel=\"stylesheet\"\n        />\n      `);\n      element = parent.getActivePlugin();\n      element.pluginId = '/src/validators/ValidateTemplates.js';\n\n      await element.validate();\n      await parent.updateComplete;\n    });\n    it('shows only one message in the diagnostics pane', async () => {\n      const issues = parent.diagnoses.get(\n        '/src/validators/ValidateTemplates.js'\n      );\n      expect(issues?.length).to.equal(1);\n    }).timeout(1000);\n    it('looks like the latest snapshot', async () => {\n      await parent.requestUpdate();\n      await expect(parent.diagnosticUI).to.equalSnapshot();\n    });\n  });\n});\n"]}