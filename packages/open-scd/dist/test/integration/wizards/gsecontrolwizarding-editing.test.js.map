{"version":3,"file":"gsecontrolwizarding-editing.test.js","sourceRoot":"","sources":["../../../../test/integration/wizards/gsecontrolwizarding-editing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../mock-wizard-editor.js';\n\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\n\nimport {\n  editGseControlWizard,\n  selectGseControlWizard,\n} from '../../../src/wizards/gsecontrol.js';\nimport { FilteredList } from '../../../src/filtered-list.js';\nimport { WizardTextField } from '../../../src/wizard-textfield.js';\nimport { FinderList } from '../../../src/finder-list.js';\nimport { newWizardEvent } from '../../../src/foundation.js';\n\ndescribe('Wizards for SCL element GSEControl', () => {\n  let doc: XMLDocument;\n  let element: MockWizardEditor;\n\n  beforeEach(async () => {\n    element = await fixture(html`<mock-wizard-editor></mock-wizard-editor>`);\n    doc = await fetch('/test/testfiles/wizards/gsecontrol.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  describe('define a select wizards that', () => {\n    let gseControlList: FilteredList;\n\n    describe('with the document element as input', () => {\n      beforeEach(async () => {\n        const wizard = selectGseControlWizard(doc.documentElement);\n        element.dispatchEvent(newWizardEvent(wizard));\n        await element.requestUpdate();\n        gseControlList = <FilteredList>(\n          element.wizardUI.dialog?.querySelector('filtered-list')\n        );\n        await gseControlList.updateComplete;\n      });\n\n      it('shows all GSEControl within the SCL', () =>\n        expect(gseControlList.items.length).to.equal(\n          doc.querySelectorAll('GSEControl').length\n        ));\n\n      it('opens edit wizard for selected GSEControl on filtered-list item click', async () => {\n        const gse2 = <ListItemBase>gseControlList.items[1];\n        await gse2.updateComplete;\n        gse2.click();\n        await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n        await element.wizardUI.dialog?.updateComplete;\n\n        const nameField = <WizardTextField>(\n          element.wizardUI.dialog?.querySelector(\n            'wizard-textfield[label=\"name\"]'\n          )\n        );\n        await nameField.updateComplete;\n\n        expect(nameField.value).to.equal(\n          doc.querySelectorAll('GSEControl')[1].getAttribute('name')\n        );\n      });\n\n      describe('has an add GSEControl primary button that', () => {\n        let iEDPicker: FinderList;\n\n        beforeEach(async () => {\n          (<HTMLElement>(\n            element.wizardUI.dialog?.querySelector(\n              'mwc-button[slot=\"primaryAction\"]'\n            )\n          )).click();\n          await new Promise(resolve => setTimeout(resolve, 50)); // await animation\n\n          iEDPicker = <FinderList>(\n            element.wizardUI.dialog?.querySelector('finder-list')\n          );\n        });\n\n        it('opens a potential list of host IEDs for the ReportControl element', async () =>\n          expect(iEDPicker).to.exist);\n      });\n    });\n\n    describe('with a specific IED as input', () => {\n      beforeEach(async () => {\n        const wizard = selectGseControlWizard(doc.querySelector('IED')!);\n        element.dispatchEvent(newWizardEvent(wizard));\n        await element.requestUpdate();\n\n        gseControlList = <FilteredList>(\n          element.wizardUI.dialog?.querySelector('filtered-list')\n        );\n        await gseControlList.updateComplete;\n      });\n\n      it('allows to filter ReportControl elements per IED', async () =>\n        expect(gseControlList.items.length).to.equal(\n          doc.querySelector('IED')!.querySelectorAll('GSEControl').length\n        ));\n\n      it('opens edit wizard for selected ReportControl element on click', async () => {\n        const reportItem = <ListItemBase>gseControlList.items[1];\n        reportItem.click();\n        await new Promise(resolve => setTimeout(resolve, 20)); // await animation\n\n        const nameField = <WizardTextField>(\n          element.wizardUI.dialog?.querySelector(\n            'wizard-textfield[label=\"name\"]'\n          )\n        );\n        await nameField.requestUpdate();\n\n        expect(nameField.value).to.equal(\n          doc.querySelectorAll('GSEControl')[1].getAttribute('name')\n        );\n      });\n\n      describe('has an add Report primary button that', () => {\n        it('opens the create wizard for the ReportControl element', async () => {\n          const primaryAction = <HTMLElement>(\n            element.wizardUI.dialog?.querySelector(\n              'mwc-button[slot=\"primaryAction\"]'\n            )\n          );\n\n          await primaryAction.click();\n          await new Promise(resolve => setTimeout(resolve, 20)); // await animation\n\n          const nameField = <WizardTextField>(\n            element.wizardUI.dialog?.querySelector(\n              'wizard-textfield[label=\"name\"]'\n            )\n          );\n          await nameField.requestUpdate();\n\n          expect(nameField).to.exist;\n        });\n      });\n    });\n  });\n\n  describe('define an edit wizard that', () => {\n    let nameField: WizardTextField;\n    let primaryAction: HTMLElement;\n    let secondaryAction: HTMLElement;\n    let gseControl: Element;\n    let parentIED: Element;\n\n    describe('loading a GSEControl with connected DataSet and GSE element', () => {\n      beforeEach(async () => {\n        element.workflow.length = 0; // remove all wizard from FIFO queue\n\n        parentIED = doc.querySelector('IED')!;\n        element.dispatchEvent(\n          newWizardEvent(() => selectGseControlWizard(parentIED))\n        );\n\n        await element.requestUpdate();\n        await new Promise(resolve => setTimeout(resolve, 20)); // await animation\n\n        const gsecontrol = <ListItemBase>(\n          (<FilteredList>(\n            element.wizardUI.dialog?.querySelector('filtered-list')\n          )).items[0]\n        );\n        gsecontrol.click();\n        await new Promise(resolve => setTimeout(resolve, 20)); // await animation\n\n        nameField = element.wizardUI.dialog!.querySelector(\n          'wizard-textfield[label=\"name\"]'\n        )!;\n        primaryAction = <HTMLElement>(\n          element.wizardUI.dialog?.querySelector(\n            'mwc-button[slot=\"primaryAction\"]'\n          )\n        );\n        secondaryAction = <HTMLElement>(\n          element.wizardUI.dialog?.querySelector(\n            'mwc-button[slot=\"secondaryAction\"]'\n          )\n        );\n        await nameField.updateComplete;\n      });\n\n      it('rejects name attribute starting with decimals', async () => {\n        expect(doc.querySelector('GSEControl[name=\"4adsasd\"]')).to.not.exist;\n\n        nameField.value = '4adsasd';\n        await element.requestUpdate();\n        primaryAction.click();\n\n        expect(doc.querySelector('GSEControl[name=\"4adsasd\"]')).to.not.exist;\n      });\n\n      it('edits name attribute on primary action', async () => {\n        expect(doc.querySelector('GSEControl[name=\"myNewName\"]')!).to.not.exist;\n\n        nameField.value = 'myNewName';\n        await element.requestUpdate();\n        primaryAction.click();\n\n        expect(doc.querySelector('GSEControl[name=\"myNewName\"]')!).to.exist;\n      });\n\n      it('dynamically updates wizards after attribute change', async () => {\n        nameField.value = 'myNewName';\n        primaryAction.click();\n\n        await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n        const gsecontrol = <ListItemBase>(\n          (<FilteredList>(\n            element.wizardUI.dialog?.querySelector('filtered-list')\n          )).items[0]\n        );\n\n        expect(gsecontrol.innerHTML).to.contain('myNewName');\n      });\n\n      it('returns back to its starting wizard on secondary action', async () => {\n        secondaryAction.click();\n\n        await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n        const report = <ListItemBase>(\n          (<FilteredList>(\n            element.wizardUI.dialog?.querySelector('filtered-list')\n          )).items[0]\n        );\n\n        expect(report.innerHTML).to.contain('GCB');\n      });\n\n      it('opens edit wizard for DataSet element on edit dataset button click', async () => {\n        const editDataSetButton = <HTMLElement>(\n          Array.from(\n            element.wizardUI.dialog!.querySelectorAll<ListItemBase>(\n              'mwc-menu > mwc-list-item'\n            )\n          ).find(item => item.innerHTML.includes(`[scl.DataSet]`))\n        );\n\n        await element.wizardUI.dialog?.requestUpdate();\n        editDataSetButton.click();\n        await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n        const nameField = <WizardTextField>(\n          element.wizardUI.dialog?.querySelector(\n            'wizard-textfield[label=\"name\"]'\n          )\n        );\n\n        await nameField.updateComplete;\n        expect(nameField.value).to.equal(\n          doc.querySelectorAll('DataSet')[1].getAttribute('name')\n        );\n      });\n\n      it('opens a editGseWizard on edit GSE button click', async () => {\n        const editGseButton = <HTMLElement>(\n          Array.from(\n            element.wizardUI.dialog!.querySelectorAll<ListItemBase>(\n              'mwc-menu > mwc-list-item'\n            )\n          ).find(item => item.innerHTML.includes(`[scl.Communication]`))\n        );\n\n        await element.wizardUI.dialog?.requestUpdate();\n        editGseButton.click();\n        await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n        const macField = <WizardTextField>(\n          element.wizardUI.dialog?.querySelector(\n            'wizard-textfield[label=\"MAC-Address\"]'\n          )\n        );\n        await macField.updateComplete;\n        expect(macField.value).to.equal(\n          doc\n            .querySelector('GSE > Address > P[type=\"MAC-Address\"]')\n            ?.textContent?.trim()\n        );\n      });\n\n      it('removes the GSEControl and its referenced elements on remove button click', async () => {\n        expect(doc.querySelector('IED[name=\"IED1\"] GSEControl[name=\"GCB\"]')).to\n          .exist;\n        expect(\n          doc.querySelector('IED[name=\"IED1\"] DataSet[name=\"GooseDataSet1\"]')\n        ).to.exist;\n        expect(doc.querySelector('GSE[cbName=\"GCB\"]')).to.exist;\n\n        const deleteButton = <HTMLElement>(\n          Array.from(\n            element.wizardUI.dialog!.querySelectorAll<ListItemBase>(\n              'mwc-menu > mwc-list-item'\n            )\n          ).find(item => item.innerHTML.includes(`[remove]`))\n        );\n        await element.wizardUI.dialog?.requestUpdate();\n        deleteButton.click();\n\n        expect(doc.querySelector('IED[name=\"IED1\"] GSEControl[name=\"GCB\"]')).to\n          .not.exist;\n        expect(\n          doc.querySelector('IED[name=\"IED1\"] DataSet[name=\"GooseDataSet1\"]')\n        ).to.not.exist;\n        expect(doc.querySelector('GSE[cbName=\"GCB\"]')).to.not.exist;\n      });\n    });\n\n    describe('loading a GSEControl with no connected DataSet', () => {\n      beforeEach(async () => {\n        gseControl = doc.querySelector('GSEControl[name=\"GCB2\"]')!;\n        const wizard = editGseControlWizard(gseControl);\n        element.dispatchEvent(newWizardEvent(() => wizard));\n        await element.requestUpdate();\n      });\n\n      it('does not show edit DataSet button', async () => {\n        const editGseButton = <HTMLElement>(\n          Array.from(\n            element.wizardUI.dialog!.querySelectorAll<ListItemBase>(\n              'mwc-menu > mwc-list-item'\n            )\n          ).find(item => item.innerHTML.includes(`[scl.DataSet]`))\n        );\n\n        expect(editGseButton).to.not.exist;\n      });\n    });\n\n    describe('loading a GSEControl with no connected GSE', () => {\n      beforeEach(async () => {\n        gseControl = doc.querySelector(\n          'IED[name=\"IED2\"] GSEControl[name=\"GCB\"]'\n        )!;\n        const wizard = editGseControlWizard(gseControl);\n        element.dispatchEvent(newWizardEvent(() => wizard));\n        await element.requestUpdate();\n      });\n\n      it('does not show edit DataSet button', async () => {\n        const editGseButton = <HTMLElement>(\n          Array.from(\n            element.wizardUI.dialog!.querySelectorAll<ListItemBase>(\n              'mwc-menu > mwc-list-item'\n            )\n          ).find(item => item.innerHTML.includes(`[scl.Communication]`))\n        );\n\n        expect(editGseButton).to.not.exist;\n      });\n    });\n  });\n});\n"]}