{"version":3,"file":"services-wizard.test.js","sourceRoot":"","sources":["../../../../test/integration/wizards/services-wizard.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { newWizardEvent, Wizard } from '../../../src/foundation.js';\nimport { editServicesWizard } from '../../../src/wizards/services.js';\n\nimport '../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../mock-wizard-editor.js';\nimport { WizardDialog } from '../../../src/wizard-dialog.js';\n\ndescribe('Wizards for SCL element Services', () => {\n  let doc: XMLDocument;\n  let element: MockWizardEditor;\n  let wizard: Wizard;\n\n  ['WithServices', 'WithServices2'].forEach(ied => {\n    beforeEach(async () => {\n      element = await fixture(html`<mock-wizard-editor></mock-wizard-editor>`);\n      doc = await fetch('/test/testfiles/Services.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      wizard = editServicesWizard(\n        doc.querySelector('IED[name=\"WithServices\"] Services')!\n      );\n\n      element.dispatchEvent(newWizardEvent(wizard));\n      await element.requestUpdate();\n      await element.updateComplete;\n    });\n\n    describe(`IED [${ied}]: define a Services wizards`, () => {\n      it('Services wizard to have 6 pages', () => {\n        expect(element.wizardUI.wizard.length).to.equal(6);\n      });\n      it('Services wizard to have 130 inputs', () => {\n        expect(element.wizardUI.wizard.flatMap(p => p.content).length).to.equal(\n          134\n        );\n      });\n\n      [17, 22, 22, 23, 28, 22].forEach((inputs, idx) => {\n        it(`Services wizard ${idx + 1} to have ${inputs} inputs`, () => {\n          expect(element.wizardUI.wizard[idx].content!.length).to.equal(inputs);\n        });\n      });\n\n      [0, 1, 2, 3, 4, 5].forEach(idx => {\n        it(`Wizard ${idx + 1} should look like snapshot`, async () => {\n          await expect(element.wizardUI.dialogs[idx]).to.equalSnapshot();\n        });\n      });\n    });\n    describe('> when pro mode is enabled', () => {\n      let elm: WizardDialog;\n      beforeEach(async () => {\n        elm =\n          element.wizards.shadowRoot!.querySelector<WizardDialog>(\n            'wizard-dialog'\n          )!;\n        localStorage.setItem('mode', 'pro');\n        elm.requestUpdate();\n        await elm.updateComplete;\n      });\n      [0, 1, 2, 3, 4, 5].forEach(idx => {\n        it(`Wizard ${idx + 1} should contain the code icon button`, () => {\n          expect(\n            element.wizardUI.dialogs[idx].querySelector(\n              'mwc-icon-button-toggle'\n            )\n          ).to.have.attribute('onicon', 'code');\n        });\n      });\n    });\n    after(() => localStorage.removeItem('mode'));\n\n    ['AP2', 'AP3', 'AP4', 'AP5', 'AP6'].forEach(accessPointName => {\n      describe(`IED [${ied}]: AccessPoint wizards for Scl element Services`, () => {\n        beforeEach(async () => {\n          element = await fixture(\n            html`<mock-wizard-editor></mock-wizard-editor>`\n          );\n          doc = await fetch('/test/testfiles/Services.scd')\n            .then(response => response.text())\n            .then(str =>\n              new DOMParser().parseFromString(str, 'application/xml')\n            );\n\n          wizard = editServicesWizard(\n            doc.querySelector(\n              `AccessPoint[name=\"${accessPointName}\"] Services`\n            )!\n          );\n\n          element.dispatchEvent(newWizardEvent(() => wizard));\n          await element.requestUpdate();\n        });\n\n        it('should look like snapshot', async () => {\n          await expect(element.wizardUI.dialog).to.equalSnapshot();\n        });\n      });\n    });\n  });\n});\n"]}