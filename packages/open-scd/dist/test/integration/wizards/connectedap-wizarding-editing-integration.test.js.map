{"version":3,"file":"connectedap-wizarding-editing-integration.test.js","sourceRoot":"","sources":["../../../../test/integration/wizards/connectedap-wizarding-editing-integration.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAEzD,OAAO,6BAA6B,CAAC;AAGrC,OAAO,EAAE,qBAAqB,EAAE,MAAM,qCAAqC,CAAC;AAC5E,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAE5D,QAAQ,CAAC,2CAA2C,EAAE,GAAG,EAAE;IACzD,IAAI,GAAgB,CAAC;IACrB,IAAI,OAAyB,CAAC;IAE9B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,OAAO,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA,2CAA2C,CAAC,CAAC;QACzE,GAAG,GAAG,MAAM,KAAK,CAAC,+BAA+B,CAAC;aAC/C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;QACzF,MAAM,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;QAC/B,MAAM,MAAM,GAAG;;;;;;;;;KASd,CAAC;QACF,MAAM,WAAW,GAAG,GAAG,CAAC,aAAa,CAAC,6BAA6B,CAAE,CAAC;QACtE,WAAW,CAAC,WAAW,CACrB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,eAAe,CAClE,CAAC;QAEF,MAAM,MAAM,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAClD,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9C,MAAM,OAAO,CAAC,aAAa,EAAE,CAAC;QAC9B,MAAM,OAAO,CAAC,cAAc,CAAC;QAE7B,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAW,CAAC,aAAa,CACvD,mCAAmC,CACnC,CAAC;QACH,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAW,CAAC,aAAa,CAC7D,yCAAyC,CACzC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACnD,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../mock-wizard-editor.js';\n\nimport { editConnectedApWizard } from '../../../src/wizards/connectedap.js';\nimport { newWizardEvent } from '../../../src/foundation.js';\n\ndescribe('connectedap wizarding editing integration', () => {\n  let doc: XMLDocument;\n  let element: MockWizardEditor;\n\n  beforeEach(async () => {\n    element = await fixture(html`<mock-wizard-editor></mock-wizard-editor>`);\n    doc = await fetch('/test/testfiles/valid2003.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n  });\n\n  it('does not inherit the VLAN-ID and VLAN-PRIORITY of a child Address element', async () => {\n    const parser = new DOMParser();\n    const newGSE = `\n    <GSE ldInst=\"CircuitBreaker_CB1\" cbName=\"GCB\">\n      <Address>\n        <P type=\"MAC-Address\">01-0C-CD-01-00-10</P>\n        <P type=\"VLAN-ID\">005</P>\n        <P type=\"VLAN-PRIORITY\">4</P>\n        <P type=\"APPID\">0010</P>\n      </Address>\n    </GSE>\n    `;\n    const connectedAP = doc.querySelector('ConnectedAP[iedName=\"IED1\"]')!;\n    connectedAP.appendChild(\n      parser.parseFromString(newGSE, 'application/xml').documentElement\n    );\n\n    const wizard = editConnectedApWizard(connectedAP);\n    element.dispatchEvent(newWizardEvent(wizard));\n    await element.requestUpdate();\n    await element.updateComplete;\n\n    const vlanId = element.wizardUI.shadowRoot!.querySelector(\n      'wizard-textfield[label=\"VLAN-ID\"]'\n    )!;\n    const vlanPriority = element.wizardUI.shadowRoot!.querySelector(\n      'wizard-textfield[label=\"VLAN-PRIORITY\"]'\n    )!;\n\n    expect(vlanId.hasAttribute('disabled')).to.be.true;\n    expect(vlanPriority.hasAttribute('disabled')).to.be.true;\n  });\n});\n"]}