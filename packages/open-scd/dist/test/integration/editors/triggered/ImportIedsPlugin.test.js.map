{"version":3,"file":"ImportIedsPlugin.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/triggered/ImportIedsPlugin.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { LitElement, TemplateResult } from 'lit-element';\n\nimport { CheckListItem } from '@material/mwc-list/mwc-check-list-item';\n\nimport '../../../mock-open-scd.js';\nimport { MockOpenSCD } from '../../../mock-open-scd.js';\n\nimport ImportingIedPlugin from '../../../../src/menu/ImportIEDs.js';\n\ndescribe('ImportIedsPlugin', () => {\n  customElements.define('import-ied-plugin', ImportingIedPlugin);\n\n  describe('imports valid ied elements to empty projects', () => {\n    let doc: XMLDocument;\n    let importDoc: XMLDocument;\n\n    let parent: MockOpenSCD;\n    let element: ImportingIedPlugin;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/importieds/emptyproject.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      importDoc = await fetch('/test/testfiles/importieds/valid.iid')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(\n        html`<mock-open-scd\n          ><import-ied-plugin .doc=${doc}></import-ied-plugin\n        ></mock-open-scd>`\n      );\n\n      element = parent.getActivePlugin();\n\n      await parent.updateComplete;\n    });\n\n    it('loads ied element to the project', async () => {\n      expect(element.doc?.querySelector(':root > IED[name=\"TestImportIED\"]')).to\n        .not.exist;\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(element.doc?.querySelector(':root > IED[name=\"TestImportIED\"]')).to\n        .exist;\n    });\n\n    it('adds the connectedap of the imported ied', async () => {\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc.querySelector(\n          'SubNetwork[name=\"NewSubNetwork\"] > ConnectedAP[iedName=\"TestImportIED\"]'\n        )\n      ).to.exist;\n    });\n\n    it('creates new subnetwork if not present in the doc', async () => {\n      expect(element.doc.querySelector('SubNetwork[name=\"NewSubNetwork\"]')).to\n        .not.exist;\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(element.doc.querySelector('SubNetwork[name=\"NewSubNetwork\"]')).to\n        .exist;\n    });\n\n    it('renames TEMPLATE IED element if manufacturer/type has illegal characters', async () => {\n      importDoc = await fetch('/test/testfiles/importieds/template.icd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      const ied = importDoc.querySelector('IED')!;\n      ied.setAttribute('manufacturer', 'Fancy-Vendy');\n      ied.setAttribute('type', 'Z#Mega$Y');\n\n      await element.updateComplete;\n\n      element.prepareImport(importDoc, 'template.icd');\n      await parent.updateComplete;\n\n      console.log(\n        element.doc?.querySelector(':root > IED')?.getAttribute('name')\n      );\n\n      expect(\n        element.doc?.querySelector(':root > IED[name=\"FancyVendy_ZMegaY_001\"]')\n      ).to.exist;\n    });\n\n    it('allows multiple import of TEMPLATE IEDs', async () => {\n      const templateIED1 = await fetch(\n        '/test/testfiles/importieds/template.icd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(templateIED1, 'template.icd');\n\n      const templateIED2 = await fetch(\n        '/test/testfiles/importieds/template.icd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      await element.updateComplete;\n\n      element.prepareImport(templateIED2, 'template.icd');\n      await parent.updateComplete;\n\n      expect(element.doc.querySelector('IED[name=\"FancyVendy_ZMegaY_001\"]')).to\n        .exist;\n      expect(element.doc.querySelector('IED[name=\"FancyVendy_ZMegaY_002\"]')).to\n        .exist;\n    });\n\n    it('imports the ConnectedAPs for a TEMPLATE IED', async () => {\n      const templateIED1 = await fetch(\n        '/test/testfiles/importieds/template.icd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(templateIED1, 'template.icd');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(\n          ':root > Communication >  SubNetwork > ConnectedAP[iedName=\"FancyVendy_ZMegaY_001\"]'\n        )\n      ).to.exist;\n    });\n\n    it('loads unique lnodetypes to the project', async () => {\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  LNodeType')\n          .length\n      ).to.equal(0);\n\n      element.prepareImport(importDoc, 'template.icd');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  LNodeType')\n          .length\n      ).to.equal(5);\n    });\n  });\n\n  describe('imports valid ied elements', () => {\n    let doc: XMLDocument;\n    let importDoc: XMLDocument;\n\n    let parent: MockOpenSCD;\n    let element: ImportingIedPlugin;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(\n        html`<mock-open-scd\n          ><import-ied-plugin .doc=${doc}></import-ied-plugin\n        ></mock-open-scd>`\n      );\n\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n\n      importDoc = await fetch('/test/testfiles/importieds/valid.iid')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      await element.updateComplete;\n    });\n\n    it('loads ied element to the project', async () => {\n      expect(element.doc?.querySelector(':root > IED[name=\"TestImportIED\"]')).to\n        .not.exist;\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(element.doc?.querySelector(':root > IED[name=\"TestImportIED\"]')).to\n        .exist;\n    });\n\n    it('loads unique lnodetypes to the project', async () => {\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  LNodeType')\n          .length\n      ).to.equal(11);\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  LNodeType')\n          .length\n      ).to.equal(16);\n    });\n\n    it('loads unique dotypes to the project', async () => {\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  DOType')\n          .length\n      ).to.equal(16);\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  DOType')\n          .length\n      ).to.equal(26);\n    });\n\n    it('loads unique datypes to the project', async () => {\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  DAType')\n          .length\n      ).to.equal(7);\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  DAType')\n          .length\n      ).to.equal(11);\n    });\n\n    it('loads unique enumtypes to the project', async () => {\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  EnumType')\n          .length\n      ).to.equal(4);\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc?.querySelectorAll(':root > DataTypeTemplates >  EnumType')\n          .length\n      ).to.equal(10);\n    });\n\n    it('adds the connectedap of the imported ied', async () => {\n      expect(element.doc.querySelector('ConnectedAP[iedName=\"TestImportIED\"]'))\n        .to.not.exist;\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(element.doc.querySelector('ConnectedAP[iedName=\"TestImportIED\"]'))\n        .to.exist;\n      expect(\n        element.doc.querySelector('ConnectedAP[iedName=\"TestImportIED\"]')\n          ?.parentElement\n      ).to.equal(element.doc.querySelector('SubNetwork[name=\"NewSubNetwork\"]'));\n    });\n\n    it('creates new subnetwork if not present in the doc', async () => {\n      expect(element.doc.querySelector('SubNetwork[name=\"NewSubNetwork\"]')).to\n        .not.exist;\n\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(element.doc.querySelector('SubNetwork[name=\"NewSubNetwork\"]')).to\n        .exist;\n    });\n\n    it('correctly transfers document element namespaces', async () => {\n      element.prepareImport(importDoc, 'valid.iid');\n      await parent.updateComplete;\n\n      expect(\n        element.doc.querySelector('SCL')!.getAttribute('xmlns:eTest1')\n      ).to.equal('http://www.eTest1.com/2022/Better61850');\n      expect(\n        element.doc.querySelector('SCL')!.getAttribute('xmlns:eTest2')\n      ).to.equal('http://www.eTest2.com/2032/Better61850ForReal');\n\n      // looking at serialisation of node to confirm correct namespace registration\n      const output = new XMLSerializer().serializeToString(element.doc);\n      expect(output).to.contain(\n        'xmlns:eTest1=\"http://www.eTest1.com/2022/Better61850\"'\n      );\n      expect(output).to.contain(\n        'xmlns:eTest2=\"http://www.eTest2.com/2032/Better61850ForReal\"'\n      );\n\n      // check that namespaces are encoded correctly within a specific element\n      const lineFeedAndSpacesReplace = /[\\s\\n\\r]+/g;\n      expect(output.replace(lineFeedAndSpacesReplace, '')).to.include(\n        `<IED name=\"TestImportIED\" type=\"TestType\" manufacturer=\"TestMan\" originalSclVersion=\"2007\" originalSclRevision=\"B\" originalRelease=\"4\" eTest2:New=\"fancy new attribute\">\n<eTest1:NewThing>\n    <P type=\"solution\"/>\n</eTest1:NewThing>`.replace(lineFeedAndSpacesReplace, '')\n      );\n    });\n\n    it('allows multiple import of TEMPLATE IEDs', async () => {\n      expect(element.doc.querySelectorAll('IED').length).to.equal(3);\n\n      const templateIED1 = await fetch(\n        '/test/testfiles/importieds/template.icd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(templateIED1, 'template.icd');\n\n      const templateIED2 = await fetch(\n        '/test/testfiles/importieds/template.icd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(templateIED2, 'template.icd');\n      await parent.updateComplete;\n\n      expect(element.doc.querySelector('IED[name=\"FancyVendy_ZMegaY_001\"]')).to\n        .exist;\n      expect(element.doc.querySelector('IED[name=\"FancyVendy_ZMegaY_002\"]')).to\n        .exist;\n    });\n\n    it('renders wizard for files containing more than one IED', async () => {\n      const multipleIedDoc = await fetch(\n        '/test/testfiles/importieds/multipleied.scd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      element.prepareImport(multipleIedDoc, 'multipleied.scd');\n      await element.updateComplete;\n\n      expect(element.dialog).to.exist;\n      expect(element.dialog.open).to.be.true;\n      expect(\n        element.dialog?.querySelectorAll('mwc-check-list-item').length\n      ).to.equal(3);\n    });\n\n    it('imports selected IEDs from Import IED wizard', async () => {\n      const multipleIedDoc = await fetch(\n        '/test/testfiles/importieds/multipleied.scd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      element.prepareImport(multipleIedDoc, 'multipleied.scd');\n      await element.updateComplete;\n\n      (<CheckListItem>(\n        element.dialog.querySelectorAll('mwc-check-list-item')[1]\n      )).setAttribute('selected', 'true');\n      (<CheckListItem>(\n        element.dialog.querySelectorAll('mwc-check-list-item')[2]\n      )).setAttribute('selected', 'true');\n      await element.dialog.updateComplete;\n\n      (<HTMLElement>(\n        element.dialog?.querySelector('mwc-button[slot=\"primaryAction\"]')\n      )).click();\n      await parent.updateComplete;\n      await element.requestUpdate();\n\n      await new Promise(resolve => setTimeout(resolve, 100)); // await complex action\n\n      expect(element.doc.querySelectorAll('IED[name=\"IED3\"]').length).to.equal(\n        1\n      );\n      expect(element.doc.querySelector('IED[name=\"IED4\"]')).to.exist;\n      expect(element.doc.querySelector('IED[name=\"IED5\"]')).to.exist;\n    });\n  });\n\n  describe('importing invalid ieds', () => {\n    let doc: XMLDocument;\n    let importDoc: XMLDocument;\n\n    let parent: MockOpenSCD;\n    let element: ImportingIedPlugin;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(html`<mock-open-scd\n        ><import-ied-plugin .doc=${doc}></import-ied-plugin\n      ></mock-open-scd>`);\n\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n    });\n\n    it('throws missing ied elements error', async () => {\n      importDoc = await fetch('/test/testfiles/importieds/invalid.iid')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(importDoc, 'invalid.iid');\n\n      expect(parent.log[0].kind).to.equal('error');\n      expect(parent.log[0].title).to.equal('No IED element in the file');\n    });\n\n    it('throws duplicate ied name error', async () => {\n      importDoc = await fetch('/test/testfiles/importieds/duplicate.iid')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element.prepareImport(importDoc, 'duplicate.iid');\n\n      expect(parent.log[0].kind).to.equal('error');\n      expect(parent.log[0].title).to.equal(\n        'IED element IED2 already in the file'\n      );\n    });\n\n    it('throws parser error', async () => {\n      importDoc = await fetch('/test/testfiles/importieds/parsererror.iid')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      await element.updateComplete;\n\n      element.prepareImport(importDoc, 'parsererror.iid');\n\n      expect(parent.log[0].kind).to.equal('error');\n      expect(parent.log[0].title).to.equal('Parser error');\n    });\n  });\n});\n"]}