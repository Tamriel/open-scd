{"version":3,"file":"CommunicationMappingPlugin.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/triggered/CommunicationMappingPlugin.test.ts"],"names":[],"mappingsigBG","sourcesContent":["/* import { expect, fixture, html } from '@open-wc/testing';\n\nimport { List } from '@material/mwc-list';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\nimport { ZerolinePane } from '../../../../src/zeroline-pane.js';\n\ndescribe('CommunicationMappingPlugin', () => {\n  let doc: Document;\n  let parent: MockWizardEditor;\n  let element: ZerolinePane;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/comm-map.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    parent = await fixture(\n      html`<mock-wizard-editor\n        ><zeroline-pane .doc=${doc}></zeroline-pane\n      ></mock-wizard-editor>`\n    );\n\n    element = <ZerolinePane>parent.querySelector('zeroline-pane')!;\n    await element.updateComplete;\n  });\n\n  describe('communication mapping wizard', () => {\n    beforeEach(async () => {\n      await element.commmap.click();\n      await parent.updateComplete;\n    });\n\n    it('opens the communication mapping wizard on trigger', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(1);\n    });\n\n    it('closes on secondary action', async () => {\n      (<HTMLElement>(\n        parent.wizardUI.dialog!.querySelector(\n          'mwc-button[slot=\"secondaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(parent.wizardUI.dialogs.length).to.equal(0);\n    });\n\n    it('groups connections to unique pair of source ied, sink ied and control block', () => {\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll('mwc-list-item').length\n      ).to.equal(4);\n    });\n\n    it('indicates the control block type with mwc-list graphic slot', () => {\n      expect(\n        parent.wizardUI.dialog!.querySelectorAll('mwc-list-item > mwc-icon')\n          .length\n      ).to.equal(4);\n    });\n\n    it('show the source ied, sink ied and control block', () => {\n      expect(\n        parent.wizardUI.dialog!.querySelectorAll('mwc-list-item > mwc-icon')\n          .length\n      ).to.equal(4);\n    });\n  });\n\n  describe('control block connection wizard', () => {\n    let commMappings: List;\n    beforeEach(async () => {\n      await element.commmap.click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      commMappings = <List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      );\n    });\n\n    it('opens on Connection item click', async () => {\n      commMappings.items[0].click();\n      await parent.updateComplete;\n      expect(parent.wizardUI.dialogs.length).to.equal(1);\n      expect(parent.wizardUI.dialog?.heading).to.equal(\n        'IED2>>CBSW> XSWI 2>ReportCb - IED1'\n      );\n    });\n\n    it('shows all ClientLNs', async () => {\n      commMappings.items[0].click();\n      await parent.updateComplete;\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll('mwc-check-list-item').length\n      ).to.equal(\n        doc.querySelectorAll('IED[name=\"IED2\"] ReportControl ClientLN').length\n      );\n    });\n\n    it('removes selected ClientLNs', async () => {\n      expect(\n        doc.querySelector(\n          'ClientLN[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.exist;\n      commMappings.items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[3].click();\n      await parent.updateComplete;\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector(\n          'ClientLN[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.be.null;\n    });\n\n    it('shows all ExtRefs', async () => {\n      commMappings.items[1].click();\n      await parent.updateComplete;\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll('mwc-check-list-item').length\n      ).to.equal(14);\n    });\n\n    it('removes selected ExtRefs in case no intAddr is present', async () => {\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED2\"] ExtRef[iedName=\"IED1\"][ldInst=\"Disconnectors\"][lnClass=\"XSWI\"][doName=\"Pos\"][daName=\"stVal\"]'\n        )\n      ).to.exist;\n      commMappings.items[1].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[2].click();\n      await parent.updateComplete;\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED2\"] ExtREf[iedName=\"IED1\"][ldInst=\"Disconnectors\"][lnClass=\"XSWI\"][doName=\"Pos\"][daName=\"stVal\"]'\n        )\n      ).to.not.exist;\n    });\n\n    it('updates selected ExtRefs in case intAddr is present', async () => {\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] ExtRef[iedName=\"IED2\"][ldInst=\"CBSW\"][lnClass=\"XSWI\"]' +\n            '[doName=\"Pos\"][daName=\"stVal\"][intAddr=\"./stVal\"][serviceType=\"GOOSE\"][desc=\"testDesc\"]' +\n            '[pServT=\"GOOSE\"][pLN=\"XSWI\"][pDO=\"Pos\"][pDA=\"stVal\"]'\n        )\n      ).to.exist;\n      commMappings.items[2].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[0].click();\n      await parent.updateComplete;\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] ExtRef:not([iedName]):not([ldInst]):not([lnClass]):not([doName]):not([daName])' +\n            '[intAddr=\"./stVal\"][serviceType=\"GOOSE\"][desc=\"testDesc\"]' +\n            '[pServT=\"GOOSE\"][pLN=\"XSWI\"][pDO=\"Pos\"][pDA=\"stVal\"]'\n        )\n      ).to.exist;\n    });\n    it('removes IEDName if all linked ExtRefs are removed/disconnected', async () => {\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] > AccessPoint > Server > ' +\n            'LDevice[inst=\"CircuitBreaker_CB1\"] > LN0 > GSEControl > ' +\n            'IEDName[apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.exist;\n      commMappings.items[3].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[0].click();\n      await parent.updateComplete;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[1].click();\n      await parent.updateComplete;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[2].click();\n      await parent.updateComplete;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[3].click();\n      await parent.updateComplete;\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] > AccessPoint > Server > ' +\n            'LDevice[inst=\"CircuitBreaker_CB1\"] > LN0 > GSEControl > ' +\n            'IEDName[apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.not.exist;\n    });\n    it('does not removes IEDName if linked ExtRefs`not completely removed/disconnected', async () => {\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] > AccessPoint > Server > ' +\n            'LDevice[inst=\"CircuitBreaker_CB1\"] > LN0 > GSEControl > ' +\n            'IEDName[apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.exist;\n      commMappings.items[3].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[0].click();\n      await parent.updateComplete;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('filtered-list')\n      )).items[1].click();\n      await parent.updateComplete;\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector(\n          ':root > IED[name=\"IED1\"] > AccessPoint > Server > ' +\n            'LDevice[inst=\"CircuitBreaker_CB1\"] > LN0 > GSEControl > ' +\n            'IEDName[apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"]'\n        )\n      ).to.exist;\n    });\n  });\n\n  describe('connection wizard', () => {\n    beforeEach(async () => {\n      await element.commmap.click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n    });\n\n    it('opens on communication primary action', async () => {\n      expect(parent.wizardUI.dialog).to.exist;\n    });\n    it('is displaying source IEDs with mwc-check-list-item', () => {\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll(\n          '#sourcelist>mwc-check-list-item'\n        ).length\n      ).to.equal(doc.querySelectorAll('IED').length);\n    });\n    it('is displaying source IEDs with mwc-list-item', () => {\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll('#sinklist>mwc-list-item')\n          .length\n      ).to.equal(doc.querySelectorAll('IED').length);\n    });\n  });\n\n  describe('client wizard', () => {\n    beforeEach(async () => {\n      await element.commmap.click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[1].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n    });\n\n    it('opens on client ln on sink IED click', async () => {\n      expect(parent.wizardUI.dialog).to.exist;\n    });\n    it('is displaying source IEDs report control blocks with mwc-check-list-item', () => {\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll(\n          '#sourcelist>mwc-check-list-item'\n        ).length\n      ).to.equal(doc.querySelectorAll('IED[name=\"IED2\"] ReportControl').length);\n    });\n    it('is displaying source IEDs logical nodes in mwc-check-list-item', () => {\n      expect(\n        parent.wizardUI.dialog?.querySelectorAll(\n          '#sinklist>mwc-check-list-item'\n        ).length\n      ).to.equal(\n        doc.querySelectorAll('IED[name=\"IED1\"] LN,IED[name=\"IED1\"] LN0').length\n      );\n    });\n    it('add ClientLN referencing to logical nodes in AccessPoint', async () => {\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN'\n        )\n      )?.to.not.exist;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[1].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][prefix=\"DC\"][lnClass=\"CILO\"][lnInst=\"1\"]'\n        )\n      )?.to.exist;\n    });\n    it('does not add an already existing ClientLN referencing to logical nodes in AccessPoint', async () => {\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][prefix=\"DC\"][lnClass=\"CILO\"][lnInst=\"1\"]'\n        ).length\n      )?.to.equal(1);\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][prefix=\"DC\"][lnClass=\"CILO\"][lnInst=\"1\"]'\n        ).length\n      )?.to.equal(1);\n    });\n    it('add ClientLN referencing to LN0', async () => {\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN'\n        )\n      )?.to.not.exist;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[1].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[14].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"Disconnectors\"][lnClass=\"LLN0\"]'\n        )\n      )?.to.exist;\n    });\n    it('does not add an already existing ClientLN referencing to LN0', async () => {\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"Disconnectors\"][lnClass=\"LLN0\"]'\n        ).length\n      )?.to.equal(1);\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"Disconnectors\"][lnClass=\"LLN0\"]'\n        ).length\n      )?.to.equal(1);\n    });\n    it('add ClientLN referencing to logical nodes located in logical devices', async () => {\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN'\n        )\n      )?.to.not.exist;\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[1].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[5].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelector(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportEmpty\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"1\"]'\n        )\n      )?.to.exist;\n    });\n    it('does not add an already existing ClientLN referencing to to logical nodes located in logical devices', async () => {\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"XCBR\"][lnInst=\"1\"]'\n        ).length\n      )?.to.equal(1);\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sourcelist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<List>(\n        parent.wizardUI.dialog?.querySelector('#sinklist')\n      )).items[0].click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      (<HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(\n        doc.querySelectorAll(\n          'IED[name=\"IED2\"] ReportControl[name=\"ReportCb\"] ClientLN[iedName=\"IED1\"][apRef=\"P1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"XCBR\"][lnInst=\"1\"]'\n        ).length\n      )?.to.equal(1);\n    });\n  });\n});\n */\n"]}