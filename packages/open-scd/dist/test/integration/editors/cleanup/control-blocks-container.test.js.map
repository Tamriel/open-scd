{"version":3,"file":"control-blocks-container.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/cleanup/control-blocks-container.test.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\nimport { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../../mock-open-scd.js';\nimport '../../../../src/editors/cleanup/control-blocks-container.js';\n\nimport { CleanupControlBlocks } from '../../../../src/editors/cleanup/control-blocks-container.js';\nimport { cleanSCLItems } from '../../../../src/editors/cleanup/foundation.js';\nimport { MockOpenSCD } from '../../../mock-open-scd.js';\n\ndescribe('cleanup-editor integration: unreferenced control blocks', () => {\n  let element: CleanupControlBlocks;\n  let parent: MockOpenSCD;\n\n  describe('without a doc loaded', () => {\n    beforeEach(async () => {\n      parent = await fixture(\n        html`<mock-open-scd\n          ><cleanup-control-blocks .doc=\"${null}\"></cleanup-control-blocks\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n    });\n\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('with a test file loaded', () => {\n    let doc: Document;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/cleanup.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = await fixture(\n        html`<mock-open-scd\n          ><cleanup-control-blocks .doc=\"${doc}\"></cleanup-control-blocks\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n    });\n\n    it('correctly removes all LogControl entries from the SCL', async () => {\n      await element.cleanupGSEControlFilter.click();\n      await element.cleanupSampledValueControlFilter.click();\n      // select all items and update list\n      const checkbox = element\n        .shadowRoot!.querySelector('.cleanupList')!\n        .shadowRoot!.querySelector('mwc-formfield')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await element.cleanupList?.layout();\n\n      await element.cleanButton.click();\n\n      // the correct number of LogControls should remain\n      expect(element.doc.querySelectorAll('LogControl')).to.have.length(1);\n      expect(\n        element.doc.querySelectorAll('LogControl[name=\"LogNP\"]')\n      ).to.have.length(0);\n    });\n\n    it('correctly removes all GSEControl entries and Address entries from the SCL', async () => {\n      await element.cleanupLogControlFilter.click();\n      await element.cleanupSampledValueControlFilter.click();\n      // select all items and update list\n      const checkbox = element\n        .shadowRoot!.querySelector('.cleanupList')!\n        .shadowRoot!.querySelector('mwc-formfield')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await element.cleanupList?.layout();\n\n      await element.cleanButton.click();\n\n      // the correct number of GSEControl should remain\n      expect(element.doc.querySelectorAll('GSEControl')).to.have.lengthOf(2);\n      expect(\n        element.doc.querySelectorAll(\n          'GSEControl[name=\"GCB_NP\"], GSEControl[name=\"GCB2_NP\"]'\n        )\n      ).to.have.lengthOf(0);\n      // Addresses removed\n      expect(\n        element.doc.querySelectorAll('GSE[cbName=\"GCB_NP\"]')\n      ).to.have.lengthOf(0);\n      expect(element.doc.querySelectorAll('GSE')).to.have.lengthOf(1);\n    });\n\n    it('correctly removes all SampledValueControl and Address entries from the SCL', async () => {\n      await element.cleanupLogControlFilter.click();\n      await element.cleanupGSEControlFilter.click();\n      // select all items and update list\n      const checkbox = element\n        .shadowRoot!.querySelector('.cleanupList')!\n        .shadowRoot!.querySelector('mwc-formfield')!\n        .querySelector('mwc-checkbox')!;\n      await checkbox.click();\n      await element.cleanupList?.layout();\n\n      await element.cleanButton.click();\n\n      // the correct number of SampledValueControls should remain\n      expect(\n        element.doc.querySelectorAll('SampledValueControl')\n      ).to.have.lengthOf(1);\n      expect(\n        element.doc.querySelectorAll('SampledValueControl[name=\"MSVCB01_A\"]')\n      ).to.have.lengthOf(0);\n      // Addresses removed\n      expect(\n        element.doc.querySelectorAll('SMV[cbName=\"MSVCB01_A\"]')\n      ).to.have.lengthOf(0);\n      expect(element.doc.querySelectorAll('SMV')).to.have.lengthOf(1);\n    });\n\n    describe('if the Address checkbox is unchecked', () => {\n      beforeEach(async () => {\n        element.cleanupAddressCheckbox!.checked = false;\n        await element.cleanupAddressCheckbox!.requestUpdate();\n      });\n\n      it('correctly removes all SampledValueControl but not Address entries from the SCL', async () => {\n        await element.cleanupLogControlFilter.click();\n        await element.cleanupGSEControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        await element.cleanupList?.layout();\n        await element.cleanButton.click();\n\n        // the correct number of SampledValueControls should remain\n        expect(\n          element.doc.querySelectorAll('SampledValueControl')\n        ).to.have.lengthOf(1);\n        expect(\n          element.doc.querySelectorAll('SampledValueControl[name=\"MSVCB01_A\"]')\n        ).to.have.lengthOf(0);\n        // Addresses unchanged\n        expect(\n          element.doc.querySelectorAll('SMV[cbName=\"MSVCB01_A\"]')\n        ).to.have.lengthOf(1);\n        expect(element.doc.querySelectorAll('SMV')).to.have.lengthOf(2);\n      });\n\n      it('correctly removes all GSEControl entries but not Address entries from the SCL', async () => {\n        await element.cleanupLogControlFilter.click();\n        await element.cleanupSampledValueControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        await element.cleanupList?.layout();\n\n        element.cleanupAddressCheckbox!.checked = false;\n        await element.cleanupAddressCheckbox!.requestUpdate();\n\n        await element.cleanButton.click();\n\n        // the correct number of GSEControl should remain\n        expect(element.doc.querySelectorAll('GSEControl')).to.have.lengthOf(2);\n        expect(\n          doc.querySelectorAll(\n            'GSEControl[name=\"GCB_NP\"], GSEControl[name=\"GCB2_NP\"]'\n          )\n        ).to.have.lengthOf(0);\n        // Addresses unchanged\n        expect(\n          element.doc.querySelectorAll('GSE[cbName=\"GCB_NP\"]')\n        ).to.have.lengthOf(1);\n        expect(element.doc.querySelectorAll('GSE')).to.have.lengthOf(2);\n      });\n    });\n\n    describe('if the ReportControl filter is enabled', async () => {\n      beforeEach(async () => {\n        await element.cleanupReportControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        element.cleanupList?.layout();\n      });\n\n      it('creates 5 delete actions (ReportControl, GSEControl x 2, LogControl, SampledValueControl)', () => {\n        const cleanItems = Array.from(\n          (<Set<number>>element.cleanupList!.index).values()\n        ).map(index => element.unreferencedControls[index]);\n        const deleteActions = cleanSCLItems(cleanItems);\n        expect(deleteActions.length).to.equal(5);\n      });\n    });\n\n    describe('if the LogControl filter is disabled', async () => {\n      beforeEach(async () => {\n        await element.cleanupLogControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        element.cleanupList?.layout();\n      });\n\n      it('creates 3 Delete Actions (GSEControl x 2, SampledValueControl)', async () => {\n        const cleanItems = Array.from(\n          (<Set<number>>element.cleanupList!.index).values()\n        ).map(index => element.unreferencedControls[index]);\n        const deleteActions = cleanSCLItems(cleanItems);\n        expect(deleteActions.length).to.equal(3);\n      });\n    });\n\n    describe('if the GSEControl filter is disabled', async () => {\n      beforeEach(async () => {\n        await element.cleanupGSEControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        element.cleanupList?.layout();\n      });\n\n      it('creates 2 Delete Actions (LogControl, SampledValueControl)', async () => {\n        const cleanItems = Array.from(\n          (<Set<number>>element.cleanupList!.index).values()\n        ).map(index => element.unreferencedControls[index]);\n        const deleteActions = cleanSCLItems(cleanItems);\n        expect(deleteActions.length).to.equal(2);\n      });\n    });\n\n    describe('if the SampledValueControl filter is disabled', async () => {\n      beforeEach(async () => {\n        await element.cleanupSampledValueControlFilter.click();\n        // select all items and update list\n        const checkbox = element\n          .shadowRoot!.querySelector('.cleanupList')!\n          .shadowRoot!.querySelector('mwc-formfield')!\n          .querySelector('mwc-checkbox')!;\n        await checkbox.click();\n        element.cleanupList?.layout();\n      });\n\n      it('creates 3 Delete Actions (GSEControl x 2, LogControl)', async () => {\n        const cleanItems = Array.from(\n          (<Set<number>>element.cleanupList!.index).values()\n        ).map(index => element.unreferencedControls[index]);\n        const deleteActions = cleanSCLItems(cleanItems);\n        expect(deleteActions.length).to.equal(3);\n      });\n    });\n  });\n});\n"]}