{"version":3,"file":"connectedap-editor-wizarding-editing.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/communication/connectedap-editor-wizarding-editing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, html, expect } from '@open-wc/testing';\n\nimport '../../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\n\nimport '../../../../src/editors/communication/connectedap-editor.js';\nimport { ConnectedAPEditor } from '../../../../src/editors/communication/connectedap-editor.js';\nimport { WizardTextField } from '../../../../src/wizard-textfield.js';\n\ndescribe('connectedap-editor wizarding editing integration', () => {\n  describe('edit wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConnectedAPEditor | null;\n    let secondaryAction: HTMLElement;\n    let primaryAction: HTMLElement;\n    let ipField: WizardTextField;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><connectedap-editor\n              .element=${doc.querySelector(\n                'SubNetwork[name=\"StationBus\"] > ConnectedAP'\n              )}\n            ></connectedap-editor>\n            ></mock-wizard-editor\n          >`\n        )\n      );\n      element = parent.querySelector('connectedap-editor');\n      await (<HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-fab[icon=\"edit\"]')\n      )).click();\n      await parent.updateComplete;\n      ipField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"IP\"]')\n      );\n      secondaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"secondaryAction\"]'\n        )\n      );\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('closes on secondary action', async () => {\n      expect(parent.wizardUI.dialog).to.exist;\n      secondaryAction.click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(parent.wizardUI.dialog).to.not.exist;\n    });\n\n    it('changes name attribute on primary action', async () => {\n      expect(\n        doc.querySelector('ConnectedAP > Address > P[type=\"IP\"]')?.textContent\n      ).to.equal('192.168.210.111');\n      ipField.value = '192.168.210.116';\n      await parent.requestUpdate();\n      primaryAction.click();\n      await parent.requestUpdate();\n      expect(\n        doc.querySelector('ConnectedAP > Address > P[type=\"IP\"]')?.textContent\n      ).to.equal('192.168.210.116');\n    });\n\n    it('does not change Address if no changes have been made', async () => {\n      const reference = doc.querySelector('ConnectedAP');\n      primaryAction.click();\n      expect(doc.querySelector('ConnectedAP')?.isEqualNode(reference)).to.be\n        .true;\n    });\n  });\n\n  describe('remove action', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConnectedAPEditor | null;\n    let deleteButton: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><connectedap-editor\n              .element=${doc.querySelector(\n                'SubNetwork[name=\"StationBus\"] > ConnectedAP'\n              )}\n            ></connectedap-editor\n          ></mock-wizard-editor>`\n        )\n      );\n      element = parent.querySelector('connectedap-editor');\n      await parent.updateComplete;\n      deleteButton = <HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-fab[icon=\"delete\"]')\n      );\n    });\n\n    it('removes ConnectedAP on delete button click', async () => {\n      expect(doc.querySelector('SubNetwork[name=\"StationBus\"] > ConnectedAP'))\n        .to.exist;\n      deleteButton.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('SubNetwork[name=\"StationBus\"] > ConnectedAP'))\n        .to.not.exist;\n    });\n  });\n});\n"]}