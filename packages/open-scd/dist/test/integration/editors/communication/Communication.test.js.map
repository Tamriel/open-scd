{"version":3,"file":"Communication.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/communication/Communication.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../../mock-open-scd.js';\n\nimport Communication from '../../../../src/editors/Communication.js';\nimport { Dialog } from '@material/mwc-dialog';\nimport { WizardTextField } from '../../../../src/wizard-textfield.js';\nimport { MockOpenSCD } from '../../../mock-open-scd.js';\n\ndescribe('Communication Plugin', () => {\n  customElements.define('communication-plugin', Communication);\n  let element: Communication;\n  beforeEach(async () => {\n    element = await fixture(\n      html`<communication-plugin></communication-plugin>`\n    );\n  });\n\n  describe('without a doc loaded', () => {\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('with a doc loaded including communication section', () => {\n    let doc: XMLDocument;\n    let element: Communication;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      element = await fixture(\n        html`<communication-plugin .doc=\"${doc}\"></communication-plugin>`\n      );\n    });\n    it('constains a subnetwork-editor rendering the communication section', () => {\n      expect(element.shadowRoot?.querySelector('subnetwork-editor')).to.exist;\n    });\n  });\n\n  describe('with a doc loaded missing a communication section', () => {\n    let doc: XMLDocument;\n    let parent: MockOpenSCD;\n    let fab: HTMLElement;\n    let element: Communication;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/missingCommunication.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n      parent = await fixture(\n        html`<mock-open-scd\n          ><communication-plugin .doc=${doc}></communication-plugin\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await parent.updateComplete;\n      fab = <HTMLElement>(\n        parent\n          ?.querySelector('communication-plugin')\n          ?.shadowRoot?.querySelector('mwc-fab')\n      );\n    });\n    it('has a mwc-fab', () => {\n      expect(element.shadowRoot?.querySelector('mwc-fab')).to.exist;\n    });\n    it('that opens a add subnetwork wizard on mwc-fab click', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(0);\n      fab.click();\n      await parent.updateComplete;\n      expect(parent.wizardUI.dialogs.length).to.equal(1);\n    });\n\n    it('Should create a Communication Element', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(0);\n      expect(element.doc.querySelector('Communication')).is.null;\n\n      await fab.click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      await parent.updateComplete;\n\n      const dialog: Dialog = parent.wizardUI.dialog!;\n      expect(dialog).to.not.be.undefined;\n\n      const nameInput: WizardTextField = dialog.querySelector<WizardTextField>(\n        'wizard-textfield[label=\"name\"]'\n      )!;\n      nameInput.value = 'Test';\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n      const saveButton: HTMLElement = dialog.querySelector(\n        'mwc-button[slot=\"primaryAction\"]'\n      )!;\n      await saveButton.click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n      expect(element.doc.querySelector('Communication')).not.is.null;\n      expect(\n        element.doc.querySelector('Communication > SubNetwork[name=\"Test\"]')\n      ).to.exist;\n    });\n  });\n});\n"]}