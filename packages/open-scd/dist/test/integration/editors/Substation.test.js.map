{"version":3,"file":"Substation.test.js","sourceRoot":"","sources":["../../../../test/integration/editors/Substation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, fixture, expect } from '@open-wc/testing';\n\nimport '../../mock-open-scd.js';\n\nimport Substation from '../../../src/editors/Substation.js';\nimport { MockOpenSCD } from '../../mock-open-scd.js';\n\ndescribe('Substation Plugin', () => {\n  customElements.define('substation-plugin', Substation);\n  let element: Substation;\n  let parent: MockOpenSCD;\n  beforeEach(async () => {\n    parent = await fixture(\n      html`<mock-open-scd\n        ><substation-plugin></substation-plugin\n      ></mock-open-scd>`\n    );\n    element = parent.getActivePlugin();\n  });\n\n  describe('without a doc loaded', () => {\n    it('looks like the latest snapshot', async () => {\n      await expect(element).shadowDom.to.equalSnapshot();\n    });\n  });\n\n  describe('with a doc loaded including substation section', () => {\n    let doc: XMLDocument;\n    let element: Substation;\n    let parent: MockOpenSCD;\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = await fixture(\n        html`<mock-open-scd\n          ><substation-plugin .doc=\"${doc}\"></substation-plugin\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n    });\n    it('constains a zeroline-pane rendering the substation sections', () => {\n      expect(element.shadowRoot?.querySelector('zeroline-pane')).to.exist;\n    });\n  });\n\n  describe('with a doc loaded missing a substation section', () => {\n    let doc: XMLDocument;\n    let parent: MockOpenSCD;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/missingSubstation.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = await fixture(\n        html`<mock-open-scd\n          ><substation-plugin .doc=${doc}></substation-plugin\n        ></mock-open-scd>`\n      );\n      element = parent.getActivePlugin();\n      await element.updateComplete;\n    });\n    it('has a mwc-fab', () => {\n      expect(element.shadowRoot?.querySelector('mwc-fab')).to.exist;\n    });\n    it('that opens an add substation wizard on click', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(0);\n      (<HTMLElement>(\n        parent\n          ?.querySelector('substation-plugin')\n          ?.shadowRoot?.querySelector('mwc-fab')\n      )).click();\n      await parent.updateComplete;\n      expect(parent.wizardUI.dialogs.length).to.equal(1);\n    });\n  });\n});\n"]}