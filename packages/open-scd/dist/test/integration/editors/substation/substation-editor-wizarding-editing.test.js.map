{"version":3,"file":"substation-editor-wizarding-editing.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/substation/substation-editor-wizarding-editing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, html, expect } from '@open-wc/testing';\n\nimport '../../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\n\nimport '../../../../src/editors/substation/substation-editor.js';\nimport { SubstationEditor } from '../../../../src/editors/substation/substation-editor.js';\nimport { WizardTextField } from '../../../../src/wizard-textfield.js';\nimport { MenuBase } from '@material/mwc-menu/mwc-menu-base.js';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base.js';\n\nconst openAndCancelMenu: (\n  parent: MockWizardEditor,\n  element: SubstationEditor\n) => Promise<void> = (\n  parent: MockWizardEditor,\n  element: SubstationEditor\n): Promise<void> =>\n  new Promise(async resolve => {\n    expect(parent.wizardUI.dialog).to.be.undefined;\n\n    element?.shadowRoot?.querySelector<MenuBase>('mwc-menu')!.click();\n    const powerTransformerMenuItem: ListItemBase =\n      element?.shadowRoot?.querySelector<ListItemBase>(\n        `mwc-list-item[value='PowerTransformer']`\n      )!;\n    powerTransformerMenuItem.click();\n    await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n    expect(parent.wizardUI.dialog).to.exist;\n\n    const secondaryAction: HTMLElement = <HTMLElement>(\n      parent.wizardUI.dialog?.querySelector(\n        'mwc-button[slot=\"secondaryAction\"]'\n      )\n    );\n\n    secondaryAction.click();\n    await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n    expect(parent.wizardUI.dialog).to.be.undefined;\n\n    return resolve();\n  });\ndescribe('substation-editor wizarding editing integration', () => {\n  describe('edit wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    let nameField: WizardTextField;\n    let descField: WizardTextField;\n    let secondaryAction: HTMLElement;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n      element = parent.querySelector('substation-editor');\n      await (<HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-icon-button[icon=\"edit\"]')\n      )).click();\n      await parent.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n      descField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"desc\"]')\n      );\n      secondaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"secondaryAction\"]'\n        )\n      );\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n    it('closes on secondary action', async () => {\n      secondaryAction.click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(parent.wizardUI.dialog).to.not.exist;\n    });\n    it('changes name attribute on primary action', async () => {\n      nameField.value = 'newName';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('Substation')?.getAttribute('name')).to.equal(\n        'newName'\n      );\n    });\n    it('changes desc attribute on primary action', async () => {\n      descField.value = 'newDesc';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('Substation')?.getAttribute('desc')).to.equal(\n        'newDesc'\n      );\n    });\n    it('deletes desc attribute if wizard-textfield is deactivated', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      descField.nullSwitch!.click();\n      await parent.updateComplete;\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('Substation')?.getAttribute('desc')).to.be.null;\n    });\n  });\n\n  describe('Open add wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('substation-editor');\n\n      await parent.updateComplete;\n    });\n\n    it('Should open the same wizard for the second time', async () => {\n      await openAndCancelMenu(parent, element!);\n      await openAndCancelMenu(parent, element!);\n    });\n  });\n\n  describe('open add voltage level wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    let nameField: WizardTextField;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('substation-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector(\n          'mwc-list-item[value=\"VoltageLevel\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await parent.wizardUI.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n    it('opens voltage level wizard ', async () => {\n      expect(parent.wizardUI).to.exist;\n    });\n    it('has five wizard inputs', async () => {\n      expect(parent.wizardUI.inputs.length).to.equal(5);\n    });\n    it('does not add voltage level if name attribute is not unique', async () => {\n      nameField.value = 'E1';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelectorAll('VoltageLevel[name=\"E1\"]').length).to.equal(\n        1\n      );\n    });\n    it('does add voltage level if name attribute is unique', async () => {\n      nameField.value = 'J1';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('VoltageLevel[name=\"J1\"]')).to.exist;\n    });\n  });\n  describe('open lnode wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('substation-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector(\n          'mwc-icon-button[icon=\"account_tree\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n    });\n    it('opens lnode wizard ', async () => {\n      expect(parent.wizardUI).to.exist;\n    });\n    it('has two wizard pages', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(2);\n    });\n  });\n  describe('remove action', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n      element = parent.querySelector('substation-editor');\n    });\n    it('removes Substation on clicking delete button', async () => {\n      expect(doc.querySelector('Substation')).to.exist;\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-icon-button[icon=\"delete\"]')\n      )).click();\n      await parent.updateComplete;\n      expect(doc.querySelector('Substation')).to.not.exist;\n    });\n  });\n\n  describe('open create wizard for element Function', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    let nameField: WizardTextField;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/zeroline/functions.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('substation-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-list-item[value=\"Function\"]')\n      )).click();\n      await parent.updateComplete;\n      await parent.wizardUI.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('does not add Function if name attribute is not unique', async () => {\n      expect(doc.querySelector('Substation > Function[name=\"myFunc\"]')).to\n        .exist;\n\n      nameField.value = 'myFunc';\n      primaryAction.click();\n      await parent.updateComplete;\n\n      expect(\n        doc.querySelectorAll('Substation > Function[name=\"myFunc\"]').length\n      ).to.equal(1);\n    });\n\n    it('does add Function if name attribute is unique', async () => {\n      expect(doc.querySelector('Substation > Function[name=\"someNewFunction\"]'))\n        .to.not.exist;\n\n      nameField.value = 'someNewFunction';\n      await parent.updateComplete;\n      primaryAction.click();\n\n      expect(doc.querySelector('Substation > Function[name=\"someNewFunction\"]'))\n        .to.exist;\n    });\n  });\n\n  describe('open add general-equipment wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: SubstationEditor | null;\n\n    let nameField: WizardTextField;\n    let typeField: WizardTextField;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch(\n        '/test/testfiles/editors/substation/generalequipment.scd'\n      )\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><substation-editor\n              .element=${doc.querySelector('Substation')}\n            ></substation-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('substation-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector(\n          'mwc-list-item[value=\"GeneralEquipment\"]'\n        )\n      )).click();\n      await parent.updateComplete;\n      await parent.wizardUI.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n\n      typeField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"type\"]')\n      );\n\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n    it('opens general-equipment wizard ', async () => {\n      expect(parent.wizardUI).to.exist;\n    });\n    it('has four wizard inputs', async () => {\n      expect(parent.wizardUI.inputs.length).to.equal(4);\n    });\n    it('does not add general-equipment if name andattribute is not unique', async () => {\n      nameField.value = 'genSub';\n      typeField.value = 'AXN';\n      await parent.updateComplete;\n      primaryAction.click();\n\n      expect(\n        doc.querySelectorAll('GeneralEquipment[name=\"genSub\"]').length\n      ).to.equal(1);\n    });\n    it('does add general-equipment if name attribute is unique', async () => {\n      expect(doc.querySelector('GeneralEquipment[name=\"newgenSub\"]')).to.not\n        .exist;\n      nameField.value = 'newgenSub';\n      typeField.value = 'AXN';\n      await parent.updateComplete;\n      primaryAction.click();\n      expect(doc.querySelector('GeneralEquipment[name = \"newgenSub\"]')).to\n        .exist;\n    });\n  });\n});\n"]}