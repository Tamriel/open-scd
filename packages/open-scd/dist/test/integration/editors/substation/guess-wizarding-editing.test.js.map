{"version":3,"file":"guess-wizarding-editing.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/substation/guess-wizarding-editing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../../src/addons/Wizards.js';\nimport { Wizards } from '../../../../src/addons/Wizards.js';\n\nimport '../../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\n\nimport { guessVoltageLevel } from '../../../../src/editors/substation/guess-wizard.js';\nimport { newWizardEvent } from '../../../../src/foundation.js';\nimport { CheckListItem } from '@material/mwc-list/mwc-check-list-item.js';\n\ndescribe('guess-wizard-integration', () => {\n  let element: Wizards;\n  let validSCL: XMLDocument;\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/valid2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    const substation = validSCL.querySelector('Substation')!;\n    substation.innerHTML = '';\n    element = await fixture(\n      html`<oscd-wizards .host=${document}></oscd-wizards>`\n    );\n\n    const wizard = guessVoltageLevel(validSCL, substation);\n    element.dispatchEvent(newWizardEvent(() => wizard));\n    await element.requestUpdate();\n  });\n\n  describe('renders one wizard page', () => {\n    it('asking which ctlModel the is used for switchgear', async () => {\n      expect(element.wizardUI.dialogs.length).to.equal(1);\n      expect(\n        element.wizardUI.dialog!.querySelectorAll(\n          '#ctlModelList > mwc-check-list-item'\n        ).length\n      ).to.equal(5);\n    });\n\n    it('the first one being status-only', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelector(\n          '#ctlModelList > mwc-check-list-item:nth-child(1)'\n        )?.innerHTML\n      ).to.equal('status-only');\n    });\n\n    it('the second one being direct-with-normal-security', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelector(\n          '#ctlModelList > mwc-check-list-item:nth-child(2)'\n        )?.innerHTML\n      ).to.equal('direct-with-normal-security');\n    });\n\n    it('the second one being direct-with-enhanced-security', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelector(\n          '#ctlModelList > mwc-check-list-item:nth-child(3)'\n        )?.innerHTML\n      ).to.equal('direct-with-enhanced-security');\n    });\n\n    it('the second one being sbo-with-normal-security', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelector(\n          '#ctlModelList > mwc-check-list-item:nth-child(4)'\n        )?.innerHTML\n      ).to.equal('sbo-with-normal-security');\n    });\n\n    it('the second one being sbo-with-enhanced-security', async () => {\n      expect(\n        element.wizardUI.dialog!.querySelector(\n          '#ctlModelList > mwc-check-list-item:nth-child(5)'\n        )?.innerHTML\n      ).to.equal('sbo-with-enhanced-security');\n    });\n  });\n});\n\ndescribe('guess-wizarding-editing-integration', () => {\n  let mockWizardEditor: MockWizardEditor;\n  let validSCL: XMLDocument;\n\n  beforeEach(async () => {\n    validSCL = await fetch('/test/testfiles/valid2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    const substation = validSCL.querySelector('Substation')!;\n    substation.innerHTML = '';\n    mockWizardEditor = <MockWizardEditor>(\n      await fixture(html`<mock-wizard-editor></mock-wizard-editor>`)\n    );\n\n    const wizard = guessVoltageLevel(validSCL, substation);\n    mockWizardEditor.dispatchEvent(newWizardEvent(wizard));\n    await mockWizardEditor.wizardUI.dialog?.updateComplete;\n\n    await mockWizardEditor.requestUpdate();\n    await mockWizardEditor.updateComplete;\n    await mockWizardEditor.wizardUI.requestUpdate();\n\n    (<CheckListItem>(\n      mockWizardEditor.wizardUI.dialog!.querySelector(\n        '#ctlModelList > mwc-check-list-item:nth-child(5)'\n      )\n    )).selected = true;\n    await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n    await mockWizardEditor.requestUpdate();\n    await mockWizardEditor.updateComplete;\n\n    (<HTMLElement>(\n      mockWizardEditor.wizardUI.dialog?.querySelector(\n        'mwc-button[slot=\"primaryAction\"]'\n      )\n    )).click();\n    await mockWizardEditor.wizardUI.dialog?.requestUpdate();\n\n    await mockWizardEditor.requestUpdate();\n    await mockWizardEditor.updateComplete;\n  });\n\n  it('creates only one voltage level with default name', () => {\n    expect(\n      validSCL.querySelectorAll(':root > Substation > VoltageLevel').length\n    ).to.equal(1);\n    expect(\n      validSCL\n        .querySelector(':root > Substation > VoltageLevel')\n        ?.getAttribute('name')\n    ).to.equal('E1');\n    expect(\n      validSCL\n        .querySelector(':root > Substation > VoltageLevel')\n        ?.getAttribute('desc')\n    ).to.equal('guessed by OpenSCD');\n  });\n\n  it('creates as many bays as ieds with lnType CSWI and ctlModel sbo-with-enhanced-security', async () => {\n    expect(\n      validSCL.querySelectorAll(':root > Substation > VoltageLevel > Bay')\n        .length\n    ).to.equal(1);\n  });\n  it('creates correct number of conducting equipments', () => {\n    expect(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment'\n      ).length\n    ).to.equal(4);\n  });\n  it('creates only unique conducting equipment names', () => {\n    const nameArray: string[] = Array.from(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment'\n      )\n    ).map(item => item.getAttribute('name')!);\n    const nameSet = new Set(nameArray);\n    expect(nameArray.length).to.equal(nameSet.size);\n  });\n  it('creates unique conducting equipment name, if no prefix is there', () => {\n    expect(\n      validSCL\n        .querySelector(\n          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(1)'\n        )\n        ?.getAttribute('name')\n    ).to.equal('QA1');\n    expect(\n      validSCL\n        .querySelector(\n          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4)'\n        )\n        ?.getAttribute('name')\n    ).to.equal('QB1');\n  });\n  it('uses prefix for conducting equipment name, if prefix is available', () => {\n    expect(\n      validSCL\n        .querySelector(\n          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(2)'\n        )\n        ?.getAttribute('name')\n    ).to.equal('CB2');\n    expect(\n      validSCL\n        .querySelector(\n          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3)'\n        )\n        ?.getAttribute('name')\n    ).to.equal('DC1');\n  });\n  it('automatically adds loginal nodes to the first conducting equipment', () => {\n    expect(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(1) > LNode'\n      ).length\n    ).to.equal(2);\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(1) > LNode[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"XCBR\"][lnInst=\"1\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(1) > LNode[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][lnClass=\"CSWI\"][lnInst=\"1\"]'\n      )\n    ).to.exist;\n  });\n  it('automatically adds loginal nodes to the second conducting equipment', () => {\n    expect(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(2) > LNode'\n      ).length\n    ).to.equal(2);\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(2) > LNode[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][prefix=\"CB\"][lnClass=\"XCBR\"][lnInst=\"2\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(2) > LNode[iedName=\"IED1\"][ldInst=\"CircuitBreaker_CB1\"][prefix=\"CB\"][lnClass=\"CSWI\"][lnInst=\"2\"]'\n      )\n    ).to.exist;\n  });\n  it('automatically adds loginal nodes to the third conducting equipment', () => {\n    expect(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3) > LNode'\n      ).length\n    ).to.equal(3);\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"XSWI\"][lnInst=\"1\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"CSWI\"][lnInst=\"1\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][prefix=\"DC\"][lnClass=\"CILO\"][lnInst=\"1\"]'\n      )\n    ).to.exist;\n  });\n  it('automatically adds loginal nodes to the fourth conducting equipment', () => {\n    expect(\n      validSCL.querySelectorAll(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4) > LNode'\n      ).length\n    ).to.equal(3);\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][lnClass=\"XSWI\"][lnInst=\"3\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][lnClass=\"CSWI\"][lnInst=\"3\"]'\n      )\n    ).to.exist;\n    expect(\n      validSCL.querySelector(\n        ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4) > LNode[iedName=\"IED1\"][ldInst=\"Disconnectors\"][lnClass=\"CILO\"][lnInst=\"3\"]'\n      )\n    ).to.exist;\n  });\n});\n"]}