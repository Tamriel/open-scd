{"version":3,"file":"conducting-equipment-editor-wizarding-editing.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/substation/conducting-equipment-editor-wizarding-editing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, html, expect } from '@open-wc/testing';\n\nimport '../../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\n\nimport '../../../../src/editors/substation/conducting-equipment-editor.js';\nimport { ConductingEquipmentEditor } from '../../../../src/editors/substation/conducting-equipment-editor.js';\nimport { WizardTextField } from '../../../../src/wizard-textfield.js';\nimport { MenuBase } from '@material/mwc-menu/mwc-menu-base.js';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base.js';\n\nconst openAndCancelMenu: (\n  parent: MockWizardEditor,\n  element: ConductingEquipmentEditor\n) => Promise<void> = (\n  parent: MockWizardEditor,\n  element: ConductingEquipmentEditor\n): Promise<void> =>\n  new Promise(async resolve => {\n    expect(parent.wizardUI.dialog).to.be.undefined;\n\n    element?.shadowRoot\n      ?.querySelector<MenuBase>(\"mwc-icon-button[icon='playlist_add']\")!\n      .click();\n    const lnodeMenuItem: ListItemBase =\n      element?.shadowRoot?.querySelector<ListItemBase>(\n        `mwc-list-item[value='LNode']`\n      )!;\n    lnodeMenuItem.click();\n    await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n    expect(parent.wizardUI.dialog).to.exist;\n\n    const secondaryAction: HTMLElement = <HTMLElement>(\n      parent.wizardUI.dialog?.querySelector(\n        'mwc-button[slot=\"secondaryAction\"]'\n      )\n    );\n\n    secondaryAction.click();\n    await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n\n    expect(parent.wizardUI.dialog).to.be.undefined;\n\n    return resolve();\n  });\n\ndescribe('conducting-equipment-editor wizarding editing integration', () => {\n  describe('edit wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n\n    let nameField: WizardTextField;\n    let descField: WizardTextField;\n    let secondaryAction: HTMLElement;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><conducting-equipment-editor\n              .element=${doc.querySelector('ConductingEquipment')}\n            ></conducting-equipment-editor\n          ></mock-wizard-editor>`\n        )\n      );\n      element = parent.querySelector('conducting-equipment-editor');\n      await (<HTMLElement>(\n        element?.shadowRoot?.querySelector('*[icon=\"edit\"]')\n      )).click();\n      await parent.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n      descField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"desc\"]')\n      );\n      secondaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"secondaryAction\"]'\n        )\n      );\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n    it('closes on secondary action', async () => {\n      secondaryAction.click();\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      expect(parent.wizardUI.dialog).to.not.exist;\n    });\n    it('does not change name attribute if not unique within parent element', async () => {\n      const oldName = nameField.value;\n      nameField.value = 'QA1';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector('ConductingEquipment')?.getAttribute('name')\n      ).to.equal(oldName);\n    });\n    it('changes name attribute on primary action', async () => {\n      nameField.value = 'newName';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector('ConductingEquipment')?.getAttribute('name')\n      ).to.equal('newName');\n    });\n    it('changes desc attribute on primary action', async () => {\n      descField.value = 'newDesc';\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector('ConductingEquipment')?.getAttribute('desc')\n      ).to.equal('newDesc');\n    });\n    it('deletes desc attribute if wizard-textfield is deactivated', async () => {\n      await new Promise(resolve => setTimeout(resolve, 100)); // await animation\n      descField.nullSwitch!.click();\n      await parent.updateComplete;\n      primaryAction.click();\n      await parent.updateComplete;\n      expect(doc.querySelector('ConductingEquipment')?.getAttribute('desc')).to\n        .be.null;\n    });\n  });\n  describe('open lnode wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><conducting-equipment-editor\n              .element=${doc.querySelector('ConductingEquipment')}\n            ></conducting-equipment-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('conducting-equipment-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector('*[icon=\"account_tree\"]')\n      )).click();\n      await parent.updateComplete;\n    });\n    it('opens lnode wizard ', async () => {\n      expect(parent.wizardUI).to.exist;\n    });\n    it('has two wizard pages', async () => {\n      expect(parent.wizardUI.dialogs.length).to.equal(2);\n    });\n  });\n  describe('move action', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n    let element2: ConductingEquipmentEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            >${Array.from(\n              doc?.querySelectorAll(\n                'Bay[name=\"COUPLING_BAY\"] > ConductingEquipment'\n              ) ?? []\n            ).map(\n              condEq =>\n                html`<conducting-equipment-editor\n                  .element=${condEq}\n                ></conducting-equipment-editor>`\n            )}\n            ></mock-wizard-editor\n          >`\n        )\n      );\n      element = parent.querySelector(\n        'conducting-equipment-editor:nth-child(1)'\n      );\n      element2 = parent.querySelector(\n        'conducting-equipment-editor:nth-child(2)'\n      );\n    });\n    it('moves ConductingEquipment within Bay', async () => {\n      expect(\n        doc.querySelector('ConductingEquipment')?.getAttribute('name')\n      ).to.equal('QA1');\n      (<HTMLElement>(\n        element2?.shadowRoot?.querySelector('*[icon=\"forward\"]')\n      )).click();\n      await parent.updateComplete;\n      (<HTMLElement>element).click();\n      await parent.updateComplete;\n      expect(\n        doc.querySelector('ConductingEquipment')?.getAttribute('name')\n      ).to.equal('QB1');\n    });\n  });\n  describe('remove action', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><conducting-equipment-editor\n              .element=${doc.querySelector('ConductingEquipment')}\n            ></conducting-equipment-editor\n          ></mock-wizard-editor>`\n        )\n      );\n      element = parent.querySelector('conducting-equipment-editor');\n    });\n    it('removes ConductingEquipment on clicking delete button', async () => {\n      expect(doc.querySelector('ConductingEquipment[name=\"QA1\"]')).to.exist;\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector('*[icon=\"delete\"]')\n      )).click();\n      await parent.updateComplete;\n      expect(doc.querySelector('ConductingEquipment[name=\"QA1\"]')).to.not.exist;\n    });\n  });\n\n  describe('open create wizard for element EqFunction', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n\n    let nameField: WizardTextField;\n    let primaryAction: HTMLElement;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/zeroline/functions.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><conducting-equipment-editor\n              .element=${doc.querySelector('ConductingEquipment')}\n              ?showfunctions=${true}\n            ></conducting-equipment-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('conducting-equipment-editor');\n\n      (<HTMLElement>(\n        element?.shadowRoot?.querySelector('mwc-list-item[value=\"EqFunction\"]')\n      )).click();\n      await parent.requestUpdate();\n\n      await parent.updateComplete;\n\n      nameField = <WizardTextField>(\n        parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n      );\n\n      primaryAction = <HTMLElement>(\n        parent.wizardUI.dialog?.querySelector(\n          'mwc-button[slot=\"primaryAction\"]'\n        )\n      );\n    });\n\n    it('does not add EqFunction if name attribute is not unique', async () => {\n      expect(\n        doc.querySelector(\n          'ConductingEquipment > EqFunction[name=\"myEqFuncQA1\"]'\n        )\n      ).to.exist;\n\n      nameField.value = 'myEqFuncQA1';\n      primaryAction.click();\n      await parent.updateComplete;\n\n      expect(\n        doc.querySelectorAll(\n          'ConductingEquipment > EqFunction[name=\"myEqFuncQA1\"]'\n        ).length\n      ).to.equal(1);\n    });\n\n    it('does add EqFunction if name attribute is unique', async () => {\n      expect(\n        doc.querySelector(\n          'ConductingEquipment > EqFunction[name=\"someNewFunction\"]'\n        )\n      ).to.not.exist;\n\n      nameField.value = 'someNewFunction';\n      await parent.updateComplete;\n      primaryAction.click();\n\n      expect(\n        doc.querySelector(\n          'ConductingEquipment > EqFunction[name=\"someNewFunction\"]'\n        )\n      ).to.exist;\n    });\n  });\n\n  describe('Open add wizard', () => {\n    let doc: XMLDocument;\n    let parent: MockWizardEditor;\n    let element: ConductingEquipmentEditor | null;\n\n    beforeEach(async () => {\n      doc = await fetch('/test/testfiles/valid2007B4.scd')\n        .then(response => response.text())\n        .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n      parent = <MockWizardEditor>(\n        await fixture(\n          html`<mock-wizard-editor\n            ><conducting-equipment-editor\n              .element=${doc.querySelector('ConductingEquipment')}\n              ?showfunctions=${true}\n            ></conducting-equipment-editor\n          ></mock-wizard-editor>`\n        )\n      );\n\n      element = parent.querySelector('conducting-equipment-editor');\n\n      await parent.updateComplete;\n    });\n\n    it('Should open the same wizard for the second time', async () => {\n      await openAndCancelMenu(parent, element!);\n      await openAndCancelMenu(parent, element!);\n    });\n  });\n});\n"]}