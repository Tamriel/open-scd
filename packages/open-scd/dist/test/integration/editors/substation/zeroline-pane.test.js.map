{"version":3,"file":"zeroline-pane.test.js","sourceRoot":"","sources":["../../../../../test/integration/editors/substation/zeroline-pane.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport '../../../mock-wizard-editor.js';\nimport { MockWizardEditor } from '../../../mock-wizard-editor.js';\n\nimport '../../../../src/editors/substation/zeroline-pane.js';\nimport { FilteredList } from '../../../../src/filtered-list.js';\nimport { ZerolinePane } from '../../../../src/editors/substation/zeroline-pane.js';\nimport { WizardTextField } from '../../../../src/wizard-textfield.js';\nimport { IconButton } from '@material/mwc-icon-button';\nimport { ListItem } from '@material/mwc-list/mwc-list-item';\n\ndescribe('zeroline-pane wizarding editing integration', () => {\n  let doc: XMLDocument;\n  let parent: MockWizardEditor;\n  let zeroline: ZerolinePane;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/comm-map.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    parent = <MockWizardEditor>(\n      await fixture(\n        html`<mock-wizard-editor\n          ><zeroline-pane .doc=${doc}></zeroline-pane\n        ></mock-wizard-editor>`\n      )\n    );\n    zeroline = <ZerolinePane>parent.querySelector('zeroline-pane');\n    await parent.updateComplete;\n  });\n\n  it('opens selectGseControlWizard for the complete SCL file', async () => {\n    zeroline.gsecontrol.click();\n    await parent.updateComplete;\n    await parent.wizardUI.updateComplete;\n    expect(parent.wizardUI.dialog).to.exist;\n    const gseControlList = <FilteredList>(\n      parent.wizardUI.dialog?.querySelector('filtered-list')\n    );\n    await gseControlList.updateComplete;\n    expect(gseControlList.items.length).to.equal(\n      doc.querySelectorAll('GSEControl').length\n    );\n  });\n\n  it('opens selectSampledValueControlWizard for the complete SCL file', async () => {\n    zeroline.smvcontrol.click();\n    await parent.updateComplete;\n    await parent.wizardUI.updateComplete;\n\n    expect(parent.wizardUI.dialog).to.exist;\n    const smvControlList = <FilteredList>(\n      parent.wizardUI.dialog?.querySelector('filtered-list')\n    );\n    await smvControlList.updateComplete;\n    expect(smvControlList.items.length).to.equal(\n      doc.querySelectorAll('SampledValueControl').length\n    );\n  });\n\n  it('opens select wizard for SCL element ReportControl for the complete project', async () => {\n    zeroline.reportcontrol.click();\n    await parent.updateComplete;\n    await parent.wizardUI.updateComplete;\n\n    expect(parent.wizardUI.dialog).to.exist;\n    const reportControlList = <FilteredList>(\n      parent.wizardUI.dialog?.querySelector('filtered-list')\n    );\n    await reportControlList.updateComplete;\n    expect(reportControlList.items.length).to.equal(\n      doc.querySelectorAll('ReportControl').length\n    );\n  });\n\n  it('add Substation element with add button', async () => {\n    expect(doc.querySelector('Substation[name=\"newSubstation\"]')).to.not.exist;\n    zeroline.addButton.click();\n    (<ListItem>zeroline.addMenu.querySelector('[value=Substation]')).click();\n    await parent.updateComplete;\n    await parent.wizardUI.updateComplete;\n\n    const primaryAction = <IconButton>(\n      parent.wizardUI.dialog?.querySelector('mwc-button[slot=\"primaryAction\"]')\n    );\n    await primaryAction.updateComplete;\n    const nameField = <WizardTextField>(\n      parent.wizardUI.dialog?.querySelector('wizard-textfield[label=\"name\"]')\n    );\n    nameField.value = 'newSubstation';\n    await nameField.updateComplete;\n    primaryAction.click();\n\n    expect(doc.querySelector('Substation[name=\"newSubstation\"]')).to.exist;\n  });\n});\n"]}