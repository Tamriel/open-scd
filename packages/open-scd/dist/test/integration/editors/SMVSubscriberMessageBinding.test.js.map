{"version":3,"file":"SMVSubscriberMessageBinding.test.js","sourceRoot":"","sources":["../../../../test/integration/editors/SMVSubscriberMessageBinding.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport SMVSubscriberMessageBindingPlugin from '../../../src/editors/SMVSubscriberMessageBinding.js';\n\nimport { ListItem } from '@material/mwc-list/mwc-list-item.js';\nimport { MockOpenSCD } from '../../mock-open-scd.js';\nimport '../../mock-open-scd.js';\nimport { TemplateResult, html as litHTML } from 'lit';\nimport { customElement, query } from 'lit/decorators.js';\n\ncustomElements.define('smv-plugin', SMVSubscriberMessageBindingPlugin);\n\n@customElement('smv-mock-open-scd')\nclass SmvMockOpenSCD extends MockOpenSCD {\n  @query('smv-plugin')\n  plugin!: SMVSubscriberMessageBindingPlugin;\n\n  renderHosting(): TemplateResult {\n    return litHTML`<smv-plugin\n      .doc=${this.doc}\n      .editCount=${this.editCount}\n      .nsdoc=${this.nsdoc}\n    ></smv-plugin>`;\n  }\n}\n\ndescribe('Sampled Values Plugin', () => {\n  let element: SMVSubscriberMessageBindingPlugin;\n  let parent: SmvMockOpenSCD;\n  let doc: XMLDocument;\n\n  beforeEach(async () => {\n    doc = await fetch('/test/testfiles/editors/MessageBindingSMV2007B4.scd')\n      .then(response => response.text())\n      .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n    parent = await fixture(\n      html`<smv-mock-open-scd .doc=${doc}></smv-mock-open-scd>`\n    );\n\n    await parent.updateComplete;\n\n    element = parent.plugin;\n\n    await element.updateComplete;\n  });\n\n  describe('in Publisher view', () => {\n    describe('initially', () => {\n      it('the plugin looks like the latest snapshot', async () => {\n        await expect(element).shadowDom.to.equalSnapshot();\n      });\n\n      it('the Sampled Values list looks like the latest snapshot', async () => {\n        await expect(\n          element.shadowRoot?.querySelector('smv-list')\n        ).shadowDom.to.equalSnapshot();\n      });\n\n      it('the subscriber list looks like the latest snapshot', async () => {\n        await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n      });\n    });\n\n    describe('when selecting a Sampled Values message', () => {\n      const nthSampledValueStream = 0;\n      let fCDAs: Element[];\n      let smvControlBlock: Element;\n\n      let smv: HTMLElement;\n\n      beforeEach(async () => {\n        smvControlBlock = doc.querySelectorAll('SampledValueControl')[\n          nthSampledValueStream\n        ];\n        fCDAs = Array.from(\n          smvControlBlock.parentElement?.querySelectorAll(\n            `DataSet[name=\"${smvControlBlock.getAttribute('datSet')}\"] > FCDA`\n          ) ?? []\n        );\n\n        smv = Array.from(\n          element.shadowRoot\n            ?.querySelector('smv-list')\n            ?.shadowRoot?.querySelectorAll('mwc-list-item') ?? []\n        ).filter(item => !item.noninteractive)[nthSampledValueStream];\n\n        (<HTMLElement>smv).click();\n        await element.updateComplete;\n      });\n\n      it('the list on the right will initially show the subscribed / partially subscribed / not subscribed IEDs', async () => {\n        await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n      });\n\n      describe('and subscribing an unsubscribed IED', () => {\n        it('initially no ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(0);\n        });\n\n        it('it looks like the latest snapshot', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED2')).click();\n          await element.updateComplete;\n\n          await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n        });\n\n        it('adds the required ExtRefs to the subscriber IED', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED2')).click();\n          await element.updateComplete;\n\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(fCDAs.length);\n        });\n\n        it('makes sure that Ed1 attributes are added properly', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED2')).click();\n          await element.requestUpdate();\n\n          fCDAs.forEach(\n            fcda =>\n              expect(\n                element.doc.querySelector(\n                  `IED[name=\"IED2\"] ExtRef[iedName=\"IED3\"][ldInst=\"${fcda.getAttribute(\n                    'ldInst'\n                  )}\"][prefix=\"${fcda.getAttribute(\n                    'prefix'\n                  )}\"][lnClass=\"${fcda.getAttribute(\n                    'lnClass'\n                  )}\"][lnInst=\"${fcda.getAttribute(\n                    'lnInst'\n                  )}\"][doName=\"${fcda.getAttribute(\n                    'doName'\n                  )}\"][daName=\"${fcda.getAttribute('daName')}\"]`\n                )\n              ).to.exist\n          );\n        });\n\n        it('makes sure that Ed2 attributes are added properly', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED2')).click();\n          await element.requestUpdate();\n\n          fCDAs.forEach(\n            fcda =>\n              expect(\n                element.doc.querySelector(\n                  `IED[name=\"IED2\"] ExtRef[iedName=\"IED3\"][srcLDInst=\"${fcda\n                    .closest('LDevice')\n                    ?.getAttribute('inst')}\"][srcPrefix=\"${\n                    fcda.closest('LN0')?.getAttribute('prefix') ?? '' //prefix is mendatory in ExtRef!!\n                  }\"][srcLNClass=\"${fcda\n                    .closest('LN0')\n                    ?.getAttribute(\n                      'lnClass'\n                    )}\"][srcCBName=\"${smvControlBlock.getAttribute(\n                    'name'\n                  )}\"][serviceType=\"SMV\"]`\n                )\n              ).to.exist\n          );\n        });\n      });\n\n      describe('and you unsubscribe a subscribed IED', () => {\n        it('initially all the ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(16);\n        });\n\n        it('it looks like the latest snapshot', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED1')).click();\n          await element.updateComplete;\n\n          await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n        });\n\n        it('removes the required ExtRefs from the subscriber IED', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED1')).click();\n          await element.updateComplete;\n\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED1\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(0);\n        });\n      });\n\n      describe('and you subscribe a partially subscribed IED', () => {\n        it('initially only 10 ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED4\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"],' +\n                'IED[name=\"IED4\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(10);\n        });\n\n        it('it looks like the latest snapshot', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED4')).click();\n          await element.updateComplete;\n\n          await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n        });\n\n        it('adds the required ExtRefs to the subscriber IED', async () => {\n          (<HTMLElement>getItemFromSubscriberList('IED4')).click();\n          await element.updateComplete;\n\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED4\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"],' +\n                'IED[name=\"IED4\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(16);\n        });\n      });\n    });\n  });\n\n  describe('in Subscriber view', () => {\n    beforeEach(async () => {\n      (<HTMLElement>(\n        element.shadowRoot?.querySelector('#smvSubscriberView')\n      )).click();\n      await element.updateComplete;\n    });\n\n    describe('initially', () => {\n      it('the plugin looks like the latest snapshot', async () => {\n        await expect(element).shadowDom.to.equalSnapshot();\n      });\n\n      it('the IED list looks like the latest snapshot', async () => {\n        await expect(\n          element.shadowRoot?.querySelector('ied-list')\n        ).shadowDom.to.equalSnapshot();\n      });\n\n      it('the subscriber list looks like the latest snapshot', async () => {\n        await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n      });\n    });\n\n    describe('when selecting an IED', () => {\n      let ied: HTMLElement;\n\n      beforeEach(async () => {\n        ied = Array.from(\n          element.shadowRoot\n            ?.querySelector('ied-list')\n            ?.shadowRoot?.querySelectorAll('mwc-list-item') ?? []\n        ).filter(item => !item.noninteractive)[1];\n\n        (<HTMLElement>ied).click();\n        await element.updateComplete;\n      });\n\n      it('the subscriber list will initially show the subscribed / partially subscribed / not subscribed IEDs', async () => {\n        await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n      });\n\n      describe('and subscribing a unsubscribed Sampled Value message', () => {\n        it('initially no ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(0);\n        });\n\n        describe('clicking on a SampledValueControl list item', () => {\n          let fCDAs: Element[];\n          let smvControlBlock: Element;\n\n          beforeEach(async () => {\n            smvControlBlock = element.doc.querySelector(\n              'IED[name=\"IED3\"] SampledValueControl[name=\"MSVCB01\"]'\n            )!;\n            fCDAs = Array.from(\n              smvControlBlock.parentElement?.querySelectorAll(\n                `DataSet[name=\"${smvControlBlock.getAttribute(\n                  'datSet'\n                )}\"] > FCDA`\n              ) ?? []\n            );\n\n            (<HTMLElement>getItemFromSubscriberList('MSVCB01')).click();\n            await element.requestUpdate();\n          });\n\n          it('it looks like the latest snapshot', async () =>\n            await expect(getSubscriberList()).shadowDom.to.equalSnapshot());\n\n          it('adds the required ExtRefs to the subscriber IED', async () => {\n            expect(\n              element.doc.querySelectorAll(\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                  'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n              ).length\n            ).to.eql(fCDAs.length);\n          });\n\n          it('makes sure that Ed1 attributes are added properly', async () => {\n            fCDAs.forEach(\n              fcda =>\n                expect(\n                  element.doc.querySelector(\n                    `IED[name=\"IED2\"] ExtRef[iedName=\"IED3\"][ldInst=\"${fcda.getAttribute(\n                      'ldInst'\n                    )}\"][prefix=\"${fcda.getAttribute(\n                      'prefix'\n                    )}\"][lnClass=\"${fcda.getAttribute(\n                      'lnClass'\n                    )}\"][lnInst=\"${fcda.getAttribute(\n                      'lnInst'\n                    )}\"][doName=\"${fcda.getAttribute(\n                      'doName'\n                    )}\"][daName=\"${fcda.getAttribute('daName')}\"]`\n                  )\n                ).to.exist\n            );\n          });\n\n          it('makes sure that Ed2 attributes are added properly', async () => {\n            fCDAs.forEach(\n              fcda =>\n                expect(\n                  element.doc.querySelector(\n                    `IED[name=\"IED2\"] ExtRef[iedName=\"IED3\"][srcLDInst=\"${fcda\n                      .closest('LDevice')\n                      ?.getAttribute('inst')}\"][srcPrefix=\"${\n                      fcda.closest('LN0')?.getAttribute('prefix') ?? '' //prefix is mendatory in ExtRef!!\n                    }\"][srcLNClass=\"${fcda\n                      .closest('LN0')\n                      ?.getAttribute(\n                        'lnClass'\n                      )}\"][srcCBName=\"${smvControlBlock.getAttribute(\n                      'name'\n                    )}\"][serviceType=\"SMV\"]`\n                  )\n                ).to.exist\n            );\n          });\n        });\n      });\n\n      describe('and unsubscribing a subscribed Sampled Value message', () => {\n        beforeEach(async () => {\n          (<HTMLElement>getItemFromSubscriberList('MSVCB01')).click();\n          await element.updateComplete;\n          await parent.updateComplete;\n        });\n\n        it('initially all ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(16);\n        });\n\n        it('it looks like the latest snapshot', async () => {\n          (<HTMLElement>getItemFromSubscriberList('MSVCB01')).click();\n          await element.updateComplete;\n\n          await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n        });\n\n        it('removes the required ExtRefs to the subscriber IED', async () => {\n          (<HTMLElement>getItemFromSubscriberList('MSVCB01')).click();\n          await element.updateComplete;\n          await parent.updateComplete;\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED3\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED3\"]'\n            ).length\n          ).to.eql(0);\n        });\n      });\n\n      describe('and subscribing a partially subscribed Sampled Value message', () => {\n        it('initially some ExtRefs are available in the subscriber IED', async () => {\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED4\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED4\"]'\n            ).length\n          ).to.eql(2);\n        });\n\n        it('it looks like the latest snapshot', async () => {\n          (<HTMLElement>getItemFromSubscriberList('MSVCB02')).click();\n          await element.updateComplete;\n\n          await expect(getSubscriberList()).shadowDom.to.equalSnapshot();\n        });\n\n        it('adds the required ExtRefs to the subscriber IED', async () => {\n          (<HTMLElement>getItemFromSubscriberList('MSVCB02')).click();\n          await element.updateComplete;\n\n          expect(\n            element.doc.querySelectorAll(\n              'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN0 > Inputs > ExtRef[iedName=\"IED4\"], ' +\n                'IED[name=\"IED2\"] > AccessPoint > Server > LDevice > LN > Inputs > ExtRef[iedName=\"IED4\"]'\n            ).length\n          ).to.eql(16);\n        });\n      });\n    });\n  });\n\n  function getSubscriberList() {\n    return element.shadowRoot?.querySelector('subscriber-list-smv');\n  }\n\n  function getItemFromSubscriberList(\n    textInListItem: string\n  ): ListItem | undefined {\n    return (\n      Array.from(\n        getSubscriberList()!.shadowRoot?.querySelectorAll('mwc-list-item') ?? []\n      ).filter(listItem => listItem.innerHTML.includes(textInListItem))[0] ??\n      undefined\n    );\n  }\n});\n"]}